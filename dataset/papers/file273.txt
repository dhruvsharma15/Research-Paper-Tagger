show me the fare from ci0 to ci1Tasks like semantic parsing and code generation are challenging in part because they are struc- tured (the output must be well-formed) but not synchronous (the output structure diverges from the input structure).Sequence-to-sequence models have proven ef- fective for both tasks (Dong and Lapata, 2016;Ling et al., 2016), using encoder-decoder frame- works to exploit the sequential structure on both the input and output side. Yet these approaches do not account for much richer structural con- straints on outputs-including well-formedness, well-typedness, and executability. The well- formedness case is of particular interest, since it can readily be enforced by representing outputs as abstract syntax trees (ASTs) ( Aho et al., 2006), an approach that can be seen as a much lighter weight lambda $0 e ( exists $1 ( and ( from $1 ci0 ) ( to $1 ci1 ) ( = ( fare $1 ) $0 ) ) )Figure 2: Example of a query and its logical form from the ATIS dataset. The ci0 and ci1 tokens are entity abstractions introduced in preprocess- ing (Dong and Lapata, 2016). * Equal contribution.version of CCG-based semantic parsing (Zettlemoyer and Collins, 2005). In this work, we introduce abstract syntax networks (ASNs), an extension of the standard encoder-decoder framework utilizing a modular decoder whose submodels are composed to na- tively generate ASTs in a top-down manner. The decoding process for any given input follows a dy- namically chosen mutual recursion between the modules, where the structure of the tree being produced mirrors the call graph of the recursion. We implement this process using a decoder model built of many submodels, each associated with a specific construct in the AST grammar and in- voked when that construct is needed in the out- put tree. As is common with neural approaches to structured prediction (Chen and Manning, 2014;Vinyals et al., 2015), our decoder proceeds greed- ily and accesses not only a fixed encoding but also an attention-based representation of the in- put ( Bahdanau et al., 2014).Our model significantly outperforms previous architectures for code generation and obtains com- petitive or state-of-the-art results on a suite of se- mantic parsing benchmarks. On the HEARTH- STONE dataset for code generation, we achieve a token BLEU score of 79.2 and an exact match ac- curacy of 22.7%, greatly improving over the pre- vious best results of 67.1 BLEU and 6.1% exact match ( Ling et al., 2016).The flexibility of ASNs makes them readily ap- plicable to other tasks with minimal adaptation. We illustrate this point with a suite of seman- tic parsing experiments. On the JOBS dataset, we improve on previous state-of-the-art, achiev- ing 92.9% exact match accuracy as compared to the previous record of 90.7%. Likewise, we per- form competitively on the ATIS and GEO datasets, matching or exceeding the exact match reported by Dong and Lapata (2016), though not quite reaching the records held by the best previous se- mantic parsing approaches ( Wang et al., 2014).ing a limited form of top-down recursion, but without the modularity or tight coupling between output grammar and model characteristic of our approach.Neural (and probabilistic) modeling of code, in- cluding for prediction problems, has a longer his- tory. Allamanis et al. (2015) and Maddison and Tarlow (2014) proposed modeling code with a neural language model, generating concrete syn- tax trees in left-first depth-first order, focusing on metrics like perplexity and applications like code snippet retrieval. More recently, Shin et al. (2017) attacked the same problem using a grammar-based variational autoencoder with top-down generation similar to ours instead. Meanwhile, a separate line of work has focused on the problem of program induction from input-output pairs ( Balog et al., 2016;Liang et al., 2010;Menon et al., 2013).The prediction framework most similar in spirit to ours is the doubly-recurrent decoder network in- troduced by Alvarez-Melis and Jaakkola (2017), which propagates information down the tree using a vertical LSTM and between siblings using a hor- izontal LSTM. Our model differs from theirs in using a separate module for each grammar con- struct and learning separate vertical updates for siblings when the AST labels require all siblings to be jointly present; we do, however, use a hori- zontal LSTM for nodes with variable numbers of children. The differences between our models re- flect not only design decisions, but also differences in data-since ASTs have labeled nodes and la- beled edges, they come with additional structure that our model exploits.Encoder-decoder architectures, with and without attention, have been applied successfully both to sequence prediction tasks like machine translation and to tree prediction tasks like constituency pars- ing ( Cross and Huang, 2016;Dyer et al., 2016;Vinyals et al., 2015). In the latter case, work has focused on making the task look like sequence-to- sequence prediction, either by flattening the output tree ( Vinyals et al., 2015) or by representing it as a sequence of construction decisions (Cross and Huang, 2016;Dyer et al., 2016). Our work dif- fers from both in its use of a recursive top-down generation procedure. Dong and Lapata (2016) introduced a sequence- to-sequence approach to semantic parsing, includ- Apart from ours, the best results on the code- generation task associated with the HEARTH- STONE dataset are based on a sequence-to- sequence approach to the problem ( Ling et al., 2016). Abstract syntax networks greatly improve on those results.Previously, Andreas et al. (2016) introduced neural module networks (NMNs) for visual ques- tion answering, with modules corresponding to linguistic substructures within the input query. The primary purpose of the modules in NMNs is to compute deep features of images in the style of convolutional neural networks (CNN). These fea- tures are then fed into a final decision layer. In contrast to the modules we describe here, NMN modules do not make decisions about what to gen- erate or which modules to call next, nor do they  primitive types: identifier, object, ...Our model makes use of the Abstract Syntax Description Language (ASDL) framework ( Wang et al., 1997), which represents code fragments as trees with typed nodes. Primitive types correspond to atomic values, like integers or identifiers. Ac- cordingly, primitive nodes are annotated with a primitive type and a value of that type-for in- stance, in Figure 3a, the identifier node stor- ing "create minion" represents a function of the same name.Composite types correspond to language con- structs, like expressions or statements. Each type has a collection of constructors, each of which specifies the particular language construct a node of that type represents. Figure 4 shows con- structors for the statement (stmt) and expression (expr) types. The associated language constructs include function and class definitions, return state- ments, binary operations, and function calls.Composite types enter syntax trees via compos- ite nodes, annotated with a composite type and a choice of constructor specifying how the node ex- pands. The root node in Figure 3a, for example, is  a composite node of type stmt that represents a class definition and therefore uses the ClassDef constructor. In Figure 3b, on the other hand, the root uses the Call constructor because it repre- sents a function call.Children are specified by named and typed fields of the constructor, which have cardinalities of singular, optional, or sequential. By default, fields have singular cardinality, meaning they correspond to exactly one child. For instance, the ClassDef constructor has a singular name field of type identifier. Fields of optional cardinality are associ- ated with zero or one children, while fields of sequential cardinality are associated with zero or more children-these are designated us- ing ? and * suffixes in the grammar, respectively. Fields of sequential cardinality are often used to represent statement blocks, as in the body field of the ClassDef and FunctionDef construc- tors.The grammars needed for semantic parsing can easily be given ASDL specifications as well, us- ing primitive types to represent variables, predi- cates, and atoms and composite types for standard logical building blocks like lambdas and counting (among others). Figure 2 shows what the resulting λ-calculus trees look like. The ASDL grammars for both λ-calculus and Prolog-style logical forms are quite compact, as Figures 9 and 10 in the ap- pendix show. the decoder.Each component c of the input is encoded using a component-specific bidirectional LSTM. This re- sults in forward and backward token encodings ( − → h c , ← − h c ) that are later used by the attention mech- anism. To obtain an encoding of the input as a whole for decoder initialization, we concatenate the final forward and backward encodings of each component into a single vector and apply a linear projection.We represent inputs as collections of named com- ponents, each of which consists of a sequence of tokens. In the case of semantic parsing, inputs have a single component containing the query sen- tence. In the case of HEARTHSTONE, the card's name and description are represented as sequences of characters and tokens, respectively, while cate- gorical attributes are represented as single-token sequences. For HEARTHSTONE, we restrict our input and output vocabularies to values that occur more than once in the training set.The decoder decomposes into several classes of modules, one per construct in the grammar, which we discuss in turn. Throughout, we let v de- note the current vertical LSTM state, and use f to represent a generic feedforward neural network. LSTM updates with hidden state h and input x are notated as LSTM(h, x).Composite type modules Each composite type T has a corresponding module whose role is to se- lect among the constructors C for that type. As Figure 5a exhibits, a composite type module re- ceives a vertical LSTM state v as input and ap- plies a feedforward network f T and a softmax out- put layer to choose a constructor:Control is then passed to the module associated with constructor C.Our model uses an encoder-decoder architecture with hierarchical attention. The key idea behind our approach is to structure the decoder as a col- lection of mutually recursive modules. The mod- ules correspond to elements of the AST gram- mar and are composed together in a manner that mirrors the structure of the tree being generated. A vertical LSTM state is passed from module to module to propagate information during the de- coding process. The encoder uses bidirectional LSTMs to em- bed each component and a feedforward network to combine them. Component-and token-level at- tention is applied over the input at each step of the decoding process.We train our model using negative log likeli- hood as the loss function. The likelihood encom- passes terms for all generation decisions made by Constructor modules Each constructor C has a corresponding module whose role is to compute an intermediate vertical LSTM state v u,F for each of its fields F whenever C is chosen at a composite node u.For each field F of the constructor, an embed- ding e F is concatenated with an attention-based context vector c and fed through a feedforward neural network f C to obtain a context-dependent field embedding:An intermediate vertical state for the field F at composite node u is then computed as  (c) A constructor field module (sequential cardinal- ity) generating children to populate the field. At each step, the module decides whether to generate a child and continue (white circle) or stop (black circle).(d) A primitive type module choosing a value from a closed list.Figure 5: The module classes constituting our decoder. For brevity, we omit the cardinality modules for singular and optional cardinalities.Constructor field modules Each field F of a constructor has a corresponding module whose role is to determine the number of children asso- ciated with that field and to propagate an updated vertical LSTM state to them. In the case of fields with singular cardinality, the decision and up- date are both vacuous, as exactly one child is al- ways generated. Hence these modules forward the field vertical LSTM state v u,F unchanged to the child w corresponding to F: decides whether to generate another child by ap- plying a modified form of (2):Fields with optional cardinality can have either zero or one children; this choice is made using a feedforward network applied to the vertical LSTM state:If z F,i = 0, generation stops and the process ter- minates, as represented by the solid black circle in Figure 5c. Otherwise, the process continues as represented by the white circle in Figure 5c. In that case, the horizontal state s u,i−1 is combined with the vertical state v u,F and an attention-based context vector c F,i using a feedforward network f update F to obtain a joint context-dependent encod- ing of the field F and the position i:If a child is to be generated, then as in (1), the state is propagated forward without modification.In the case of sequential fields, a horizon- tal LSTM is employed for both child decisions and state updates. We refer to Figure 5c for an illus- tration of the recurrent process. After being ini- tialized with a transformation of the vertical state,The result is used to perform a vertical LSTM up- date for the corresponding child w i :Finally, the horizontal LSTM state is updated us- ing the same field-position encoding, and the pro- cess continues:Primitive type modules Each primitive type T has a corresponding module whose role is to se- lect among the values y within the domain of that type. Figure 5d presents an example of the sim- plest form of this selection process, where the value y is obtained from a closed list via a soft- max layer applied to an incoming vertical LSTM state:The current state x can be either the vertical LSTM state in isolation or a concatentation of the vertical LSTM state and either a horizontal LSTM state or a character LSTM state (for string gener- ation). Each submodule that computes attention does so using a separate matrix W. A separate attention score qis computed for each component of the input, independent of its content: q comp c = wSome string-valued types are open class, how- ever. To deal with these, we allow generation both from a closed list of previously seen values, as in Figure 5d, and synthesis of new values. Synthesis is delegated to a character-level LSTM language model ( Bengio et al., 2003), and part of the role of the primitive module for open class types is to choose whether to synthesize a new value or not. During training, we allow the model to use the character LSTM only for unknown strings but in- clude the log probability of that binary decision in the loss in order to ensure the model learns when to generate from the character LSTM. where c(t) denotes the component in which token t occurs. The attention weight vector a is then computed using a softmax:Given the weights, the attention-based context is given by: c = a t e t .The decoding process proceeds through mutual re- cursion between the constituting modules, where the syntactic structure of the output tree mirrors the call graph of the generation procedure. At each step, the active decoder module either makes a generation decision, propagates state down the tree, or both.To construct a composite node of a given type, the decoder calls the appropriate composite type module to obtain a constructor and its associated module. That module is then invoked to obtain updated vertical LSTM states for each of the con- structor's fields, and the corresponding constructor field modules are invoked to advance the process to those children.This process continues downward, stopping at each primitive node, where a value is generated but no further recursion is carried out.Certain decision points that require attention have been highlighted in the description above; however, in our final implementation we made attention available to the decoder at all decision points.Following standard practice for sequence-to- sequence models, we compute a raw bilinear at- tention score q raw Supervised Attention In the datasets we con- sider, partial or total copying of input tokens into primitive nodes is quite common. Rather than pro- viding an explicit copying mechanism ( Ling et al., 2016), we instead generate alignments where pos- sible to define a set of tokens on which the atten- tion at a given primitive node should be concen- trated. 2 If no matches are found, the correspond- ing set of tokens is taken to be the whole input.The attention supervision enters the loss through a term that encourages the final attention weights to be concentrated on the specified sub- set. Formally, if the matched subset of component- token pairs is S, the loss term associated with the supervision would be log exp (a t ) − log exp (a t ),t for each token t in the input us- ing the decoder's current state x and the token's encoding e t : t t∈S 2 Alignments are generated using an exact string match heuristic that also included some limited normalization, pri- marily splitting of special characters, undoing camel case, and lemmatization for the semantic parsing datasets.where a t is the attention weight associated with to- ken t, and the sum in the first term ranges over all tokens in the input. The loss in (3) can be inter- preted as the negative log probability of attending to some token in S.its description consists of a sequence of tokens split on whitespace and punctuation. All categori- cal components are represented as single-token se- quences.Data We use three semantic parsing datasets: JOBS, GEO, and ATIS. All three consist of nat- ural language queries paired with a logical repre- sentation of their denotations. JOBS consists of 640 such pairs, with Prolog-style logical represen- tations, while GEO and ATIS consist of 880 and 5,410 such pairs, respectively, with λ-calculus log- ical forms. We use the same training-test split as Zettlemoyer and Collins (2005) for JOBS and GEO, and the standard training-development-test split for ATIS. We use the preprocessed versions of these datasets made available by Dong and Lapata (2016), where text in the input has been low- ercased and stemmed using NLTK ( Bird et al., 2009), and matching entities appearing in the same input-output pair have been replaced by numbered abstract identifiers of the same type.Evaluation For direct comparison to the results of Ling et al. (2016), we evaluate our predicted code based on exact match and token-level BLEU relative to the reference implementations from the library. We additionally compute node-based pre- cision, recall, and F1 scores for our predicted trees compared to the reference code ASTs. Formally, these scores are obtained by defining the intersec- tion of the predicted and gold trees as their largest common tree prefix.Evaluation We compute accuracies using tree exact match for evaluation. Following the pub- licly released code of Dong and Lapata (2016), we canonicalize the order of the children within con- junction and disjunction nodes to avoid spurious errors, but otherwise perform no transformations before comparison.Data We use the HEARTHSTONE dataset intro- duced by Ling et al. (2016), which consists of 665 cards paired with their implementations in the open-source Hearthbreaker engine. 3 Our training- development-test split is identical to that of Ling et al. (2016), with split sizes of 533, 66, and 66, respectively.Cards contain two kinds of components: tex- tual components that contain the card's name and a description of its function, and categorical ones that contain numerical attributes (attack, health, cost, and durability) or enumerated attributes (rar- ity, type, race, and class). The name of the card is represented as a sequence of characters, while For each experiment, all feedforward and LSTM hidden dimensions are set to the same value. We select the dimension from {30, 40, 50, 60, 70} for the smaller JOBS and GEO datasets, or from {50, 75, 100, 125, 150} for the larger ATIS and HEARTHSTONE datasets. The dimensionality used for the inputs to the encoder is set to 100 in all cases. We apply dropout to the non-recurrent connections of the vertical and horizontal LSTMs, selecting the noise ratio from {0.2, 0.3, 0.4, 0.5}. All parameters are randomly initialized using Glo- rot initialization (Glorot and Bengio, 2010).We perform 200 passes over the data for the JOBS and GEO experiments, or 400 passes for the ATIS and HEARTHSTONE experiments. Early stopping based on exact match is used for the se- mantic parsing experiments, where performance is evaluated on the training set for JOBS and GEO or on the development set for ATIS. Parameters for the HEARTHSTONE experiments are selected based on development BLEU scores. In order to promote generalization, ties are broken in all cases with a preference toward higher dropout ratios and lower dimensionalities, in that order.Our system is implemented in Python using the DyNet neural network library ( Neubig et al., 2017). We use the Adam optimizer (Kingma and Ba, 2014) with its default settings for optimiza- tion, with a batch size of 20 for the semantic pars- ing experiments, or a batch size of 10 for the HEARTHSTONE experiments.3 Available online at https://github.com/ danielyule/hearthbreaker.Our results on the semantic parsing datasets are presented in  Figure 6: Cards with minimal descriptions exhibit a uniform structure that our system almost always predicts correctly, as in this instance.a new state-of-the-art accuracy of 91.4% on the JOBS dataset, and this number improves to 92.9% when supervised attention is added. On the ATIS and GEO datasets, we respectively exceed and match the results of Dong and Lapata (2016). However, these fall short of the previous best re- sults of 91.3% and 90.4%, respectively, obtained by Wang et al. (2014). This difference may be par- tially attributable to the use of typing information or rich lexicons in most previous semantic pars- ing approaches (Zettlemoyer and Collins, 2007;Kwiatkowski et al., 2013;Wang et al., 2014;Zhao and Huang, 2015).Figure 7: For many cards with moderately com- plex descriptions, the implementation follows a functional style that seems to suit our modeling strategy, usually leading to correct predictions.On the HEARTHSTONE dataset, we improve significantly over the initial results of Ling et al. (2016) across all evaluation metrics, as shown in Table 2. On the more stringent exact match metric, we improve from 6.1% to 18.2%, and on token- level BLEU, we improve from 67.1 to 77.6. When supervised attention is added, we obtain an ad- ditional increase of several points on each scale, achieving peak results of 22.7% accuracy and 79.2 BLEU.As the examples in Figures 6-8 show, classes in the HEARTHSTONE dataset share a great deal of common structure. As a result, in the simplest cases, such as in Figure 6, generating the code is simply a matter of matching the overall structure and plugging in the correct values in the initializer and a few other places. In such cases, our sys- tem generally predicts the correct code, with the exception of instances in which strings are incor- rectly transduced. Introducing a dedicated copy- ing mechanism like the one used by Ling et al. (2016) or more specialized machinery for string transduction may alleviate this latter problem.The next simplest category of card-code pairs consists of those in which the card's logic is mostly implemented via nested function calls. Figure 7 illustrates a typical case, in which the card's effect is triggered by a game event (a spell being cast) and both the trigger and the effect are described by arguments to an Effect construc- tor. Our system usually also performs well on in- stances like these, apart from idiosyncratic errors that can take the form of under-or overgeneration or simply substitution of incorrect predicates.match that canonicalize the code-for example, by anonymizing all variables-may prove more meaningful. Direct evaluation of functional equiv- alence is of course impossible in general (Sipser, 2006), and practically challenging even for the HEARTHSTONE dataset because it requires inte- grating with the game engine.Existing work also does not attempt to enforce semantic coherence in the output. Long-distance semantic dependencies, between occurrences of a single variable for example, in particular are not modeled. Nor is well-typedness or executability. Overcoming these evaluation and modeling issues remains an important open problem.Cards whose code includes complex logic ex- pressed in an imperative style, as in Figure 8, pose the greatest challenge for our system. Factors like variable naming, nontrivial control flow, and in- terleaving of code predictable from the descrip- tion with code required due to the conventions of the library combine to make the code for these cards difficult to generate. In some instances (as in the figure), our system is nonetheless able to synthesize a close approximation. However, in the most complex cases, the predictions deviate sig- nificantly from the correct implementation.ASNs provide a modular encoder-decoder archi- tecture that can readily accommodate a variety of tasks with structured output spaces. They are par- ticularly applicable in the presence of recursive decompositions, where they can provide a simple decoding process that closely parallels the inher- ent structure of the outputs. Our results demon- strate their promise for tree prediction tasks, and we believe their application to more general out- put structures is an interesting avenue for future work.In addition to the specific errors our system makes, some larger issues remain unresolved. Ex- isting evaluation metrics only approximate the actual metric of interest: functional equiva- lence. Modifications of BLEU, tree F1, and exact
