Using weak or noisy supervision is a straightforward approach to increase the size of the training data [Dehghani et al., 2017b, Patrini et al., 2016, Beigman and Klebanov, 2009, Zeng et al., 2015, Bunescu and Mooney, 2007. The output of heuristic methods can be used as weak or noisy signals along with a small amount of labeled data to train neural networks. This is usually done by pre-training the network on weak data and fine tuning it with true labels [Dehghani et al., 2017b, Severyn andMoschitti, 2015a]. However, these two independent stages do not leverage the full capacity of information from true labels and using noisy labels of lower quality often brings little to no improvement. This issue is tackled by noise-aware models where denoising the weak signal is part of the learning process [Patrini et al., 2016, Sukhbaatar et al., 2014, Dehghani et al., 2017a.In this paper, we propose a method that leverages a small amount of data with true labels along with a large amount of data with weak labels. In our proposed method, we train two networks in a multi-task fashion: a target network which uses a large set of weakly annotated instances to learn the main task while a confidence network is trained on a small human-labeled set to estimate confidence scores. These scores define the magnitude of the weight updates to the target network during the back-propagation phase. From a meta-learning perspective [Andrychowicz et al., 2016, Finn et al., 2017, Ravi and Larochelle, 2016, the goal of the confidence network, as the meta-learner, trained jointly with the target network, as the learner, is to calibrate the learning rate of the target network for each instance in the batch. I.e., the weights w w w of the target network f w at step t +1 are updated as follows:where η t is the global learning rate, L(·) is the loss of predictingˆypredictingˆ predictingˆy = f w (x i ) for an input x i when the label is˜yis˜ is˜y; c θ (·) is a scoring function learned by the confidence network taking input instance x i and its noisy label˜ylabel˜ label˜y i . Thus, we can effectively control the contribution to the parameter updates for the target network from weakly labeled instances based on how reliable their labels are according to the confidence network (learned on a small supervised data).Our approach is similar to [Andrychowicz et al., 2016], where a separate recurrent neural network called optimizer learns to predict an optimal update rule for updating parameters of the target network. The opti- mizer receives a gradient from the target network and outputs the adjusted gradient matrix. As the number of parameters in modern neural networks is typically on the order of millions the gradient matrix becomes too large to feed into the optimizer, so the approach presented in [Andrychowicz et al., 2016] is applied to very small models. In contrast, our approach leverages additional weakly labeled data where we use the confidence network to predict per-instance scores that calibrate gradient updates for the target network.Our setup requires running a weak annotator to label a large amount of unlabeled data, which is done at pre-processing time. For many tasks, it is possible to use a simple heuristic to generate weak labels. This set is then used to train the target network. In contrast, a small human-labeled set is used to train the confidence network, which estimates how good the weak annotations are, i.e. controls the effect of weak labels on updating the parameters of the target network. This helps to alleviate updates from instances with unreliable labels that may corrupt the target network.In this paper, we study our approach on sentiment classification task.Our experimental results suggest that the proposed method is more effective in leveraging large amounts of weakly labeled data compared to traditional fine-tuning. We also show that explicitly controlling the target network weight updates with the confidence network leads to faster convergence.In the following, we describe our recipe for training neural networks, in a scenario where along with a small human-labeled training set a large set of weakly labeled instances is leveraged. Formally, given a set of unlabeled training instances, we run a weak annotator to generate noisy labels. This gives us the training setU. It consists of tuples of training instances x i and their weak labels˜ylabels˜ labels˜y i , i.e. U = {(x i , ˜ y i ),...}. For a small set of training instances with true labels, we also apply the weak annotator to generate weak labels. This creates the training set V, consisting of triplets of training instances x j , their weak labels˜ylabels˜ labels˜y j , and their true labels y j , i.e. V = {(x j , ˜ y j ,y j ),...}. We can generate a large amount of training dataU at almost no cost using the weak annotator. In contrast, we have only a limited amount of data with true labels, i.e. |V | &lt;&lt; |U|.In our proposed framework we train a multi-task neural network that jointly learns the confidence score of weak training instances and the main task using controlled supervised signals. The high-level representation of the model is shown in Figure 1: it comprises two neural networks, namely the confidence network and the target network. The goal of the confidence network is to estimate the confidence score˜cscore˜ score˜c j of training instances. It is learned on triplets from training set V: input x j , its weak label˜ylabel˜ label˜y j , and its true label y j . The score˜cscore˜ score˜c j is then used to control the effect of weakly annotated training instances on updating the parameters of the target network.The target network is in charge of handling the main task we want to learn. Given the data instance, x i and its weak label˜ylabel˜ label˜y i from the training set U, the target network aims to predict the labeî y i . The target network parameter updates are based on noisy labels assigned by the weak annotator, but the magnitude of the gradient update is based on the output of the confidence network.Both networks are trained in a multi-task fashion alternating between the full supervision and the weak supervision mode. In the full supervision mode, the parameters of the confidence network get updated using batches of instances from training set V. As depicted in Figure 1b, each training instance is passed through the representation layer mapping inputs to vectors. These vectors are concatenated with their corresponding weak labels˜ylabels˜ labels˜y j . The confidence network then estimates˜cestimates˜ estimates˜c j , which is the probability of taking data instance j into account for training the target network.In the weak supervision mode the parameters of the target network are updated using training set U. As shown in Figure 1a, each training instance is passed through the same representation learning layer and is then processed by the supervision layer which is a part of the target network predicting the label for the main task. We also pass the learned representation of each training instance along with its corresponding label generated by the weak annotator to the confidence network to estimate the confidence score of the training instance, i.e. ˜ c i . The confidence score is computed for each instance from set U. These confidence scores are used to weight the gradient updating the target network parameters during back- propagation. It is noteworthy that the representation layer is shared between both networks, so the confi- dence network can benefit from the largeness of setU and the target network can utilize the quality of setV.Our optimization objective is composed of two terms: (1) the confidence network loss L c , which captures the quality of the output from the confidence network and (2) the target network loss L t , which expresses the quality for the main task.Both networks are trained by alternating between the weak supervision and the full supervision mode. In the full supervision mode, the parameters of the confidence network are updated using training instance drawn from training set V. We use cross-entropy loss function for the confidence network to capture the difference between the predicted confidence score of instance j, i.e. ˜ c j and the target score c j :The target score c j is calculated based on the difference of the true and weak labels with respect to the main task. In the weak supervision mode, the parameters of the target network are updated using training instances from U. We use a weighted loss function, L t , to capture the difference between the predicted labeî y i by the target network and target label˜ylabel˜ label˜y i :where L i is the task-specific loss on training instance i and˜cand˜ and˜c i is the confidence score of the weakly annotated instance i, estimated by the confidence network. Note that˜cthat˜ that˜c i is treated as a constant during the weak supervision mode and there is no gradient propagation to the confidence network in the backward pass (as depicted in Figure 1a).We minimize two loss functions jointly by randomly alternating between full and weak supervision modes (for example, using a 1:10 ratio). During training and based on the chosen supervision mode, we sample a batch of training instances from V with replacement or from U without replacement (since we can generate as much train data for set U).In this section, we apply our method to sentiment classification task. This task aims to identify the sentiment (e.g., positive, negative, or neutral) underlying an individual sentence. Our target network is a convolutional model similar to [Deriu et al., 2017, Severyn and Moschitti, 2015a,b, Deriu et al., 2016. In this model, the Representation Learning Layer learns to map the input sentence s to a dense vector as its representation. The inputs are first passed through an embedding layer mapping the sentence to a matrix S ∈ R m× |s | , followed by a series of 1d convolutional layers with max-pooling. The Supervision Layer is a feed-forward neural network with softmax instead as the output layer which returns the probability distribution over all three classes. As the the Weak Annotator, for the sentiment classification task is a simple unsupervised lexicon-based method [Hamdan et al., 2013, Kiritchenko et al., 2014, which averages over predefined sentiment score of words [Baccianella et al., 2010] in the sentence. More details about the sentiment classification model and the experimental setups are provided in Appendix A and Appendix B, respectively. In the following, we briefly introduce our baselines, dataset we have used, and present results of the experiments. Baselines. We evaluate the performance of our method compared to the following baselines: (WA) Weak Annotator, i.e. the unsupervised method that we used for annotating the unlabeled data. (WSO) Weak Supervision Only, i.e. the target network trained only on weakly labeled data. (FSO) Full Supervision Only, i.e. the target network trained only on true labeled data. (WS+FT) Weak Supervision + Fine Tuning, i.e. the target network trained on the weakly labeled data and fine tuned on true labeled data. (NLI) New Label Inference [Veit et al., 2017] is similar to our proposed neural architecture inspired by the teacher-student paradigm [Hinton et al., 2015], but instead of having the confidence network to predict the "confidence score" of the training instance, there is a label generator network which is trained on set V to map the weak labels of the instances in U to the new labels. The new labels are then used as the target for training the target network. (L2LWS ST ) Our model with different training setup: Separate Training, i.e. we consider the confidence network as a separate network, without sharing the representation learning layer, and train it on set V. We then train the target network on the controlled weak supervision signals. (L2LWS) Learning to Learn from Weak Supervision with Joint Training is our proposed neural architecture in which we jointly train the target network and the confidence network by alternating batches drawn from sets V and U (as explained in Section 2.1).Data. For train/test our model, we use SemEval-13 SemEval-14, SemEval-15, twitter sentiment classi- fication task. We use a large corpus containing 50M tweets collected during two months as unblabled set. Results and Discussion. We report the official SemEval metric, Macro-F1, in Table 1. Based on the results, L2LWS provides a significant boost on the performance over all datasets. Typical fine tuning, i.e. WS+FT, leads to improvement over weak supervision only. The performance of NLI is worse than L2LWS as learning a mapping from imperfect labels to accurate labels and training the target network on new labels is essentially harder than learning to filter out the noisy labels, hence needs a lot of supervised data. L2LWS ST performs worse than L2LWS since the training data V is not enough to train a high-quality confidence network without taking advantage of the shared representation that can be learned from the vast amount of weakly annotated data in U. We also noticed that this strategy leads to a slow convergence compared to WSO. Besides the general baselines, we also report the best performing systems, which are also convolution-based models ( [Rouvier and Favre, 2016] on SemEval-14; [Deriu et al., 2016] on SemEval-15). Our proposed model outperforms the best systems.Controlling the effect of supervision to train neural networks not only improves the performance, but also provides the network with more solid signals which speeds up the training process. Figure 2 illustrates the training/validation loss for both networks, compared to the loss of training the target network with weak supervision, along with their performance on test sets, with respect to different amounts of training data for the sentiment classification task. As shown, training, L t is higher than L WSO , but the target labels with re- spect of which the loss is calculated, are weak, so regardless overfitting problem and lack of generalization, a very low loss means fitting the imperfection of the weak data. However, L t in the validation decreases faster than L WSO and compared to WSO, the performance of L2LWS on both test sets increases quickly and L2LWS passes the performance of the weak annotator by seeing fewer instances annotated by WA.In this paper, we propose a neural network architecture that unifies learning to estimate the confidence score of weak annotations and training neural networks with controlled weak supervision. We apply the model to the sentiment classification task, and empirically verify that the proposed model speeds up the training process and obtains more accurate results. In the sentiment classification task, we aim to identify the sentiment (e.g., positive, negative, or neutral) underlying an individual sentence. The model we used as the target network is a convolutional model similar to [Deriu et al., 2017, Severyn and Moschitti, 2015a,b, Deriu et al., 2016.Each training instance x consists of a sentence s and its sentiment label˜ylabel˜ label˜y. The architecture of the target network is illustrated in Figure 3. Here we describe the setup of the target network, i.e. description of the representation learning layer and the supervision layer. The Representation Learning Layer learns a representation for the input sentence s and is shared between the target network and confidence network. It consists of an embedding function ε : V → R m , where V denotes the vocabulary set and m is the number of embedding dimensions.Pooled Repr.This function maps the sentence to a matrix S ∈ R m×|s | , where each column represents the embedding of a word at the corresponding position in the sentence. Matrix S is passed through a convolution layer. In this layer, a set of f filters is applied to a sliding window of length h over S to generate a feature map matrix O. Each feature map o i for a given filter F is generated by We also add a bias vector b ∈ R f to the result of a convolution. Each convolutional layer is followed by a non-linear activation function (we use ReLU) which is applied element-wise. Afterward, the output is passed to the max pooling layer which operates on columns of the feature map matrix O returning the largest value: pool(o i ) : R 1×( |s |−h+1) → R (see Figure 3). This architecture is similar to the state-of-the-art model for Twitter sentiment classification from Semeval 2015[Severyn and Moschitti, 2015b, Deriu et al., 2016.We initialize the embedding matrix with word2vec embeddings pretrained on a collection of 50M tweets. The Supervision Layer receives the vector representation of the inputs processed by the representation learning layer and outputs a predictioñ y. We opt for a simple fully connected feed-forward network with l hidden layers followed by a softmax. Each hidden layer z k in this network computes z k = α(W k z k−1 +b k ), where W k and b k denote the weight matrix and the bias term corresponding to the k th hidden layer and α(.) is the non-linearity. These layers follow a softmax layer which returns˜yreturns˜ returns˜y i , the probability distribution over all three classes. We employ the weighted cross entropy loss:where B U is a batch of instances from U, and˜cand˜ and˜c i is the confidence score of the weakly annotated instance i, and K is a set of classes. The Weak Annotator for the sentiment classification task is a simple unsupervised lexicon-based method [Hamdan et al., 2013, Kiritchenko et al., 2014. We use SentiWordNet03 [Baccianella et al., 2010] to assign probabilities (positive, negative and neutral) for each token in set U. Then a sentence-level distribution is derived by simply averaging the distributions of the terms, yielding a noisy label˜ylabel˜ label˜y i ∈ R |K | , where |K | is the number of classes, i.e. |K | = 3. We empirically found that using soft labels from the weak annotator works better than assigning a single hard label. The target label c j for the confidence network is calculated by using the mean absolute difference of the true label and the weak label: c j = 1− 1 |K | k ∈K |y k j − ˜ y k j |, where y j is the one-hot encoding of the sentence label over all classes.
