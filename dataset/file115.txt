Sequence-to-Sequence learning with deep neural networks (herein, seq2seq) (Sutskever et al., 2011;) has rapidly become a very useful and surprisingly general-purpose tool for nat- ural language processing. In addition to demon- strating impressive results for machine translation ( Bahdanau et al., 2015), roughly the same model and training have also proven to be useful for sen- tence compression ( Filippova et al., 2015), parsing ( Vinyals et al., 2015), and dialogue systems (Serban et al., 2016), and they additionally underlie other 1. Exposure Bias: the model is never exposed to its own errors during training, and so the in- ferred histories at test-time do not resemble the gold training histories.2. Loss-Evaluation Mismatch: training uses a word-level loss, while at test-time we target improving sequence-level evaluation metrics, such as BLEU ( Papineni et al., 2002).We might additionally add the concern of label bias ( Lafferty et al., 2001) to the list, since word- probabilities at each time-step are locally normal- ized, guaranteeing that successors of incorrect his- tories receive the same mass as do the successors of the true history.In this work we develop a non-probabilistic vari- ant of the seq2seq model that can assign a score to any possible target sequence, and we propose a training procedure, inspired by the learning as search optimization (LaSO) framework of Daumé III and Marcu (2005), that defines a loss function in terms of errors made during beam search. Fur- thermore, we provide an efficient algorithm to back- propagate through the beam-search procedure dur- ing seq2seq training.This approach offers a possible solution to each of the three aforementioned issues, while largely maintaining the model architecture and training ef- ficiency of standard seq2seq learning. Moreover, by scoring sequences rather than words, our ap- proach also allows for enforcing hard-constraints on sequence generation at training time. To test out the effectiveness of the proposed approach, we develop a general-purpose seq2seq system with beam search optimization. We run experiments on three very dif- ferent problems: word ordering, syntactic parsing, and machine translation, and compare to a highly- tuned seq2seq system with attention ( Luong et al., 2015). The version with beam search optimization shows significant improvements on all three tasks, and particular improvements on tasks that require difficult search.The issues of exposure bias and label bias have re- ceived much attention from authors in the structured prediction community, and we briefly review some of this work here. One prominent approach to com- bating exposure bias is that of SEARN (Daumé III et al., 2009), a meta-training algorithm that learns a search policy in the form of a cost-sensitive classifier trained on examples generated from an interpolation of an oracle policy and the model's current (learned) policy. Thus, SEARN explicitly targets the mis- match between oracular training and non-oracular (often greedy) test-time inference by training on the output of the model's own policy. DAgger (Ross et al., 2011) is a similar approach, which differs in terms of how training examples are generated and aggregated, and there have additionally been impor- tant refinements to this style of training over the past several years ( Chang et al., 2015). When it comes to training RNNs, SEARN/DAgger has been applied under the name "scheduled sampling" ( , which involves training an RNN to generate the t + 1'st token in a target sequence after consum- ing either the true t'th token, or, with probability that increases throughout training, the predicted t'th to- ken.Though technically possible, it is uncom- mon to use beam search when training with SEARN/DAgger. The early-update ( Collins and Roark, 2004) and LaSO (Daumé III and Marcu, 2005) training strategies, however, explicitly ac- count for beam search, and describe strategies for updating parameters when the gold structure be- comes unreachable during search. Early update and LaSO differ primarily in that the former discards a training example after the first search error, whereas LaSO resumes searching after an error from a state that includes the gold partial structure. In the con- text of feed-forward neural network training, early update training has been recently explored in a feed- forward setting by Zhou et al. (2015) and Andor et al. (2016). Our work differs in that we adopt a LaSO-like paradigm (with some minor modifica- tions), and apply it to the training of seq2seq RNNs (rather than feed-forward networks). We also note that Watanabe and Sumita (2015) apply maximum- violation training (Huang et al., 2012), which is sim- ilar to early-update, to a parsing model with recur- rent components, and that Yazdani and Henderson (2015) use beam-search in training a discriminative, locally normalized dependency parser with recurrent components.Recently authors have also proposed alleviating exposure bias using techniques from reinforcement learning. Ranzato et al. (2016) follow this ap- proach to train RNN decoders in a seq2seq model, and they obtain consistent improvements in perfor- mance, even over models trained with scheduled sampling. As Daumé III and Marcu (2005) note, LaSO is similar to reinforcement learning, except it does not require "exploration" in the same way. Such exploration may be unnecessary in supervised text-generation, since we typically know the gold partial sequences at each time-step. Shen et al. (2016) use minimum risk training (approximated by sampling) to address the issues of exposure bias and loss-evaluation mismatch for seq2seq MT, and show impressive performance gains.Whereas exposure bias results from training in a certain way, label bias results from properties of the model itself. In particular, label bias is likely to affect structured models that make sub-structure predictions using locally-normalized scores. Be- cause the neural and non-neural literature on this point has recently been reviewed by Andor et al. (2016), we simply note here that RNN models are typically locally normalized, and we are unaware of any specifically seq2seq work with RNNs that does not use locally-normalized scores. The model we introduce here, however, is not locally normalized, and so should not suffer from label bias. We also note that there are some (non-seq2seq) exceptions to the trend of locally normalized RNNs, such as the work of Sak et al. (2014) and Voigtlaender et al. (2015), who train LSTMs in the context of HMMs for speech recognition using sequence-level objec- tives; their work does not consider search, however. of length T , and the notation y 1:T to refer to the gold (i.e., correct) target word sequence for an input x.Most seq2seq systems utilize a recurrent neural network (RNN) for the decoder model. Formally, a recurrent neural network is a parameterized non- linear function RNN that recursively maps a se- quence of vectors to a sequence of hidden states. Let m 1 , . . . , m T be a sequence of T vectors, and let h 0 be some initial state vector. Applying an RNN to any such sequence yields hidden states h t at each time-step t, as follows:In the simplest seq2seq scenario, we are given a col- lection of source-target sequence pairs and tasked with learning to generate target sequences from source sequences. For instance, we might view ma- chine translation in this way, where in particular we attempt to generate English sentences from (corre- sponding) French sentences. Seq2seq models are part of the broader class of "encoder-decoder" mod- els ( ), which first use an encoding model to transform a source object into an encoded representation x. Many different sequential (and non-sequential) encoders have proven to be effec- tive for different source domains. In this work we are agnostic to the form of the encoding model, and simply assume an abstract source representation x.Once the input sequence is encoded, seq2seq models generate a target sequence using a decoder. The decoder is tasked with generating a target se- quence of words from a target vocabulary V. In particular, words are generated sequentially by con- ditioning on the input representation x and on the previously generated words or history. We use the notation w 1:T to refer to an arbitrary word sequence where θ is the set of model parameters, which are shared over time. In this work, the vectors m t will always correspond to the embeddings of a tar- get word sequence w 1:T , and so we will also write h t ← RNN(w t , h t−1 ; θ), with w t standing in for its embedding.RNN decoders are typically trained to act as con- ditional language models. That is, one attempts to model the probability of the t'th target word con- ditioned on x and the target history by stipulating that p(w t |w 1:t−1 , x) = g(w t , h t−1 , x), for some pa- rameterized function g typically computed with an affine layer followed by a softmax. In computing these probabilities, the state h t−1 represents the tar- get history, and h 0 is typically set to be some func- tion of x. The complete model (including encoder) is trained, analogously to a neural language model, to minimize the cross-entropy loss at each time-step while conditioning on the gold history in the train- ing data. That is, the model is trained to minimize − ln T t=1 p(y t |y 1:t−1 , x). Once the decoder is trained, discrete se- quence generation can be performed by approx- imately maximizing the probability of the tar- get sequence under the conditional distribution, ˆ y 1:T = argbeam w 1:T T t=1 p(w t |w 1:t−1 , x), where we use the notation argbeam to emphasize that the decoding process requires heuristic search, since the RNN model is non-Markovian. In practice, a simple beam search procedure that explores K prospective histories at each time-step has proven to be an effec- tive decoding approach. However, as noted above, decoding in this manner after conditional language- model style training potentially suffers from the is- sues of exposure bias and label bias, which moti- vates the work of this paper. sequence in S t according to f . That is, assuming distinct scores,We begin by making one small change to the seq2seq modeling framework. Instead of predicting the probability of the next word, we instead learn to produce (non-probabilistic) scores for ranking se- quences. Define the score of a sequence consisting of history w 1:t−1 followed by a single word w t as f (w t , h t−1 , x), where f is a parameterized function examining the current hidden-state of the relevant RNN at time t − 1 as well as the input representa- tion x. In experiments, our f will have an identi- cal form to g but without the final softmax transfor- mation (which transforms unnormalized scores into probabilities), thereby allowing the model to avoid issues associated with the label bias problem. More importantly, we also modify how this model is trained. Ideally we would train by comparing the gold sequence to the highest-scoring complete sequence. However, because finding the argmax sequence according to this model is intractable, we propose to adopt a LaSO-like (Daumé III and Marcu, 2005) scheme to train, which we will re- fer to as beam search optimization (BSO). In par- ticular, we define a loss that penalizes the gold se- quence falling off the beam during training. 1 The proposed training approach is a simple way to ex- pose the model to incorrect histories and to match the training procedure to test generation. Further- more we show that it can be implemented efficiently without changing the asymptotic run-time of train- ing, beyond a factor of the beam size K.wherê yt is the t'th token inˆyinˆ inˆy 1:t , ˆ h t−1 is the RNN state corresponding to its t − 1'st step, and where we have omitted the x argument to f for brevity.We now define a loss function that gives loss each time the score of the gold prefix y 1:t does not exceed that ofˆyofˆ ofˆyAbove, the ∆(ˆ y1:t ) term denotes a mistake-specific cost-function, which allows us to scale the loss de- pending on the severity of erroneously predictingˆy predictingˆ predictingˆy (K) 1:t ; it is assumed to return 0 when the margin re- quirement is satisfied, and a positive number other- wise. It is this term that allows us to use sequence- rather than word-level costs in training (addressing the 2nd issue in the introduction). For instance, when training a seq2seq model for machine trans- lation, it may be desirable to have ∆(ˆ y (K) 1:t ) be in- versely related to the partial sentence-level BLEU score ofˆyofˆ ofˆy (K) We now formalize this notion of a search-based loss for RNN training. Assume we have a set S t of K candidate sequences of length t. We can calculate a score for each sequence in S t using a scoring func- tion f parameterized with an RNN, as above, and we define the sequencê y1:t ∈ S t to be the K'th ranked 1 Using a non-probabilistic model further allows us to incur no loss (and thus require no update to parameters) when the gold sequence is on the beam; this contrasts with models based on a CRF loss, such as those of Andor et al. (2016) and Zhou et al. (2015), though in training those models are simply not updated when the gold sequence remains on the beam.1:t with y 1:t ; we experiment along these lines in Section 5.3.Finally, because we want the full gold sequence to be at the top of the beam at the end of search, when t = T we modify the loss to require the score of y 1:T to exceed the score of the highest ranked incorrect prediction by a margin.We can optimize the loss L using a two-step pro- cess: (1) in a forward pass, we compute candidate sets S t and record margin violations (sequences with non-zero loss); (2) in a backward pass, we back- propagate the errors through the seq2seq RNNs. Un- like standard seq2seq training, the first-step requires running search (in our case beam search) to find margin violations. The second step can be done by adapting back-propagation through time (BPTT). We next discuss the details of this process.In order to minimize this loss, we need to specify a procedure for constructing candidate sequencesˆysequencesˆ sequencesˆy (k) 1:t at each time step t so that we find margin viola- tions. We follow LaSO (rather than early-update 2 ; see Section 2) and build candidates in a recursive manner. If there was no margin violation at t−1, then S t is constructed using a standard beam search update. If there was a margin violation, S t is con- structed as the K best sequences assuming the gold history y 1:t−1 through time-step t−1.Formally, assume the function succ maps a se- quence w 1:t−1 ∈ V t−1 to the set of all valid se- quences of length t that can be formed by appending to it a valid word w ∈ V. In the simplest, uncon- strained case, we will have  1:t formed in training with a beam of size K = 3 and with gold sequence y 1:6 = "a red dog runs quickly today". The gold sequence is high- lighted in yellow, and the predicted prefixes involved in margin violations (at t = 4 and t = 6) are in gray. Note that time-step T = 6 uses a different loss criterion. Bot- tom: prefixes that actually participate in the loss, ar- ranged to illustrate the back-propagation process. succ(w 1:t−1 ) = {w 1:t−1 , w | w ∈ V}.As an important aside, note that for some prob- lems it may be preferable to define a succ func- tion which imposes hard constraints on successor sequences. For instance, if we would like to use seq2seq models for parsing (by emitting a con- stituency or dependency structure encoded into a se- quence in some way), we will have hard constraints on the sequences the model can output, namely, that they represent valid parses. While hard constraints such as these would be difficult to add to standard seq2seq at training time, in our framework they can naturally be added to the succ function, allowing us to train with hard constraints; we experiment along these lines in Section 5.3, where we refer to a model trained with constrained beam search as ConBSO.Having defined an appropriate succ function, we specify the candidate set as:Once we have collected margin violations we can run backpropagation to compute parameter updates. Assume a margin violation occurs at time-step t be- tween the predicted historyˆyhistoryˆ historyˆy 1:t and the gold his- tory y 1:t . As in standard seq2seq training we must back-propagate this error through the gold history; however, unlike seq2seq we also have a gradient for the wrongly predicted history.Recall that to back-propagate errors through an RNN we run a recursive backward procedure - denoted below by BRNN -at each time-step t, which accumulates the gradients of next-step and fu- ture losses with respect to h t . We have:where we have a margin violation at t−1 iff, and where topK considers the scores given by f . This search procedure is illustrated in the top portion of Figure 1.In the forward pass of our training algorithm, shown as the first part of Algorithm 1, we run this version of beam search and collect all sequences and their hidden states that lead to losses. 2 We found that training with early-update rather than (de- layed) LaSO did not work well, even after pre-training. Given the success of early-update in many NLP tasks this was some- what surprising. We leave this question to future work. where L t+1 is the loss at step t + 1, deriving, for instance, from the score f (y t+1 , h t ). Running this BRNN procedure from t = T − 1 to t = 0 is known as back-propagation through time (BPTT).In determining the total computational cost of back-propagation here, first note that in the worst case there is one violation at each time-step, which leads to T independent, incorrect sequences. Since we need to call BRNN O(T ) times for each se- quence, a naive strategy of running BPTT for each incorrect sequence would lead to an O(T 2 ) back- ward pass, rather than the O(T ) time required for the standard seq2seq approach.Fortunately, our combination of search-strategy and loss make it possible to efficiently share BRNN operations. This shared structure comes naturally from the LaSO update, which resets the beam in a convenient way.We informally illustrate the process in Figure 1. The top of the diagram shows a possible sequence ofˆyofˆ ofˆy r ← 0; violations ← {0}1:t formed during search with a beam of size 3 for the target sequence y = "a red dog runs quickly today." When the gold sequence falls off the beam at t = 4, search resumes with S 5 = succ(y 1:4 ), and so all subsequent predicted sequences have y 1:4 as a prefix and are thus functions of h 4 . Moreover, be- cause our loss function only involves the scores of the gold prefix and the violating prefix, we end up with the relatively simple computation tree shown at the bottom of Figure 1. It is evident that we can backpropagate in a single pass, accumulating gradi- ents from sequences that diverge from the gold at the time-step that precedes their divergence. The second half of Algorithm 1 shows this explicitly for a single sequence, though it is straightforward to extend the algorithm to operate in batch. 3 for t = 1, . . . , T do 6:1:t =y 1:tif f (y t , h t−1 ) &lt; f (ˆ y S t+1 ← topK(succ(y 1:t ))else 14: if t − 1 ∈ violations then 5 Data and Methodsgrad h t ← grad h t + grad h t 22:We run experiments on three different tasks, com- paring our approach to the seq2seq baseline, and to other relevant baselines.While the method we describe applies to seq2seq RNNs in general, for all experiments we use the global attention model of Luong et al. (2015) -which consists of an LSTM (Hochreiter and Schmidhuber, 1997) encoder and an LSTM decoder with a global attention model -as both the base- line seq2seq model (i.e., as the model that computes the g in Section 3) and as the model that computes our sequence-scores f (w t , h t−1 , x). As in Luong et al. (2015), we also use "input feeding," which involves feeding the attention distribution from the previous time-step into the decoder at the current step. This model architecture has been found to be highly performant for neural machine translation and other seq2seq tasks.To distinguish the models we refer to our system as BSO (beam search optimization) and to the base- line as seq2seq. When we apply constrained training (as discussed in Section 4.2), we refer to the model as ConBSO. In providing results we also distinguish between the beam size K tr with which the model is trained, and the beam size K te which is used at test-time. In general, if we plan on evaluating with a beam of size K te it makes sense to train with a beam of size K tr = K te + 1, since our objective requires the gold sequence to be scored higher than the last sequence on the beam.tion 3. The necessity of pre-training in this instance is consistent with the findings of other authors who train non-local neural models (Kingsbury, 2009;Sak et al., 2014;Andor et al., 2016;Ranzato et al., 2016). 5 Similarly, it is clear that the smaller the beam used in training is, the less room the model has to make erroneous predictions without running afoul of the margin loss. Accordingly, we also found it use- ful to use a "curriculum beam" strategy in training, whereby the size of the beam is increased gradually during training. In particular, given a desired train- ing beam size K tr , we began training with a beam of size 2, and increased it by 1 every 2 epochs until reaching K tr .Finally, it has been established that dropout (Srivastava et al., 2014) regularization improves the per- formance of LSTMs (Pham et al., 2014;Zaremba et al., 2014), and in our experiments we run beam search under dropout. 6 For all experiments, we trained both seq2seq and BSO models with mini-batch Adagrad ( Duchi et al., 2011) (using batches of size 64), and we renormal- ized all gradients so they did not exceed 5 before updating parameters. We did not extensively tune learning-rates, but we found initial rates of 0.02 for the encoder and decoder LSTMs, and a rate of 0.1 or 0.2 for the final linear layer (i.e., the layer tasked with making word-predictions at each time- step) to work well across all the tasks we consid- ered. Code implementing the experiments described below can be found at https://github.com/ harvardnlp/BSO. 7 ferent problems: word ordering, dependency pars- ing, and machine translation. While we do not in- clude all the features and extensions necessary to reach state-of-the-art performance, even the baseline seq2seq model is generally quite performant.Our experiments are primarily intended to evaluate the effectiveness of beam search optimization over standard seq2seq training. As such, we run exper- iments with the same model across three very dif-Word Ordering The task of correctly ordering the words in a shuffled sentence has recently gained some attention as a way to test the (syntactic) capa- bilities of text-generation systems ( Zhang and Clark, 2011;Zhang and Clark, 2015;Liu et al., 2015;Schmaltz et al., 2016). We cast this task as seq2seq problem by viewing a shuffled sentence as a source sentence, and the correctly ordered sentence as the target. While word ordering is a somewhat synthetic task, it has two interesting properties for our pur- poses. First, it is a task which plausibly requires search (due to the exponentially many possible or- derings), and, second, there is a clear hard constraint on output sequences, namely, that they be a permu- tation of the source sequence. For both the baseline and BSO models we enforce this constraint at test- time. However, we also experiment with constrain- ing the BSO model during training, as described in Section 4.2, by defining the succ function to only al- low successor sequences containing un-used words in the source sentence.For experiments, we use the same PTB dataset (with the standard training, development, and test splits) and evaluation procedure as in Zhang and Clark (2015) and later work, with performance re- ported in terms of BLEU score with the correctly or- dered sentences. For all word-ordering experiments we use 2-layer encoder and decoder LSTMs, each with 256 hidden units, and dropout with a rate of 0.2 between LSTM layers. We use simple 0/1 costs in defining the ∆ function.We show our test-set results in Table 1. We see that on this task there is a large improvement at each beam size from switching to BSO, and a further im- provement from using the constrained model.Inspired by a similar analysis in Daumé III and Marcu (2005), we further examine the relationship between K tr and K te when training with ConBSO in Table 2. We see that larger K tr hurt greedy in- ference, but that results continue to improve, at least initially, when using a K te that is (somewhat) bigger than K tr − 1.   We next apply our model to dependency parsing, which also has hard con- straints and plausibly benefits from search. We treat dependency parsing with arc-standard transi- tions as a seq2seq task by attempting to map from a source sentence to a target sequence of source sentence words interleaved with the arc-standard, reduce-actions in its parse. For example, we attempt to map the source sentence But it was the Quotron problems that ... and dropout with a rate of 0.3 between LSTM lay- ers. We replace singleton words in the training set with an UNK token, normalize digits to a single symbol, and initialize word embeddings for both source and target words from the publicly available word2vec ( Mikolov et al., 2013) embeddings. We use simple 0/1 costs in defining the ∆ function. As in the word-ordering case, we also experiment with modifying the succ function in order to train under hard constraints, namely, that the emitted tar- get sequence be a valid parse. In particular, we con- strain the output at each time-step to obey the stack constraint, and we ensure words in the source are emitted in order.We show results on the test-set in Table 3. BSO and ConBSO both show significant improvements over seq2seq, with ConBSO improving most on UAS, and BSO improving most on LAS. We achieve a reasonable final score of 91.57 UAS, which lags behind the state-of-the-art, but is promising for a general-purpose, word-only model. to the target sequence But it was @L SBJ @L DEP the Quotron problems @L NMOD @L NMOD that ...We use the standard Penn Treebank dataset splits with Stanford dependency labels, and the standard UAS/LAS evaluation metric (excluding punctua- tion) following Chen and Manning (2014). All models thus see only the words in the source and, when decoding, the actions it has emitted so far; no other features are used. We use 2-layer encoder and decoder LSTMs with 300 hidden units per layer Translation We finally evaluate our model on a small machine translation dataset, which allows us to experiment with a cost function that is not 0/1, and to consider other baselines that attempt to mit- igate exposure bias in the seq2seq setting. We use the dataset from the work of Ranzato et al. (2016), which uses data from the German-to-English por- tion of the IWSLT 2014 machine translation eval- uation campaign ( Cettolo et al., 2014  Table 5: BLEU scores obtained on the machine trans- lation development data when training with ∆(ˆ y  Table 4: Machine translation experiments on test set; re- sults below middle line are from MIXER model of Ranzato et al. (2016). SB-∆ indicates sentence BLEU costs are used in defining ∆. XENT is similar to our seq2seq model but with a convolutional encoder and simpler at- tention. DAD trains seq2seq with scheduled sampling ( . BSO, SB-∆ experiments above have K tr = 6. r+1:t , y r+1:t ) (bottom), and K tr = 6. al. (2016), and like them we also use a single-layer LSTM decoder with 256 units. We also use dropout with a rate of 0.2 between each LSTM layer. We em- phasize, however, that while our decoder LSTM is of the same size as that of Ranzato et al. (2016), our re- sults are not directly comparable, because we use an LSTM encoder (rather than a convolutional encoder as they do), a slightly different attention mechanism, and input feeding ( Luong et al., 2015).Timing Given Algorithm 1, we would expect training time to increase linearly with the size of the beam. On the above MT task, our highly tuned seq2seq baseline processes an average of 13,038 to- kens/second (including both source and target to- kens) on a GTX 970 GPU. For beams of size K tr = 2, 3, 4, 5, and 6, our implementation processes on average 1,985, 1,768, 1,709, 1,521, and 1,458 to- kens/second, respectively. Thus, we appear to pay an initial constant factor of ≈ 3.3 due to the more complicated forward and backward passes, and then training scales with the size of the beam. Because we batch beam predictions on a GPU, however, we find that in practice training time scales sub-linearly with the beam-size.For our main MT results, we set ∆(ˆ y (k) 1:t ) to 1 − SB(ˆ y (K) r+1:t , y r+1:t ), where r is the last margin violation and SB denotes smoothed, sentence-level BLEU (Chen and Cherry, 2014). This setting of ∆ should act to penalize erroneous predictions with a relatively low sentence-level BLEU score more than those with a relatively high sentence-level BLEU score. In Table 4 we show our final results and those from Ranzato et al. (2016). 8 While we start with an improved baseline, we see similarly large increases in accuracy as those obtained by DAD and MIXER, in particular when K te &gt; 1.We have introduced a variant of seq2seq and an as- sociated beam search training scheme, which ad- dresses exposure bias as well as label bias, and moreover allows for both training with sequence- level cost functions as well as with hard constraints. Future work will examine scaling this approach to much larger datasets.
