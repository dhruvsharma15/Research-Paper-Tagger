Recent years have witnessed tremendous success of deep neural networks (DNNs), especially the kind of bottom-up neural networks trained for discriminative tasks. In particu- lar, Convolutional Neural Networks (CNNs) have achieved impressive accuracy on the challenging ImageNet classifi- cation benchmark [30,56,57,21,52]. Interestingly, it has been shown that CNNs trained on ImageNet for classifica- tion can learn representations that are transferable to other tasks [55], and even to other modalities [20]. However, bottom-up discriminative models are focused on learning useful representations from data, being incapable of captur- ing the data distribution.Learning top-down generative models that can explain complex data distribution is a long-standing problem in ma- chine learning research. The expressive power of deep neu- ral networks makes them natural candidates for generative models, and several recent works have shown promising re- sults [28,17,44,36,68,38,9]. While state-of-the-art DNNs can rival human performance in certain discriminative tasks, current best deep generative models still fail when there are large variations in the data distribution.A natural question therefore arises: can we leverage the hierarchical representations in a discriminatively trained model to help the learning of top-down generative models? In this paper, we propose a generative model named Stacked Generative Adversarial Networks (SGAN). Our model con- sists of a top-down stack of GANs, each trained to gener- ate "plausible" lower-level representations conditioned on higher-level representations. Similar to the image discrimi- nator in the original GAN model which is trained to distin- guish "fake" images from "real" ones, we introduce a set of representation discriminators that are trained to distinguish "fake" representations from "real" representations. The ad- versarial loss introduced by the representation discrimina- tor forces the intermediate representations of the SGAN to lie on the manifold of the bottom-up DNN's representa- tion space. In addition to the adversarial loss, we also in- troduce a conditional loss that imposes each generator to use the higher-level conditional information, and a novel entropy loss that encourages each generator to generate di- verse representations. By stacking several GANs in a top- down way and using the top-most GAN to receive labels and the bottom-most GAN to generate images, SGAN can be trained to model the data distribution conditioned on class labels. Through extensive experiments, we demonstrate that our SGAN is able to generate images of much higher quality than a vanilla GAN. In particular, our model obtains state- of-the-art Inception scores on CIFAR-10 dataset.Deep Generative Image Models. There has been a large body of work on generative image modeling with deep learning. Some early efforts include Restricted Boltzmann Machines [22] and Deep Belief Networks [23]. More recently, several successful paradigms of deep generative models have emerged, including the auto-regressive models [32,16,58,44,45,19], Variational Auto-encoders (VAEs) [28,27,50,64,18], and Generative Adversarial Networks (GANs) [17,5,47,49,53,33]. Our work builds upon the GAN framework, which employs a generator that trans- forms a noise vector into an image and a discriminator that distinguishes between real and generated images.However, due to the vast variations in image content, it is still challenging for GANs to generate diverse images with sufficient details. To this end, several works have attempted to factorize a GAN into a series of GANs, decomposing the difficult task into several more tractable sub-tasks. Den- ton et al. [5] propose a LAPGAN model that factorizes the generative process into multi-resolution GANs, with each GAN generating a higher-resolution residual conditioned on a lower-resolution image. Although both LAPGAN and SGAN consist of a sequence of GANs each working at one scale, LAPGAN focuses on generating multi-resolution im- ages from coarse to fine while our SGAN aims at mod- eling multi-level representations from abstract to specific. Wang and Gupta [62] propose a S 2 -GAN, using one GAN to generate surface normals and another GAN to generate images conditioned on surface normals. Surface normals can be viewed as a specific type of image representations, capturing the underlying 3D structure of an indoor scene. On the other hand, our framework can leverage the more general and powerful multi-level representations in a pre- trained discriminative DNN.There are several works that use a pre-trained discrimi- native model to aid the training of a generator. [31,7] add a regularization term that encourages the reconstructed im- age to be similar to the original image in the feature space of a discriminative network. [59,26] use an additional "style loss" based on Gram matrices of feature activations. Dif- ferent from our method, all the works above only add loss terms to regularize the generator's output, without regular- izing its internal representations. and does not require any information from the encoder once training completes. Another important difference is that we use adversarial loss instead of L2 reconstruction loss to match intermediate representations.Visualizing Deep Representations. Our work is also re- lated to the recent efforts in visualizing the internal repre- sentations of DNNs. One popular approach uses gradient- based optimization to find an image whose representation is close to the one we want to visualize [37]. Other ap- proaches, such as [8], train a top-down deconvolutional net- work to reconstruct the input image from a feature repre- sentation by minimizing the Euclidean reconstruction er- ror in image space. However, there is inherent uncertainty in the reconstruction process, since the representations in higher layers of the DNN are trained to be invariant to irrel- evant transformations and to ignore low-level details. With Euclidean training objective, the deconvolutional network tends to produce blurry images. To alleviate this problem, Dosovitskiy abd Brox [7] further propose a feature loss and an adversarial loss that enables much sharper reconstruc- tions. However, it still does not tackle the problem of un- certainty in reconstruction. Given a high-level feature rep- resentation, the deconvolutional network deterministically generates a single image, despite the fact that there exist many images having the same representation. Also, there is no obvious way to sample images because the feature prior distribution is unknown. Concurrent to our work, Nguyen et al. [42] incorporate the feature prior with a variant of de- noising auto-encoder (DAE). Their sampling relies on an iterative optimization procedure, while we are focused on efficient feed-forward sampling.In this section we introduce our model architecture. In Sec. 3.1 we briefly overview the framework of Generative Adversarial Networks. We then describe our proposal for Stacked Generative Adversarial Networks in Sec. 3.2. In Sect. 3.3 and 3.4 we will focus on our two novel loss func- tions, conditional loss and entropy loss, respectively.DNNs. There have been some works that attempt to "match" the intermediate representations between two DNNs. [51,20] use the intermediate representations of one pre-trained DNN to guide another DNN in the context of knowledge transfer. Our method can be considered as a spe- cial kind of knowledge transfer. However, we aim at trans- ferring the knowledge in a bottom-up DNN to a top-down generative model, instead of another bottom-up DNN. Also, some auto-encoder architectures employ layer-wise recon- struction loss [60,48,67,66]. The layer-wise loss is usually accompanied by lateral connections from the encoder to the decodery. On the other hand, SGAN is a generative modelAs shown in Fig. 1 (a), the original GAN [17] is trained using a two-player min-max game: a discriminator D trained to distinguish generated images from real images, and a generator G trained to fool D. The discriminator loss L D and the generator loss L G are defined as follows:In practice, D and G are usually updated alternately. The training process matches the generated image distribution  P G (x) with the real image distribution P data (x) in the train- ing set. In other words, The adversarial training forces G to generate images that reside on the natural images manifold.is the input image. Note that in our formulation, each E i can contain multiple layers and the way of grouping layers together into E i is determined by us. The number of stacks N is therefore less than the number of layers in E and is also determined by us.Pre-trained Encoder. We first consider a bottom-up DNN pre-trained for classification, which is referred to as the en- coder E throughout. We define a stack of bottom-up de- terministic nonlinear mappings: Stacked Generators. Provided with a pre-trained encoder E, our goal is to train a top-down generator G that inverts E. Specifically, G consists of a top-down stack of gener- ators G i , each trained to invert a bottom-up mapping E i . Each G i takes in a higher-level feature and a noise vector as inputs, and outputs the lower-level featurê h i . We first train each GAN independently and then train them jointly in an end-to-end manner, as shown in Fig. 1. Each gener- ator receives conditional input from encoders in the inde- pendent training stage, and from the upper generators in the joint training stage. In other words,The loss equations shown in this section are for in- dependent training stage but can be easily modified to joint training by replacing h i+1 withˆhwithˆ withˆh i+1 .Intuitively, the total variations of images could be de- composed into multiple levels, with higher-level semantic variations (e.g., attributes, object categories, rough shapes) and lower-level variations (e.g., detailed contours and tex- tures, background clutters). Our model allows using differ- ent noise variables to represent different levels of variations.The training procedure is shown in Fig. 1 (b). Each gen- erator G i is trained with a linear combination of three loss terms: adversarial loss, conditional loss, and entropy loss.is modeled by a generator G i . From an information-theoretic perspective, SGAN factorizes the total entropy of the image distribution H(x) into multiple (smaller) conditional entropy terms:, thereby decomposing one difficult task into multiple easier tasks.whereGi denote adversarial loss, condi- tional loss, and entropy loss respectively. λ 1 , λ 2 , λ 3 are the weights associated with different loss terms. In practice, we find it sufficient to set the weights such that the magnitude of different terms are of similar scales. In this subsection we first introduce the adversarial loss L At each stack, a generator G i is trained to capture the distribution of lower-level representationsˆhrepresentationsˆ representationsˆh i , conditioned on higher-level representations h i+1 . However, in the above formulation, the generator might choose to ignore h i+1 , and generate plausiblê h i from scratch. Some previous works [40,15,5] tackle this problem by feeding the conditional in- formation to both the generator and discriminator. This ap- proach, however, might introduce unnecessary complexity to the discriminator and increase model instability [46,54].Here we adopt a different approach: we regularize the generator by adding a loss term Lthat distinguishes generated representa- tionsˆhtionsˆ tionsˆh i , from "real" representations h i . Specifically, the discriminator D i is trained with the loss function: named conditional loss. We feed the generated lower-level representationsˆh representationsˆ representationsˆh i = G i (h i+1 , z i ) back to the encoder E, and compute the recovered higher-level representations. We then enforce the recovered representations to be similar to the conditional representations. Formally:where f is a distance measure. We define f to be the Eu- clidean distance for intermediate representations and cross- entropy for labels. Our conditional loss L is similar to the "feature loss" used by [7] and the "FCN loss" in [62].And G i is trained to "fool" the representation discrimi- nator D i , with the adversarial loss defined by:(5) During joint training, the adversarial loss provided by representational discriminators can also be regarded as a type of deep supervision [35], providing intermediate super- vision signals. In our current formulation, E is a discrim- inative model, and G is a generative model conditioned on labels. However, it is also possible to train SGAN without using label information: E can be trained with an unsu- pervised objective and G can be cast into an unconditional generative model by removing the label input from the top generator. We leave this for future exploration.Sampling. To sample images, all G i s are stacked to- gether in a top-down manner, as shown in Fig. 1 (c). Our SGAN is capable of modeling the data distribution con- ditioned on the class label:leads to an- other issue: the generator G i learns to ignore the noise z i , and computê h i deterministically from h i+1 . This prob- lem has been encountered in various applications of condi- tional GANs, e.g., synthesizing future frames conditioned on previous frames [39], generating images conditioned on label maps [25], and most related to our work, synthesizing images conditioned on feature representations [7]. All the above works attempted to generate diverse images/videos by feeding noise to the generator, but failed because the con- ditional generator simply ignores the noise. To our knowl- edge, there is still no principled way to deal with this issue. It might be tempting to think that minibatch discrimination [53], which encourages sample diversity in each minibatch, could solve this problem. However, even if the genera- tor generatesˆhgeneratesˆ generatesˆh i deterministically from h i+1 , the generated samples in each minibatch are still diverse since generators are conditioned on different h i+1 . Thus, there is no ob- vious way minibatch discrimination could penalize a col- lapsed conditional generator.Variational Conditional Entropy Maximization. To tackle this problem, we would like to encourage the gener- ated representationˆhrepresentationˆ representationˆh i to be sufficiently diverse when con- ditioned on h i+1 , i.e., the conditional entropy H( ˆ h i |h i+1 ) should be as high as possible. Since directly maximiz- ing H( ˆ h i |h i+1 ) is intractable, we propose to maximize in- stead a variational lower bound on the conditional entropy. Specifically, we use an auxiliary distribution Q i (z i | ˆ h i ) to approximate the true posterior P i (z i | ˆ h i ), and augment the training objective with a loss term named entropy loss: images back to latent space to perform unsupervised feature learning. Independent of our work, [4] proposes to reg- ularize EBGAN [68] with entropy maximization in order to prevent the discriminator from degenerating to uniform prediction. Our entropy loss is motivated from generating multiple possible outputs from the same conditional input.In this section, we perform experiments on a vari- ety of datasets including MNIST [34], SVHN [41], and CIFAR-10 [29]. Code and pre-trained models are available at: https://github.com/xunhuang1995/SGAN. Readers may refer to our code repository for more details about experimental setup, hyper-parameters, etc.Below we give a proof that minimizing L ent Gi is equivalent to maximizing a variational lower bound for H( ˆ h i |h i+1 ).Encoder: For all datasets we use a small CNN with two convolutional layers as our encoder: conv1-pool1-conv2-pool2-fc3-fc4, where fc3 is a fully connected layer and fc4 outputs clas- sification scores before softmax.On CIFAR-10 we apply horizontal flipping to train the encoder. No data augmentation is used on other datasets.Generator: We use generators with two stacks through- out our experiments. Note that our framework is generally applicable to the setting with multiple stacks, and we hy- pothesize that using more stacks would be helpful for large- scale and high-resolution datasets. For all datasets, our top GAN G 1 generates fc3 features from some random noise z 1 , conditioned on label y. The bottom GAN G 0 generates images from some noise z 0 , conditioned on fc3 features generated from GAN G 1 . We set the loss coefficient pa- rameters λ 1 = λ 2 = 1 and λ 3 = 10.In practice, we parameterize Q i with a deep network that predicts the posterior distribution of z i givenˆhgivenˆ givenˆh i . Q i shares most of the parameters with D i . We treat the posterior as a diagonal Gaussian with fixed standard deviations, and use the network Q i to only predict the posterior mean, making L We thoroughly evaluate SGAN on three widely adopted datasets: MNIST [34], SVHN [41], and CIFAR-10 [29]. The details of each dataset is described in the following.The MNIST dataset contains 70, 000 labeled im- ages of hand-written digits with 60, 000 in the training set and 10, 000 in the test set. Each image is sized by 28 × 28. ent Gi equivalent to the Euclidean reconstruction error. In each iteration we update both G i and Q i to minimize L ent Gi . Our method is similar to the variational mutual informa- tion maximization technique proposed by Chen et al. [2].A key difference is that [2] uses the Q-network to predict only a small set of deliberately constructed "latent code", while our Q i tries to predict all the noise variables z i in each stack. The loss used in [2] therefore maximizes the mutual information between the output and the latent code, while ours maximizes the entropy of the outputˆhoutputˆ outputˆh i , condi- tioned on h i+1 . [6,10] also train a separate network to map SVHN: The SVHN dataset is composed of real-world color images of house numbers collected by Google Street View [41]. Each image is of size 32×32 and the task is to classify the digit at the center of the image. The dataset contains 73, 257 training images and 26, 032 test images.CIFAR-10: The CIFAR-10 dataset consists of colored nat- ural scene images sized at 32 × 32 pixels. There are 50,000 training images and 10,000 test images in 10 classes.  In Fig. 2 (a), we show MNIST samples generated by SGAN. Each row corresponds to samples conditioned on a given digit class label. SGAN is able to generate diverse images with different characteristics. The samples are vi- sually indistinguishable from real MNIST images shown in Fig. 2 (b), but still have differences compared with corre- sponding nearest neighbor training images.We further examine the effect of entropy loss. In Fig. 2  (c) we show the samples generated by bottom GAN when conditioned on a fixed fc3 feature generated by the top GAN. The samples (per row) have sufficient low-level vari- ations, which reassures that bottom GAN learns to gener- ate images without ignoring the noise z 0 . In contrast, in Fig. 2 (d), we show samples generated without using en- tropy loss for bottom generator, where we observe that the bottom GAN ignores the noise and instead deterministically generates images from fc3 features.An advantage of SGAN compared with a vanilla GAN is its interpretability: it decomposes the total variations of an image into different levels. For example, in MNIST it de- composes the variations into y that represents the high-level digit label, z 1 that captures the mid-level coarse pose of the digit and z 0 that represents the low-level spatial details. The samples generated on SVHN and CIFAR-10 datasets can be seen in Fig. 3 and Fig. 4, respectively. Pro- vided with the same fc3 feature, we see in each row of panel (c) that SGAN is able to generate samples with simi- lar coarse outline but different lighting conditions and back- ground clutters. Also, the nearest neighbor images in the training set indicate that SGAN is not simply memorizing training data, but can truly generate novel images.Here, we compare SGAN with other state-of-the-art gen- erative models on CIFAR-10 dataset. The visual quality of generated images is measured by the widely used metric, Inception score [53]. Following [53], we sample 50, 000 images from our model and use the code provided by [53] Method Score Infusion training [1] 4.62 ± 0.06   to compute the score. As shown in Tab. 1, SGAN ob- tains a score of 8.59 ± 0.12, outperforming AC-GAN [43] (8.25 ± 0.07) and Improved GAN [53] (8.09 ± 0.07). Also, note that the 5 techniques introduced in [53] are not used in our implementations. Incorporating these techniques might further boost the performance of our model. In Sec. 4.2 we have examined the effect of entropy loss. In order to further understand the effect of different model components, we conduct extensive ablation studies by eval- uating several baseline methods on CIFAR-10 dataset. If not mentioned otherwise, all models below use the same training hyper-parameters as the full SGAN model. To further verify the effectiveness of SGAN, we conduct human visual Turing test in which we ask AMT workers to distinguish between real images and images generated by our networks. We exactly follow the interface used in Improved GAN [53], in which the workers are given 9 im- ages at each time and can receive feedback about whether their answers are correct. With 9, 000 votes for each eval- uated model, our AMT workers got 24.4% error rate for samples from SGAN and 15.6% for samples from DC-. This further confirms that our stacked design can significantly improve the image quality over GAN without stacking.: This is a single GAN model with the same architecture as the bottom GAN in SGAN, except that the generator is conditioned on labels instead of fc3 features. Note that other tech- niques proposed in this paper, including conditional loss L cond and entropy loss L ent , are still employed. We also tried to use the full generator G in SGAN as the baseline, instead of only the bottom generator G 0 . However, we failed to make it converge, possibly be- cause G is too deep to be trained without intermediate supervision from representation discriminators. 1) SGAN obtains slightly higher Inception score than SGAN-no-joint. Yet SGAN-no-joint also generates very high quality samples and outperforms all previ- ous methods in terms of Inception scores.2) SGAN, either with or without joint training, achieves significantly higher Inception score and better sample quality than the baseline DCGANs. This demonstrates the effectiveness of the proposed stacked approach. 3) As shown in Fig. 5 (d), DCGAN (L adv + L cond ) col- lapses to generating a single image per category, while adding the entropy loss enables it to generate diverse images (Fig. 5 (c)). This further demonstrates that en- tropy loss is effective at improving output diversity.4) The single DCGAN (L adv + L cond + L ent ) model ob- tains higher Inception score than the conditional DC- GAN reported in [61]. This suggests that L cond +L ent might offer some advantages compared to a plain con- ditional DCGAN, even without stacking.5) In general, Inception score [53] correlates well with visual quality of images. However, it seems to be in- sensitive to diversity issues . For example, it gives the same score to Fig. 5 (d) and (e) while (d) has clearly collapsed. This is consistent with results in [43,61]. This paper introduces a top-down generative framework named SGAN, which effectively leverages the representa- tional information from a pre-trained discriminative net- work. Our approach decomposes the hard problem of es- timating image distribution into multiple relatively easier tasks -each generating plausible representations condi- tioned on higher-level representations. The key idea is to use representation discriminators at different training hi- erarchies to provide intermediate supervision. We also propose a novel entropy loss to tackle the problem that conditional GANs tend to ignore the noise. Our entropy loss could be employed in other applications of conditional GANs, e.g., synthesizing different future frames given the same past frames [39], or generating a diverse set of images conditioned on the same label map [25]. We believe this is an interesting research direction in the future. 
