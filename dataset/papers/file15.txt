Learning goal-directed behavior with sparse feedback from complex environments is a fundamental challenge for artificial intelligence. Learning in this setting requires the agent to represent knowledge at multiple levels of spatio-temporal abstractions and to explore the environment efficiently. Recently, non-linear function approximators coupled with reinforcement learning [21,28,37] have made it possible to learn abstractions over high- dimensional state spaces, but the task of exploration with sparse feedback still remains a major challenge. Existing methods like Boltzmann exploration and Thomson sampling [45,32] offer significant improvements over but are limited due to the underlying models functioning at the level of basic actions. In this work, we propose a framework that integrates deep reinforcement learning with hierarchical value functions (h-DQN), where the agent is motivated to solve intrinsic goals (via learning options) to aid exploration. These goals provide for efficient exploration and help mitigate the sparse feedback problem. Additionally, we observe that goals defined in the space of entities and relations can help significantly constrain the exploration space for data-efficient learning in complex environments.Reinforcement learning (RL) formalizes control problems as finding a policy π that maximizes expected future rewards [46]. Value functions V (s) are central to RL, and they cache the utility of any state s in achieving the agent's overall objective. Recently, value functions have also been generalized as V (s, g) in order to represent the utility of state s for achieving a given goal g ∈ G [47,34]. When the environment provides delayed rewards, we adopt a strategy to first learn ways to achieve intrinsically generated goals, and subsequently learn an optimal policy to chain them together. Each of the value functions V (s, g) can be used to generate a policy that terminates when the agent reaches the goal state g. A collection of these policies can be hierarchically arranged with temporal dynamics for learning or planning within the framework of semi-Markov decision processes [48,49]. In high-dimensional problems, these value functions can be approximated by neural networks as V (s, g; θ).We propose a framework with hierarchically organized deep reinforcement learning modules working at different time-scales. The model takes decisions over two levels of hierarchy - (a) the top level module (meta-controller ) takes in the state and picks a new goal, (b) the lower-level module (controller ) uses both the state and the chosen goal to select actions either until the goal is reached or the episode is terminated. The meta-controller then chooses another goal and steps (a-b) repeat. We train our model using stochastic gradient descent at different temporal scales to optimize expected future intrinsic (controller ) and extrinsic rewards (meta-controller ). We demonstrate the strength of our approach on problems with long-range delayed feedback: (1) a discrete stochastic decision process with a long chain of states before receiving optimal extrinsic rewards and (2) a classic ATARI game ('Montezuma's Revenge') with even longer-range delayed rewards where most existing state-of-art deep reinforcement learning approaches fail to learn policies in a data-efficient manner.Learning and operating over different levels of temporal abstraction is a key challenge in tasks involving long-range planning. In the context of reinforcement learning [1], Sutton et al. [48] proposed the options framework, which involves abstractions over the space of actions. At each step, the agent chooses either a one-step "primitive" action or a "multi-step" action policy (option). Each option defines a policy over actions (either primitive or other options) and can be terminated according to a stochastic function β. Thus, the traditional MDP setting can be extended to a semi-Markov decision process (SMDP) with the use of options. Recently, several methods have been proposed to learn options in real-time by using varying reward functions [49] or by composing existing options [42]. Value functions have also been generalized to consider goals along with states [34]. This universal value function V (s, g; θ) provides an universal option that approximately represents optimal behavior towards the goal g. Our work is inspired by these papers and builds upon them.There has also been a lot of work on option discovery in the tabular value function setting [26,38,25,27]. In more recent work, Machado et al. [24] presented an option discovery algorithm where the agent is encouraged to explore regions that were previously out of reach. However, option discovery where non-linear state approximations are required is still an open problem.Other related work for hierarchical formulations include the model of Dayan and Hinton [6] which consisted of "managers" taking decisions at various levels of granularity, percolating all the way down to atomic actions made by the agent. The MAXQ framework [7] built up on this work to decompose the value function of an MDP into combinations of value functions of smaller constituent MDPs, as did Guestrin et al. [17] in their factored MDP formulation. Hernandez-Gardiol and Mahadevan [19] combined hierarchical RL with a variable length short-term memory of high-level decisions.In our work, we propose a scheme for temporal abstraction that involves simultaneously learning options and a control policy to compose options in a deep reinforcement learning setting. Our approach does not use separate Q-functions for each option, but instead treats the option as part of the input, similar to [34]. This has two advantages: (1) there is shared learning between different options, and (2) the model is potentially scalable to a large number of options.The nature and origin of 'good' intrinsic reward functions is an open question in reinforcement learning. Singh et al.[41] explored agents with intrinsic reward structures in order to learn generic options that can apply to a wide variety of tasks. Using a notion of "salient events" as sub-goals, the agent learns options to get to such events. In another paper, Singh et al. [40] take an evolutionary perspective to optimize over the space of reward functions for the agent, leading to a notion of extrinsically and intrinsically motivated behavior. In the context of hierarchical RL, Goel and Huber [13] discuss a framework for subgoal discovery using the structural aspects of a learned policy model. S ¸im¸sek¸im¸sek et al. [38] provide a graph partioning approach to subgoal identification.Schmidhuber [36] provides a coherent formulation of intrinsic motivation, which is measured by the improvements to a predictive world model made by the learning algorithm. Mohamed and Rezende [29] have recently proposed a notion of intrinsically motivated learning within the framework of mutual information maximization. Frank et al. [11] demonstrate the effectiveness of artificial curiosity using information gain maximization in a humanoid robot.Object-based representations [8,4] that can exploit the underlying structure of a problem have been proposed to alleviate the curse of dimensionality in RL. Diuk et al. [8] propose an Object-Oriented MDP, using a representation based on objects and their interactions. Defining each state as a set of value assignments to all possible relations between objects, they introduce an algorithm for solving deterministic object-oriented MDPs. Their representation is similar to that of Guestrin et al. [16], who describe an object-based representation in the context of planning. In contrast to these approaches, our representation does not require explicit encoding for the relations between objects and can be used in stochastic domains.Recent advances in function approximation with deep neural networks have shown promise in handling high-dimensional sensory input. Deep Q-Networks and its variants have been successfully applied to various domains including Atari games [28] and Go [37], but still perform poorly on environments with sparse, delayed reward signals. Strategies such as prioritized experience replay [35] and bootstrapping [32] have been proposed to alleviate the problem of learning from sparse rewards. These approaches yield significant improvements over prior work but struggle when the reward signal has a long delayed horizon. This is because the exploration strategy is not sufficient for the agent to obtain the required feedback.The nature and origin of intrinsic goals in humans is a thorny issue but there are some notable insights from existing literature. There is converging evidence in developmental psychology that human infants, primates, children, and adults in diverse cultures base their core knowledge on certain cognitive systems including -entities, agents and their actions, numerical quantities, space, social-structures and intuitive theories [43,23]. Even newborns and infants seem to represent the visual world in terms of coherent visual entities, centered around spatio-temporal principles of cohesion, continuity, and contact. They also seem to explicitly represent other agents, with the assumption that an agent's behavior is goal-directed and efficient. Infants can also discriminate relative sizes of objects, relative distances and higher order numerical relations such as the ratio of object sizes. During curiosity-driven activities, toddlers use this knowledge to generate intrinsic goals such as building physically stable block structures. In order to accomplish these goals, toddlers seem to construct sub-goals in the space of their core knowledge, such as -putting a heavier entity on top of (relation) a lighter entity in order to build tall blocks.Knowledge of space can also be utilized to learn a hierarchical decomposition of spatial environments, where the bottlenecks between different spatial groupings correspond to sub-goals. This has been explored in neuroscience with the successor representation, which represents a value function in terms of the expected future state occupancy. Decomposition of the successor representation yields reasonable sub-goals for spatial navigation problems [5,12,44]. Botvinick et al. [3] have written a general overview of hierarchical reinforcement learning in the context of cognitive science and neuroscience.Consider a Markov decision process (MDP) represented by states s ∈ S, actions a ∈ A, and transition function T : (s, a) → s . An agent operating in this framework receives a state s from the external environment and can take an action a, which results in a new state s . We define the extrinsic reward function as F : (s) → R. The objective of the agent is to maximize this function over long periods of time. For example, this function can take the form of the agent's survival time or score in a game.Agents Effective exploration in MDPs is a significant challenge in learning good control policies. Methods such as are useful for local exploration but fail to provide impetus for the agent to explore different areas of the state space. In order to tackle this, we utilize a notion of goals g ∈ G, which provide intrinsic motivation for the agent. The agent focuses on setting and achieving sequences of goals in order to maximize cumulative extrinsic reward.We use the temporal abstraction of options [48] to define policies π g for each goal g. The agent learns these option policies simultaneously along with learning the optimal sequence of goals to follow. In order to learn each π g , the agent also has a critic, which provides intrinsic rewards, based on whether the agent is able to achieve its goals (see Figure 1).Temporal Abstractions As shown in Figure 1, the agent uses a two-stage hierarchy consisting of a controller and a meta-controller. The meta-controller receives state s t and chooses a goal g t ∈ G, where G denotes the set of all possible current goals. The controller then selects an action a t using s t and g t . The goal g t remains in place for the next few time steps either until it is achieved or a terminal state is reached. The internal critic is responsible for evaluating whether a goal has been reached and providing an appropriate reward r t (g) to the controller. The objective function for the controller is to maximize cumulative intrinsic reward: R t (g) = ∞ t =t γ t −t r t (g). Similarly, the objective of the meta-controller is to optimize the cumulative extrinsic reward F t = ∞ t =t γ t −t f t , where f t are reward signals received from the environment.One can also view this setup as similar to optimizing over the space of optimal reward functions to maximize fitness [39]. In our case, the reward functions are dynamic and temporally dependent on the sequential history of goals. Figure 1 provides an illustration of the agent's use of the hierarchy over subsequent time steps.We use the Deep Q-Learning framework [28] to learn policies for both the controller and the meta-controller. Specifically, the controller estimates the following Q-value function:where g is the agent's goal in state s and π ag = P (a|s, g) is the action policy.Similarly, for the meta-controller, we have:  Figure 1: Overview: The agent produces actions and receives sensory observations. Separate deep-Q networks are used inside the meta-controller and controller. The meta-controller that looks at the raw states and produces a policy over goals by estimating the value function Q 2 (s t , g t ; θ 2 ) (by maximizing expected future extrinsic reward). The controller takes in states and the current goal, and produces a policy over actions by estimating the value function Q 2 (s t , a t ; θ 1 , g t ) to solve the predicted goal (by maximizing expected future intrinsic reward). The internal critic checks if goal is reached and provides an appropriate intrinsic reward to the controller. The controller terminates either when the episode ends or when g is accomplished. The meta-controller then chooses a new g and the process repeats.where N denotes the number of time steps until the controller halts given the current goal, g is the agent's goal in state s t+N , and π g = P (g|s) is the policy over goals. It is important to note that the transitions (s t , g t , f t , s t+N ) generated by Q 2 run at a slower time-scale than the transitions (s t , a t , g t , r t , s t+1 ) generated by Q 1 .We can represent Q * (s, g) ≈ Q(s, g; θ) using a non-linear function approximator with param- eters θ, called a deep Q-network (DQN). Each Q ∈ {Q 1 , Q 2 } can be trained by minimizing corresponding loss functions -L 1 (θ 1 ) and L 2 (θ 2 ). We store experiences (s t , g t , f t , s t+N ) for Q 2 and (s t , a t , g t , r t , s t+1 ) for Q 1 in disjoint memory spaces D 1 and D 2 respectively. The loss function for Q 1 can then be stated as:where i denotes the training iteration number and y 1,i = r + γ max a Q 1 (s , a ; θ 1,i−1 , g).Following [28], the parameters θ 1,i−1 from the previous iteration are held fixed when opti- mising the loss function. The parameters θ 1 can be optimized using the gradient:The loss function L 2 and its gradients can be derived using a similar procedure.Learning Algorithm We learn the parameters of h-DQN using stochastic gradient descent at different time scales -experiences (or transitions) from the controller are collected at every time step but experiences from meta-controller are only collected when the controller terminates (i.e. when a goal is re-picked or the episode ends). Each new goal g is drawn in an fashion (Algorithms 1 &amp; 2) with the exploration probability 2 annealed as learning proceeds (from a starting value of 1).In the controller, at every time step, an action is drawn with a goal using the exploration probability 1,g which is dependent on the current empirical success rate of reaching g. The model parameters (θ 1 , θ 2 ) are periodically updated by drawing experiences from replay memories D 1 and D 2 ), respectively (see Algorithm 3).We perform experiments on two different domains involving delayed rewards. The first is a discrete-state MDP with stochastic transitions, and the second is an ATARI 2600 game called 'Montezuma's Revenge'. Game Setup We consider a stochastic de- cision process where the extrinsic reward depends on the history of visited states in addition to the current state. We selected this task in order to demonstrate the impor- tance of intrinsic motivation for exploration in such environments.There are 6 possible states and the agent always starts at s 2 . The agent moves left deterministically when it chooses left action; but the action right only succeeds 50% of the time, resulting in a left move otherwise. The terminal state is s 1 and the agent receives the reward of 1 when it first visits s 6 and then s 1 . The reward for going to s 1 without visiting s 6 is 0.01. This is a modified version of the MDP in [32], with the reward structure adding complexity to the task. The process is illustrated in Figure 2.1: Initialize experience replay memories {D 1 , D 2 } and parameters {θ 1 , θ 2 } for the controller and meta-controller respectively. 2: Initialize exploration probability 1,g = 1 for the controller for all goals g and 2 = 1 for the meta-controller. 3: for i = 1, num episodes doInitialize game and get start state description sg ← epsGreedy(s, G, 2 , Q 2 )while s is not terminal do 7:while not (s is terminal or goal g reached) do 10: a ← epsGreedy({s, g}, A, 1,g , Q 1 )Execute a and obtain next state s and extrinsic reward f from environment 12:Obtain intrinsic reward r(s, a, s ) from internal criticStore transition ({s, g}, a, r, {s , g}) in D 114:16:s ← send while 19:if s is not terminal theng ← epsGreedy(s, G, 2 , Q 2 )end ifend whileAnneal 2 and adaptively anneal 1,g using average success rate of reaching goal g. We consider each state as a possible goal for exploration. This encourages the agent to visit state s 6 (whenever it is chosen as a goal) and hence, learn the optimal policy. For each goal, the agent receives a positive intrinsic reward if and only if it reaches the corresponding state.Results We compare the performance of our approach (without the deep neural networks) with Q-Learning as a baseline (without intrinsic rewards) in terms of the average extrinsic reward gained in an episode. In our experiments, all parameters are annealed from 1 to 0.1 over 50,000 steps. The learning rate is set to 0.00025. Figure 3 plots the evolution of reward for both methods averaged over 10 different runs. As expected, we see that Q-Learning is unable to find the optimal policy even after 200 epochs, converging to a sub-optimal policy of reaching state s 1 directly to obtain a reward of 0.01. In contrast, our approach with hierarchical Q-estimators learns to choose goals s 4 , s 5 or s 6 , which statistically lead the agent to visit s 6 before going back to s 1 . Therefore, the agent obtains a significantly higher average reward of around 0.13.   Figure 4 illustrates that the number of visits to states s 3 , s 4 , s 5 , s 6 increases with episodes of training. Each data point shows the average number of visits for each state over the last 1000 episodes. This indicates that our model is choosing goals in a way so that it reaches the critical state s 6 more often.Game Description We consider 'Montezuma's Revenge', an ATARI game with sparse, delayed rewards. The game ( Figure 5(a)) requires the player to navigate the explorer (in red) through several rooms while collecting treasures. In order to pass through doors (in the top right and top left corners of the figure), the player has to first pick up the key. The player has to then climb down the ladders on the right and move left towards the key, resulting in a long sequence of actions before receiving a reward (+100) for collecting the key. After this, navigating towards the door and opening it results in another reward (+300).Existing deep RL approaches fail to learn in this environment since the agent rarely reaches a state with non-zero reward. For instance, the basic DQN [28] achieves a score of 0 while even the best performing system, Gorila DQN [30], manages only 4.16 on average.Setup The agent needs intrinsic motivation to explore meaningful parts of the scene before it can learn about the advantage of getting the key for itself. Inspired by the developmental psychology literature [43] and object-oriented MDPs [8], we use entities or objects in the scene to parameterize goals in this environment. Unsupervised detection of objects in visual scenes is an open problem in computer vision, although there has been recent progress in obtaining objects directly from image or motion data [10,9,14]. In this work, we built a custom object detector that provides plausible object candidates. The controller and The internal critic is defined in the space of 1 , relation, entity 2 where relation is a function over configurations of the entities. In our experiments, the agent is free to choose any entity 2 . For instance, the agent is deemed to have completed a goal (and receives a reward) if the agent entity reaches another entity such as the door. Note that this notion of relational intrinsic rewards can be generalized to other settings. For instance, in the ATARI game 'Asteroids', the agent could be rewarded when the bullet reaches the asteroid or if simply the ship never reaches an asteroid. In the game of 'Pacman', the agent could be rewarded if the pellets on the screen are reached. In the most general case, we can potentially let the model evolve a parameterized intrinsic reward function given entities. We leave this for future work.Model Architecture and Training As shown in Figure 5b, the model consists of stacked convolutional layers with rectified linear units (ReLU). The input to the meta-controller is a set of four consecutive images of size 84 × 84. To encode the goal output from the meta-controller, we append a binary mask of the goal location in image space along with the original 4 consecutive frames. This augmented input is passed to the controller. The experience replay memories D 1 and D 2 were set to be equal to 1E6 and 5E4 respectively. We set the learning rate to be 2.5E−4, with a discount rate of 0.99. We follow a two phase training procedure -(1) In the first phase, we set the exploration parameter 2 of the meta-controller to 1 and train the controller on actions. This effectively leads to pre-training the controller so that it can learn to solve a subset of the goals. (2) In the second phase, we jointly train the controller and meta-controller.Results Figure 6(a) shows reward progress from the joint training phase from which it is evident that the model starts gradually learning to both reach the key and open the door to get a reward of around +400 per episode. As shown in Figure 6(b), the agent learns to choose the key more often as training proceeds and is also successful at reaching it. As training proceeds, we observe that the agent first learns to perform the simpler goals (such as reaching the right door or the middle ladder) and then slowly starts learning the 'harder' goals such as the key and the bottom ladders, which provide a path to higher rewards. Figure 6(c) shows the evolution of the success rate of goals that are picked. At the end of training, we can see that the 'key', 'bottom-left-ladder' and 'bottom-right-ladders' are chosen increasingly more often. In order to scale-up to solve the entire game, several key ingredients are missing such as -automatic discovery of objects from videos to aid goal parametrization we considered, a flexible short-term memory, ability to intermittently terminate ongoing options. The agent learns to choose the key more often as training proceeds and is successful at achieving it. (c) Goal statistics: During early phases of joint training, all goals are equally preferred due to high exploration but as training proceeds, the agent learns to select appropriate goals such as the key and bottom-left door.We also show some screen-shots from a test run with our agent (with epsilon set to 0.1) in Figure 7, as well as a sample animation of the run. The meta-controller then chooses the bottom-right ladder as the next goal and the controller terminates after reaching it. Subsequently, the meta-controller chooses the key and the top-right door and the controller is able to successfully achieve both these goals.We have presented h-DQN, a framework consisting of hierarchical value functions operating at different time scales. Temporally decomposing the value function allows the agent to perform intrinsically motivated behavior, which in turn yields efficient exploration in environments with delayed rewards. We also observe that parameterizing intrinsic motivation in the space of entities and relations provides a promising avenue for building agents with temporally extended exploration. We also plan to explore alternative parameterizations of goals with h-DQN in the future.The current framework has several missing components including automatically disentangling objects from raw pixels and a short-term memory. The state abstractions learnt by vanilla deep-Q-networks are not structured or sufficiently compositional. There has been recent work [9,14,33,22,50,15,20] in using deep generative models to disentangle multiple factors of variations (objects, pose, location, etc) from pixel data. We hope that our work motivates the combination of deep generative models of images with h-DQN. Additionally, in order to handle longer range dependencies, the agent needs to store a history of previous goals, actions and representations. There has been some recent work in using recurrent networks in conjunction with reinforcement learning [18,31]. In order to scale-up our approach to harder non-Markovian settings, it will be necessary to incorporate a flexible episodic memory module.
