It's speedy and space saving and inexpensive. Got it at Walmart can't even remove a scuff.Figure 1: Two Domain Shift Scenarios: object recognition across visual domains (left) and sentiment prediction across text domains (right). When data distributions differ across domains, applying classifiers trained on one domain directly to another domain is likely to cause a significant performance drop.Machine learning is very different from human learning. Humans are able to learn from very few labeled examples and apply the learned knowledge to new examples in novel conditions. In contrast, supervised machine learning meth- ods only perform well when the given extensive labeled data are from the same distribution as the test distribution. Both theoretical (Ben-David et al. 2007;Blitzer, Dredze, and Pereira 2007) and practical results ( Saenko et al. 2010; Torralba and Efros 2011) have shown that the test error of supervised methods generally increases in proportion to the "difference" between the distributions of training and test examples. For example, Donahue et al. (2014) showed that even state-of-the-art Deep Convolutional Neural Network features learned on a dataset of 1.2M images are suscepti- ble to domain shift. Addressing domain shift is undoubtedly critical for successfully applying machine learning methods in real world applications.To compensate for the degradation in performance due to domain shift, many domain adaptation algorithms have been developed, most of which assume that some labeled exam- ples in the target domain are provided to learn the proper model adaptation. Daume III (2007) proposed a supervised domain adaptation approach notable for its extreme sim- plicity: it merely changes the features by making domain- specific and common copies, then trains a supervised clas- sifier on the new features from both domains. The method performs very well, yet is "frustratingly easy" to implement. However, it cannot be applied in the situations where the tar- get domain is unlabeled, which unfortunately are quite com- mon in practice.In this work, we present a "frustratingly easy" unsuper- vised domain adaptation method called CORrelation ALign- ment (CORAL). CORAL aligns the input feature distribu- tions of the source and target domains by exploring their second-order statistics. More concretely, CORAL aligns the distributions by re-coloring whitened source features with the covariance of the target distribution. CORAL is sim- ple and efficient, as the only computations it needs are (1) computing covariance statistics in each domain and (2) ap- plying the whitening and re-coloring linear transformation to the source features. Then, supervised learning proceeds as usual-training a classifier on the transformed source fea- tures.Despite being "frustratingly easy", CORAL offers sur- prisingly good performance on standard adaptation tasks. We apply it to two tasks: object recognition and senti- ment prediction (Figure 1), and show that it outperforms many existing methods. For object recognition, we demon- strate that it works well with both standard "flat" bag-of- words features and with state-of-the-art deep CNN fea- tures (Krizhevsky, Sutskever, and Hinton 2012), outperform- ing existing methods, including recent deep CNN adaptation approaches ( Tzeng et al. 2014;Ganin and Lempitsky 2015;Long et al. 2015). The latter approaches are quite complex and expensive, requiring re-training of the network and tun- ing of many hyperparameters such as the structure of the hidden adaptation layers. In contrast, CORAL only needs to compute the covariance of the source and target features.target source target sourceDomain shift is a fundamental problem in machine learn- ing, and has also attracted a lot of attention in the speech, natural language and vision communities (Blitzer, Dredze, and Pereira 2007;Gopalan, Li, and Chellappa 2011;Sun and Saenko 2014). For supervised adaptation, a variety of tech- niques have been proposed. Some consider the source do- main as a prior that regularizes the learning problem in the sparsely labeled target domain, e.g., (Yang, Yan, and Hauptmann 2007). Others minimize the distance between the tar- get and source domains, either by re-weighting the domains or by changing the feature representation according to some explicit distribution distance metric ( Borgwardt et al. 2006). Some learn a transformation on features using a contrastive loss ( Saenko et al. 2010). Arguably the simplest and most prominent supervised approach is the "frustratingly easy" feature replication (Daume III 2007). Given a feature vector x, it defines the augmented feature vector˜xvector˜ vector˜x = (x; x; 0) for data points in the source and˜xand˜ and˜x = (x; 0; x) for data points in the target. A classifier is then trained on augmented fea- tures. This approach is simple, however, it requires labeled target examples, which are often not available in real world applications.Early techniques for unsupervised adaptation consisted of re-weighting the training point losses to more closely reflect those in the test distribution (Jiang and Zhai 2007;Huang et al. 2006). Dictionary learning methods ( Shekhar et al. 2013;Huang and Wang 2013) try to learn a dictionary where the difference between the source and target domain is mini- mized in the new representation. Recent state-of-the-art un- supervised approaches (Gopalan, Li, and Chellappa 2011;Gong et al. 2012;Long et al. 2014;Caseiro et al. 2015) have pursued adaptation by projecting the source and target distributions into a lower-dimensional manifold, and finding a transformation that brings the subspaces closer together. Geodesic methods find a path along the subspace manifold, and either project source and target onto points along that path (Gopalan, Li, and Chellappa 2011), or find a closed- form linear map that projects source points to target (Gong et al. 2012). Alternatively, the subspaces can be aligned by computing the linear map that minimizes the Frobenius norm of the difference between them ( Harel and Mannor 2011;Fernando et al. 2013). However, these approaches only align the bases of the subspaces, not the distribution of the projected points. They also require expensive subspace projection and hyperparameter selection. Adaptive deep neural networks have recently been ex- plored for unsupervised adaptation. DLID (Chopra, Balakr- ishnan, and Gopalan 2013) trains a joint source and target CNN architecture, but is limited to two adaptation layers. ReverseGrad (Ganin and Lempitsky 2015), DAN (Long et al. 2015), and DDC ( Tzeng et al. 2014) directly optimize the deep representation for domain invariance, using addi- tional loss layers designed for this purpose. Training with this additional loss is costly and can be sensitive to initializa- tion, network structure, and other optimization settings. Our approach, applied to deep features (top layer activations), achieves better or comparable performance to these more complex methods, and can be incorporated directly into the network structure.We describe our method by taking a multi-class classifica- tion problem as the running example. Suppose we are given source-domain training exampleswith labels L S = {y i }, y ∈ {1, ..., L}, and target dataHere both x and u are the D- dimensional feature representations φ(I) of input I. Sup- pose µ s , µ t and C S , C T are the feature vector means and covariance matrices. As illustrated in Figure 2, µ t = µ s = 0 after feature normalization while C S = C T .To minimize the distance between the second-order statis- tics (covariance) of the source and target features, we apply a linear transformation A to the original source features and use the Frobenius norm as the matrix distance metric:Combining the results in the above two cases yields thatis the optimal solution to Equation (1) with r = min(r C S , r C T ). We then proceed to solve for A based on the above result. Let C ˆ S = A C S A, and we get:SinceThis gives:, then the right hand side of the above equation can be re-written as E Σ S E. This giveswhere C ˆ S is covariance of the transformed source featuresF denotes the matrix Frobenius norm. If rank(C S ) ≥ rank(C T ), then an analytical solution can be obtained by choosing A such that C ˆ S = C T . However, the data typically lie on a lower dimensional manifold (Harel and Mannor 2011;Gong et al. 2012;Fernando et al. 2013), and so the covariance matrices are likely to be low rank (Hariharan, Malik, and Ramanan 2012). We derive a solution for this general case, using the following lemma.A to E, we get the optimal solution of A as3.2 Algorithm Theorem 1. Let Σ + be the Moore-Penrose pseudoinverse of Σ, r C S and r C T denote the rank of C S and C T respec-is the optimal solution to the problem in Equation (1) with r = min(r C S , r C T ).T respectively. We first find the optimal value of C ˆ S through considering the following two cases:is the optimal solution to Equation (1) where r = r C T .is the optimal solution to Equa- tion (1) where r = r C S .re-colors it with the target covariance. This is illustrated in Figure 2(b) and Figure 2(c) respectively. The traditional whitening is adding a small reg- ularization parameter λ to the diagonal elements of the co- variance matrix to explicitly make it full rank and then mul- tiply the original feature by the inverse square root (or square root for coloring) of it. The whitening and re-coloring here are slightly different from them since the data are likely to lie on a lower dimensional space and the covariance matrices could be low rank.In practice, for the sake of efficiency and stability, we can perform the classical whitening and coloring. This is advan- tageous because: (1) it is faster (e.g., the whole CORAL transformation takes less than one minute on a regular laptop for D S ∈ R 795×4096 and D T ∈ R 2817×4096 ) and more sta- ble, as SVD on the original covariance matrices might not be stable and might slow to converge; (2) as illustrated in Fig- ure 3, the performance is similar to the analytical solution in Equation (2) and very stable with respect to λ. In this paper, we set λ to 1. The final algorithm can be written in four lines of MATLAB code as illustrated in Algorithm 1.One might instead attempt to align the distributions by whitening both source and target. As shown in Figure 2(d), this will fail as the source and target data are likely to lie on different subspaces due to domain shift. An alternative ap- proach would be whitening the target and then re-coloring it with the source covariance. However, as demonstrated in (Harel and Mannor 2011;Fernando et al. 2013) and our Input:gether (Gopalan, Li, and Chellappa 2011; Gong et al. 2012;Fernando et al. 2013;Harel and Mannor 2011). CORAL avoids subspace projection, which can be costly and requires selecting the hyper-parameter that controls the dimension- ality of the subspace. We note that subspace-mapping ap- proaches ( Harel and Mannor 2011;Fernando et al. 2013) only align the top k (subspace dimensionality) eigenvectors of the source and target covariance matrices. On the con- trary, CORAL aligns the covariance matrices, which can only be re-constructed using all eigenvectors and eigen- values. Even though the eigenvectors can be aligned well, the distributions can still differ a lot due to the difference of eigenvalues between the corresponding eigenvectors of the source and target data. CORAL is a more general and much simpler method than the above two as it takes into ac- count both eigenvectors and eigenvalues of the covariance matrix without the burden of subspace dimensionality selec- tion.S % whitening sourceT % re-coloring with target covariance experiments, transforming data from source to target space gives better performance. This might be due to the fact that by transforming the source to target space the classifier was trained using both the label information from the source and the unlabelled structure from the target. After CORAL transforms the source features to the target space, a classifier f w parametrized by w can be trained on the adjusted source features and directly applied to target features. For a linear classifier f w (I) = w T φ(I), we can apply an equivalent transformation to the parameter vector w instead of the features u. This results in added efficiency when the number of classifiers is small but the number and dimensionality of target examples is very high.Since correlation alignment changes the features only, it can be applied to any base classifier. Due to its efficiency, it can also be especially advantageous when the target do- mains are changing rapidly, e.g., due to scene changes over the course of a long video stream. is sim- ilar to the CORAL objective, however, no previous work has used this kernel for domain adaptation nor proposed a closed form solution to the best of our knowledge. The other difference is that MMD based approaches usually ap- ply the same transformation to both the source and target do- main. As demonstrated in (Kulis, Saenko, and Darrell 2011;Harel and Mannor 2011;Fernando et al. 2013), asymmet- ric transformations are more flexible and often yield better performance for domain adaptation tasks. Intuitively, sym- metric transformations find a space that "ignores" the differ- ences between the source and target domain while asymmet- ric transformations try to "bridge" the two domains.Relationship to Feature Normalization It has long been known that input feature normalization improves many ma- chine learning methods, e.g., (Ioffe and Szegedy 2015). However, CORAL does not simply perform feature normal- ization, but rather aligns two different distributions. Stan- dard feature normalization (zero mean and unit variance) does not address this issue, as illustrated in Figure 2(a). In this example, although the features are normalized to have zero mean and unit variance in each dimension, the differ- ences in correlations present in the source and target do- mains cause the distributions to be different.Relationship to Manifold Methods Recent state-of-the- art unsupervised approaches project the source and tar- get distributions into a lower-dimensional manifold and find a transformation that brings the subspaces closer to- Suppose φ(I) was computed by a multilayer neural network, then the inputs to each layer φ k can suffer from covari- ate shift as well. Batch Normalization (Ioffe and Szegedy 2015) tries to compensate for internal covariate shift by normalizing each mini-batch to be zero-mean and unit- variance. However, as illustrated in Figure 2, such normal- ization might not be enough. Even if used with full whiten- ing, Batch Normalization may not compensate for external covariate shift: the layer activations will be decorrelated for a source point but not for a target point. What's more, as mentioned in Section 3.2, whitening both domains still does not work. Our method can be easily integrated into a deep architecture by treating layers as features (e.g., fc6 or fc7 of AlexNet (Krizhevsky, Sutskever, and Hinton 2012)). Al- though we experiment only with CORAL applied to one hid- den layer at each time, multilayer CORAL could be used by implementing the transformations A l as extra layers which follow each original layer l.We evaluate our method on object recognition ( Saenko et al. 2010) and sentiment analysis (Blitzer, Dredze, and Pereira 2007) with both shallow and deep features, using standard benchmarks and protocols. In all experiments we assume the target domain is unlabeled.We follow the standard procedure ( Fernando et al. 2013;Donahue et al. 2014) and use a linear SVM as the base classifier. The model selection approach of ( Fernando et al. 2013) is used to set the C parameter for the SVM by doing cross-validation on the source domain. Since there are no other hyperparameters (except the common regularization parameter λ for whitening and coloring, which we discussed in Section 3.2 and Figure 3) required for our method, the re- sults in this paper can be easily reproduced. To compare to published methods, we use the accuracies reported by their authors or conduct experiments using the source code pro- vided by the authors.DAM ( Duan et al. 2009), GFK ( Gong et al. 2012), SA (Fernando et al. 2013), and TCA ( Pan et al. 2009) as well as the no adaptation baseline (NA). GFK, SA, and TCA are manifold based methods that project the source and target distributions into a lower-dimensional manifold. GFK inte- grates over an infinite number of subspaces along the sub- space manifold using the kernel trick. SA aligns the source and target subspaces by computing a linear map that mini- mizes the Frobenius norm of their difference. TCA performs domain adaptation via a new parametric kernel using fea- ture extraction methods by projecting data onto the learned transfer components. DAM introduces smoothness assump- tion to enforce the target classifier share similar decision val- ues with the source classifiers. Even though these methods are far more complicated than ours and require tuning of hy- perparameters (e.g., subspace dimensionality), our method achieves the best average performance across all the 12 do- main shifts. Our method also improves on the no adapta- tion baseline (NA), in some cases increasing accuracy sig- nificantly (from 56% to 86% for D→W).In this set of experiments, domain adaptation is used to improve the accuracy of an object classifier on novel im- age domains. Both the standard Office ( Saenko et al. 2010) and extended Office-Caltech10 ( Gong et al. 2012) datasets are used as benchmarks in this paper. Office-Caltech10 contains 10 object categories from an office environment (e.g., keyboard, laptop, etc.) in 4 image domains: W ebcam, DSLR, Amazon, and Caltech256. The standard Office dataset contains 31 (the same 10 categories from Office- Caltech10 plus 21 additional ones) object categories in 3 domains: W ebcam, DSLR, and Amazon. Later, we also conduct a larger (more data and categories) scale evaluation on Office-Caltech10 and the Cross-Dataset Testbed (Tom- masi and Tuytelaars 2014) dataset.Object Recognition with Shallow Features We follow the standard protocol of ( Gong et al. 2012;Fernando et al. 2013;Gopalan, Li, and Chellappa 2011;Kulis, Saenko, and Darrell 2011;Saenko et al. 2010) and conduct experi- ments on the Office-Caltech10 dataset with shallow features (SURF). The SURF features were encoded with 800-bin bag-of-words histograms and normalized to have zero mean and unit standard deviation in each dimension. Since there are four domains, there are 12 experiment settings, namely, A→C (train classifier on (A)mazon, test on (C)altech), A→D (train on (A)mazon, test on (D)SLR), A→W, and so on. We follow the standard protocol and conduct exper- iments in 20 randomized trials for each domain shift and average the accuracy over the trials. In each trial, we use the standard setting ( Gong et al. 2012;Fernando et al. 2013;Gopalan, Li, and Chellappa 2011;Kulis, Saenko, and Darrell 2011;Saenko et al. 2010) and randomly sample the same number (20 for Amazon, Caltech, and W ebcam; 8 for DSLR as there are only 8 images per category in the DSLR domain) of labelled images in the source domain as training set, and use all the unlabelled data in the target domain as the test set.In Table 1, we compare our method to five recent pub- lished methods: SVMA (Duan, Tsang, and Xu 2012),We follow the standard protocol of ( Donahue et al. 2014;Tzeng et al. 2014;Long et al. 2015;Ganin and Lempitsky 2015) and conduct experiments on the standard Office dataset with deep features. DLID (Chopra, Balakrishnan, and Gopalan 2013) trains a joint source and target CNN architecture with an "interpolating path" between the source and tar- get domain. DANN (Ghifary, Kleijn, and Zhang 2014) in- corporates the Maximum Mean Discrepancy (MMD) mea- sure as a regularization to reduce the distribution mis- match. DA-NBNN ( Tommasi and Caputo 2013) presents an NBNN-based domain adaptation algorithm that itera- tively learns a class metric while inducing a large margin separation among classes. DECAF ( Donahue et al. 2014) uses AlexNet (Krizhevsky, Sutskever, and Hinton 2012) pre- trained on ImageNet ( Deng et al. 2009) and extracts the fc6 or fc7 layers in the source domains as features to train a classifier. It then applies the classifier to the target domain directly. DDC ( Tzeng et al. 2014) adds a domain confusion loss to AlexNet (Krizhevsky, Sutskever, and Hinton 2012) and fine-tunes it on both the source and target domain. DAN ( Long et al. 2015) and ReverseGrad (Ganin and Lempitsky 2015) are the two most recent domain adapta- tion approaches based on deep architectures. DAN is similar to DDC but utilizes a multi-kernel selection method for bet- ter mean embedding matching and adapts in multiple layers. ReverseGrad introduces a gradient reversal layer to allow di- rect optimization through back-propagation. Both DDC and ReverseGrad add a new binary classification task by treating the source and target domain as two classes. They maximize the binary classification loss to obtain invariant features.To have a fair comparison, we apply CORAL to both the pre-trained AlexNet (CORAL-fc6 and CORAL-fc7) and to AlexNet fine-tuned on the source (CORAL-FT6 and CORAL-FT7). However, the fine-tuning procedures of DDC, DAN, and ReverseGrad are very complicated as there is more than one loss and hyper-parameters are needed to combine them. They also require adding new layers and      Table 2 we compare our method to the 11 baseline methods discussed before. Again, our method outperforms all of these techniques in almost all cases, sometimes by a very large margin. Note that most of the deep structures based methods report results only on some settings. We find that the higher level fc7/FT7 features lead to better performance than fc6/FT6. What's more, the NA baselines also achieve very good performance, even better than all the manifold methods and some deep methods. However, CORAL outperforms it consistently and is the only method achieves better AVG performance across all the 6 shifts. It also achieves better peformance than the two latest deep methods (DAN and ReverseGrad) in 2 out of the 3 shifts they reported.One interesting finding is that, although fine-tuning on the source domain only (NA-FT6 and NA-FT7) does not achieve better performance on the target domain compared to the pre-trained network (NA-fc6 and NA-fc7), apply- ing CORAL to the fine-tuned network (CORAL-FT6 and CORAL-FT7) achieves much better performance than ap- plying CORAL to the pre-trained network (CORAL-fc6 and CORAL-fc7). One possible explanation is that the pre- trained network might be underfitting while the fine-tuned network is overfitting. Since CORAL aligns the source fea- ture distribution to target distribution, overfitting becomes less of a problem.A Larger Scale Evaluation In this section, we repeat the evaluation on a larger scale. We conduct two sets of ex- periments to investigate how the dataset size and number of classes will affect the performance of domain adaptation methods. In both sets of experiments, we use the "full train- ing" protocol, where all the source data are used for train- ing, compared to the standard subsampling protocol in the previous two sections. Since all the target data are used in the previous two sections, the only difference between these two settings is the training dataset size of the source do- main. To have a direct comparison to  In Tables 3 and 4, we compare CORAL to SA, GFK, TCA which have available source code as well as the NA base- line. Table 3 shows the result of the Office-Caltech10 dataset and Table 4 shows the result on the Cross-Dataset Testbed dataset. In both experiments, CORAL outperforms all the baseline methods and again the margin on deep features is much larger than on shallow features. Comparing Table 3 to Table 1, we can say that the performance difference be- tween NA and other methods is smaller as more source data is used. This may be due to the fact that as more training data is used, the classifier is stronger and can generalize better to other domains. the best average classification accuracy across the 4 standard domain shifts.We also evaluate our method on sentiment analysis using the standard Amazon review dataset (Blitzer, Dredze, and Pereira 2007;Gong, Grauman, and Sha 2013). We use the processed data from (Gong, Grauman, and Sha 2013), in which the dimensionality of the bag-of-words features was reduced to keep the top 400 words without losing perfor- mance. This dataset contains Amazon reviews on 4 domains: Kitchen appliances, DVD, Books, and Electronics. For each domain, there are 1000 positive and 1000 negative reviews. We follow the standard protocol of (Gong, Grauman, and Sha 2013) and conduct experiments on 20 random train- ing/test splits and report the mean accuracy for each domain shift.In Table 5, we compare our method to five published methods: TCA ( Pan et al. 2009), GFS (Gopalan, Li, and Chellappa 2011), GFK ( Gong et al. 2012), SCL (Blitzer, McDonald, and Pereira 2006), and KMM ( Huang et al. 2006) as well as the no adaptation baseline (NA). GFS is a precursor of GFK and interpolates features using a finite number of subspaces. SCL introduces structural correspon- dence learning to automatically induce correspondences among features from different domains. KMM presents a nonparametric method to directly produce re-sampling weights without distribution estimation. One interesting ob- servation is that, for this sentiment analysis task, three state- of-the-art methods (TCA, GFS, and GFK) actually perform worse than the no adaptation baseline (NA). Despite the dif- ficulty of this task, CORAL still performs well and achieves One interesting result is that the margin between CORAL and other published methods is much larger on deep fea- tures (e.g. 64.0 of CORAL-fc6 compared to 49.1 of SA- fc6 in Table 2) than on bag-of-words features. This could be because deep features are more strongly correlated than bag-of-words features (e.g. the largest singular value of the covariance matrix of Amazon-fc6 is 354 compared to 27 of Amazon-SURF). Similarly, the improvement on images (Ta- bles 1-4) is much larger than text (Table 5), possibly because bag-of-words text features are extremely sparse and less cor- related than image features. As demonstrated in (Mahendran and Vedaldi 2015), high level deep features are more "parts" or "objects'. Intuitively, "parts" or "objects" should be more strongly correlated than "edges" (e.g., arm and head of a person are more likely to appear jointly).These findings suggest that CORAL is extremely valuable in the era of deep learning. Applying CORAL to deep text features is part of future work.In this article, we proposed an simple, efficient and effective method for domain adaptation. The method is "frustratingly easy" to implement: the only computation involved is re- coloring the whitened source features with the covariance of the target domain.Extensive experiments on standard benchmarks demon- strate the superiority of our method over many existing state-of-the-art methods. These results confirm that CORAL is applicable to multiple features types, including highly- performing deep features, and to different tasks, including computer vision and natural language processing.
