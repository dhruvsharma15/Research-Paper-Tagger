This paper describes an approach to visual question an- swering based on neural module networks (NMNs). We an- swer natural language questions about images using collec- tions of jointly-trained neural "modules", dynamically com- posed into deep networks based on linguistic structure.Concretely, given an image and an associated question (e.g. where is the dog?), we wish to predict a corresponding answer (e.g. on the couch, or perhaps just couch) ( Figure 1). The visual QA task has significant significant applications to human-robot interaction, search, and accessibility, and has been the subject of a great deal of recent research at- tention [2,7,20,22,25,32]. The task requires sophisti- cated understanding of both visual scenes and natural lan- guage. Recent successful approaches represent questions as bags of words, or encode the question using a recurrent neural network [22] and train a simple classifier on the en- coded question and image. In contrast to these monolithic approaches, another line of work for textual QA [18] and image QA [21] uses semantic parsers to decompose ques- tions into logical expressions. These logical expressions are evaluated against a purely logical representation of the world, which may be provided directly or extracted from an image [16].In this paper we draw from both lines of research, presenting a technique for integrating the representational power of neural networks with the flexible compositional structure afforded by symbolic approaches to semantics. Rather than relying on a monolithic network structure to answer all questions, our approach assembles a network on the fly from a collection of specialized, jointly-learned mod- ules ( Figure 1). Rather than using logic to reason over truth values, we remain entirely in the domain of visual features and attentions.Our approach first analyzes each question with a seman- tic parser, and uses this analysis to determine the basic com- putational units (attention, classification, etc.) needed to answer the question, as well as the relationships between the modules. In Figure 1, we first produce an attention fo- cused on the dog, which passes its output to a location clas- sifier. Depending on the underlying structure, these mes- sages passed between modules may be raw image features, attentions, or classification decisions; each module is de- termined by its input and output types. Different kinds of modules are shown in different colors; attention modules (like dog) are shown in green, while labeling modules (like where) are shown in blue. Importantly, all modules in an NMN are independent and composable, which allows the computation to be different for each problem instance, and possibly unobserved during training. Outside the NMN, our final answer uses a recurrent network (LSTM) to read the question, which has been shown to be important to model common sense knowledge and dataset biases [22].We evaluate our approach on two visual question an- swering tasks. On the recently-released VQA [2] datasets we achieve results comparable to or better than existing ap- proaches, and show that our approach specifically outper- forms previous work on questions with compositional struc- ture (e.g. requiring that an object be located and one of its attributes described). It turns out, however, that many of the questions in both datasets are quite simple, with little com- position or reasoning required. To test our approach's abil- ity to handle harder questions, we introduce a new dataset of synthetic images paired with complex questions involv- ing spatial relations, set-theoretic reasoning, and shape and attribute recognition. On this dataset we outperform com- peting approaches by as much as 25% absolute accuracy.While all the applications considered in this paper in- volve visual question answering, the general architecture is potentially of broader usefulness, and might be more gener- ally applied to visual referring expression resolution [6] or question answering about natural language texts [11].To summarize our contributions: We first describe neural module networks, a general architecture for discretely com- posing heterogeneous, jointly-trained neural modules into deep networks. Next, for the visual QA task specifically, we show how to construct NMNs based on the output of a semantic parser, and use these to successfully complete established visual question answering tasks. Finally, we in- troduce a new dataset of challenging, highly compositional questions about abstract shapes, and show that our model again outperforms previous approaches. We will release this dataset, as well as code for all systems described in this paper, upon publication. network topologies-there is no single "best network" for all tasks. Second, though different networks are used for different purposes, it is commonplace to initialize systems for many of vision tasks with a prefix of a network trained for classification [9]. This has been shown to substantially reduce training time and improve accuracy.So while network structures are not universal (in the sense that the same network is appropriate for all problems), they are at least empirically modular (in the sense that in- termediate representations for one task are useful for many others).Can we generalize this idea in a way that is useful for question answering? Rather than thinking of question an- swering as a problem of learning a single function to map from questions and contexts to answers, it's perhaps useful to think of it as a highly-multitask learning setting, where each problem instance is associated with a novel task, and the identity of that task is expressed only noisily in lan- guage. In particular, where a simple question like is this a truck? requires us to retrieve only one piece of information from an image, more complicated questions, like how many objects are to the left of the toaster? might require multi- ple processing steps. The compositional nature of language means that the number of such processing such steps is po- tentially unbounded. Moreover, multiple kinds of process- ing might be required-repeated convolutions might iden- tify a truck, but some kind of recurrent architecture is likely necessary to count up to arbitrary numbers.Thus our goal in this paper is to specify a framework for modular, composable, jointly-trained neural networks. In this framework, we first predict the structure of the computation needed to answer each question individually, then realize this structure by constructing an appropriately- shaped neural network from an inventory of reusable mod- ules. These modules are learned jointly, rather than trained in isolation, and specialization to individual tasks (identify- ing properties, spatial relations, etc.) arises naturally from the training objective.We consider three lines of related work: previous efforts toward visual question answering, discrete models for com- positional semantics, and models that are structurally simi- lar to neural module networks.We begin with two simple observations. First, state-of- the-art performance on the full range of computer vision tasks that are studied requires a variety of different deep Visual Question Answering Answering questions about images is sometimes referred to as a "Visual Turing Test" [21,8]. It has only recently gained popularity, following the emergence of appropriate datasets consisting of paired images, questions, and answers. While the DAQUAR dataset [21] is restricted to indoor scenes and contains rel- atively few examples, the COCOQA dataset [32] and the VQA dataset [2] are significantly larger and have more vi- sual variety. Both are based on images from the COCO dataset [19]. While COCOQA contains question-answer pairs automatically generated from the descriptions asso- ciated with the COCO dataset, [2] has crowed sourced questions-answer pairs. We evaluate our approach on VQA, the larger and more natural of the two datasets.Notable "classical" approaches to this task include [21,16]. Both of these approaches are similar to ours in their use of a semantic parser, but both rely on fixed logical inference rather than learned compositional operations.Several neural models for visual questioning have al- ready been proposed in the literature [25,20,7], all of which use standard deep sequence modeling machinery to con- struct a joint embedding of image and text, which is im- mediately mapped to a distribution over answers. Here we attempt to more explicitly model the computational process needed to produce each answer, but benefit from techniques for producing sequence and image embeddings that have been important in previous work.One important component of visual questioning is grounding the question in the image. This grounding task has previously been approached in [13,24,12,15], where the authors tried to localize phrases in an image. [31] use an attention mechanism, to predict a heatmap for each word, as an auxiliary task, during sentence generation. The at- tentional component of our model is inspired by these ap- proaches.attend modules followed by a classify module (see sec- tion 4 below).Our basic contribution is in both assembling this graph on the fly, and simultaneously in allowing the nodes to per- form heterogeneous computations, with for "messages" of different kinds-raw image features, attentions, classifica- tion predictions-passed from one module to the next. We are unaware of any previous work allowing such mixed col- lections of modules to be trained jointly.Each training datum for this task can be thought of as a 3-tuple (w, x, y), where• y is an answer A model is fully specified by a collection of modules {m}, each with associated parameters θ m , and a network layout predictor P which maps from strings to networks. Given (w, x) as above, the model instantiates a network based on P (w), passes x (and possibly w again) as inputs, and ob- tains a distribution over labels (for the VQA task, we re- quire the output module to be a classifier). Thus a model ultimately encodes a predictive distribution p(y | w, x; θ).In the remainder of this section, we describe the set of modules used for the VQA task, then explain the process by which questions are converted to network layouts.General compositional semantics There is a large lit- erature on learning to answer questions about structured knowledge representations from question-answer pairs, both with and without joint learning of meanings for sim- ple predicates [18,16]. Outside of question answering, sev- eral models have been proposed for instruction following that impose a discrete "planning structure" over an under- lying continuous control signal [1,23]. We are unaware of past use of a semantic parser to predict network structures, or more generally to exploit the natural similarity between set-theoretic approaches to classical semantic parsing and attentional approaches to computer vision.Neural network architectures The idea of selecting a different network graph for each input datum is fundamen- tal to both recurrent networks (where the network grows in the length of the input) [5] and recursive neural networks (where the network is built, e.g., according to the syntactic structure of the input) [28]. But both of these approaches ultimately involve repeated application of a single com- putational module (e.g. an LSTM [10] or GRU [3] cell). From another direction, some kinds of memory networks [30] may be viewed as a special case of our model with a fixed computational graph, consisting of a sequence of Our goal here is to identify a small set of modules that can be assembled into all the configurations necessary for our tasks. This corresponds to identifying a minimal set of composable vision primitives. The modules operate on three basic data types: images, unnormalized attentions, and labels. For the particular task and modules described in this paper, almost all interesting compositional phenom- ena occur in the space of attentions, and it is not unreason- able to characterize our contribution more narrowly as an "attention-composition" network. Nevertheless, other types may be easily added in the future (for new applications or for greater coverage in the VQA domain A re-attention module re-attend [c] is essentially just a multilayer perceptron with rectified nonlinearities (ReLUs), performing a fully-connected mapping from one attention to another. Again, the weights for this mapping are distinct for each c. So re-attend [above] should take an attention and shift the regions of greatest activation upward (as above), while re-attend [not] should move attention away from the active regions. For the experiments in this paper, the first fully-connected (FC) layer produces a vector of size 32, and the second is the same size as the input.A measurement module measure [c] takes an attention alone and maps it to a distribution over labels. Because atten- tions passed between modules are unnormalized, measure is suitable for evaluating the existence of a detected object, or counting sets of objects. Having built up an inventory of modules, we now need to assemble them into the layout specified by the question. The transformation from a natural language question to an instantiated neural network takes place in two steps. First we map from natural language questions to layouts, which specify both the set of modules used to answer a given ques- tion, and the connections between them. Next we use these layouts are used to assemble the final prediction networks.We use standard tools pre-trained on existing linguis- tic resources to obtained structured representations of ques- tions. Future work might focus on learning (or at least fine- tuning) this prediction process jointly with the rest of the system.A combination module combine[c] merges two attentions into a single attention. For example, combine [and] should be active only in the regions that are active in both inputs, while combine [except] should be active where the first in- put is active and the second is inactive.Parsing We begin by parsing each question with the Stan- ford Parser [14]. to obtain a universal dependency represen- tation [4]. Dependency parses express grammatical rela- tions between parts of a sentence (e.g. between objects and their attributes, or events and their participants), and pro- vide a lightweight abstraction away from the surface form attend [red] yes combine [and] measure [is] attend [tie] re-attend [above] attend [circle] classify [color] yellow (  of the sentence. The parser also performs basic lemmati- zation, for example turning kites into kite and were into be. This reduces sparsity of module instances.Next, we filter the set of dependencies to those con- nected the wh-word in the question (the exact distance we traverse varies depending on the task). This gives a sim- ple symbolic form expressing (the primary) part of the sen- tence's meaning. For example, what is standing in the field becomes what(stand); what color is the truck becomes color(truck), and is there a circle next to a square becomes is(circle, next-to(square)). In the process we also strip away function words like determiners and modals, so what type of cakes were they? and what type of cake is it? both get converted to type(cake). The code for transforming parse trees to structured queries will be provided in the ac- companying software package.These representations bear a certain resemblance to pieces of a combinatory logic [18]: every leaf is implicitly a function taking the image as input, and the root represents the final value of the computation. But our approach, while compositional and combinatorial, is crucially not logical: the inferential computations operate on continuous repre- sentations produced by neural networks, becoming discrete only in the prediction of the final answer.Given the mapping from queries to network layouts de- scribed above, we have for each training example a net- work structure, an input image, and an output label. In many cases, these network structures are different, but have tied parameters. Networks which have the same high-level structure but different instantiations of indi- vidual modules (for example what color is the cat?- classify[color](attend [cat]) and where is the truck?- classify[where](attend [truck])) can be processed in the same batch, resulting in efficient computation.As noted above, parts of this conversion process are task- specific-we found that relatively simple expressions were best for the natural image questions, while the shapes ques- tion (by design) required deeper structures. Some summary statistics are provided in Table 1.Generalizations It is easy to imagine applications where the input to the layout stage comes from something other than a natural language parser. Users of an image database, for example, might write SQL-like queries directly in order to specify their requirements precisely, e.g.Layout These symbolic representations already deter- mine the structure of the predicted networks, but not the identities of the modules that compose them. This final as- signment of modules is fully determined by the structure of the parse. All leaves become attend modules, all inter- nal nodes become re-attend or combine modules dependent on their arity, and root nodes become measure modules for yes/no questions and classify modules for all other ques- tion types.or even mix visual and non-visual specifications in their queries:IS(cat) and date &gt; 2014-11-5Indeed, it is possible to construct this kind of "visual SQL" using precisely the approach described in this paper- once our system is trained, the learned modules for atten- tion, classification, etc. can be assembled by any kind of outside user, without relying on natural language specifi- cally.  Table 1: Structure summary statistics for neural module networks used in this paper. "types" is the set of high-level module types available (e.g. attend), "# instances" is the number of specific module instances (e.g. attend [llama]), and "# layouts" is the number of distinct composed structures (e.g. classify [color](attend[llama])). "Max depth" is the greatest depth across all layouts, while "max size" is the greatest number of modules-for example, the network in Figure 2b has depth 4 and size 5. (All numbers from training sets.)So far our discussion has focused on the neural module net architecture, without reference to the remainder of Fig- ure 1. Our final model combines the output from the neu- ral module network with predictions from a simple LSTM question encoder. This is important for two reasons. First, because of the relatively aggressive simplification of the question that takes place in the parser, grammatical cues that do not substantively change the semantics of the question, but which might affect the answer, are discarded. For exam- ple, what is flying? and what are flying? both get converted to what(fly), but their answers should be kite and kites re- spectively, even given the same underlying image features. The question encoder thus allows us to model underlying syntactic regularities in the data. Second, it allows us to capture semantic regularities: with missing or low-quality image data, it is reasonable to guess that what color is the bear? is answered by brown, and unreasonable to guess green. The question encoder also allows us to model effects of this kind.All experiments in this paper use a standard single-layer LSTM with 1024 hidden units. The question modeling component predicts a distribution over the set of answers, like the root module of the NMN. The final prediction from the model is a geometric average of these two probability distributions, dynamically reweighted using both text and image features. The complete model, including both the NMN and sequence modeling component, is trained jointly.(thus there was no hyperparameter search over step sizes).It is important to emphasize that the labels we have as- signed to distinguish instances of the same module type- cat, and, etc.-are a notational convenience, and do not re- flect any manual specification of the behavior of the cor- responding modules. detect [cat] is not fixed or even ini- tialized as cat recognizer (rather than a couch recognizer or a dog recognizer), and combine [and] isn't fixed to com- pute intersections of attentions (rather than unions or differ- ences). Instead, they acquire these behaviors as a byprod- uct of the end-to-end training procedure. As can be seen in Figure 2, the image-answer pairs and parameter tying together encourage each module to specialize in the appro- priate way.Our training objective is simply to find module parame- ters maximizing the likelihood of the data. By design, the last module in every network outputs a distribution over la- bels, and so each assembled network also represents a prob- ability distribution.Because of the dynamic network structures used to an- swer questions, some weights are updated much more fre- quently than others. For this reason we found that learn- ing algorithms with adaptive per-weight learning rates per- formed substantially better than simple gradient descent.All the experiments described below use AdaDelta [33] We begin with a set of motivating experiments on syn- thetic data. Compositionality, and the corresponding abil- ity to answer questions with arbitrarily complex structure, is an essential part of the kind of deep image understand- ing visual QA datasets are intended to test. At the same time, questions in most existing natural image datasets are quite simple, for the most part requiring that only one or two pieces of information be extracted from an image in order to answer it successfully, and with little evaluation of ro- bustness in the presence of distractors (e.g. asking is there a blue house in an image of a red house and a blue car).As one of the primary goals of this work is to learn models for deep semantic compositionality, we have cre- ated SHAPES, a synthetic dataset that places such compo- sitional phenomena at the forefront. This dataset consists of complex questions about simple arrangements of col- ored shapes (Figure 3). Questions contain between two and four attributes, object types, or relationships. There are 244 questions and 15616 images in total. To eliminate mode- guessing as a viable strategy, all questions have a yes-or-no answer, but good performance requires that the system learn to recognize shapes and colors, and understand both spatial and logical relations among sets of objects.While success on this dataset is by no means a sufficient condition for robust visual QA, we believe it is a necessary one. In this respect it is similar in spirit to the bAbI [  Table 2: Results on the SHAPES dataset. Here "size" is the number of modules needed to instantiate an appropriate NMN. Our model achieves high accuracy and outperforms a baseline from previous work, especially on highly compo- sitional questions. "NMN (easy)" is a modified training set with no size-6 questions; these results demonstrate that our model is able to generalize to questions more complicated than it has ever seen at training time. Table 3: Results on the VQA test server. NMN+LSTM is the full model shown in Figure 1, while NMN is an ablation experiment with no whole-question LSTM. The full model outperforms previous approaches, scoring particularly well on questions not involving a binary decision. Baseline num- bers are as reported in previous work.dataset, and we hope that SHAPES will continue to be used in conjunction with natural image datasets.To produce an initial set of image features, we pass the input image through the convolutional portion of a LeNet [17] which is jointly trained with the question-answering part of the model. We compare our approach to a reim- plementation of the VIS+LSTM baseline similar to the one described by [26], again swapping out the pre-trained image embedding with a LeNet.As can be seen in Table 2, our model achieves excellent performance on this dataset, while the VIS+LSTM base- line fares little better than a majority guesser. Moreover, the color detectors and attention transformations behave as expected (Figure 2b), indicating that our joint training pro- cedure correctly allocates responsibilities among modules. This confirms that our approach is able to model complex compositional phenomena outside the capacity of previous approaches to visual question answering.We perform an additional experiment on a modified ver- sion of the training set, which contains no size-6 questions (i.e. questions whose corresponding NMN has 6 modules). Here our performance does not suffer at all, and perhaps in- creases slightly; this demonstrates that our model is able to generalize to questions even more complicated than those it has seen during training. Using only linguistic information, the model extrapolates simple visual patterns it has learned to even harder questions.Next we consider the model's ability to handle hard per- ceptual problems involving natural images. Here we evalu- ate on the recently-released VQA dataset. This is the largest resource of its kind, consisting of more than 200,000 im- ages, each paired with three questions and ten answers per question. Data was generated by human annotators, in con- trast to previous work, which has generated questions au- tomatically from captions [26]. We learn our model using the standard train/test split, training only with those answers marked as high confidence. The visual input to the NMN is the conv5 layer of a 16-layer VGGNet [27] after max- pooling. We do not fine-tune the VGGNet.Results are shown in Table 3. As can be seen, we outper- form the best published results on this task. A breakdown of our questions by answer type reveals that our model per- forms especially well on questions answered by an object, attribute, or number, but worse than a sequence baseline in the yes/no category. Inspection of training-set accura- cies suggests that performance on yes/no questions is due to overfitting. An ensemble with a sequence-only system might achieve even better results; future work within the NMN framework should focus on redesigning the measure module to reduce effects from overfitting.Inspection of parser outputs also suggests that there is substantial room to improve the system using a better parser. A hand inspection of the first 50 parses in the training set suggests that most (80-90%) of questions asking for simple properties of objects are correctly analyzed, but more com- plicated questions are more prone to picking up irrelevant predicates. For example are these people most likely experi- encing a work day? is parsed as be(people, likely), when the desired analysis is is(people, work). Parser errors of this kind could be fixed with joint learning. Figure 3 is broadly suggestive of the kinds of predic- tion errors made by the system, including plausible seman- tic confusions (cardboard interpreted as leather, round win- dows interpreted as clocks), normal lexical variation (con- tainer for cup), and use of answers that are a priori plausible but unrelated to the image (describing a horse as located in a pen rather than a barn).In this paper, we have introduced neural module net- works, which provide a general-purpose framework for learning collections of neural modules which can be dy- namically assembled into arbitrary deep networks. We have demonstrated that this approach achieves state-of-the-art performance on existing datasets for visual question an-  Figure 3: Example output from our approach on different visual QA tasks. The top row shows correct answers, while the bottom row shows mistakes (correct answers are given in parentheses).swering, performing especially well on questions answered by an object or an attribute. Additionally, we have in- troduced a new dataset of highly compositional questions about simple arrangements of shapes, and shown that our approach substantially outperforms previous work.tools for learning semantic parsers [16].So far we have maintained a strict separation between predicting network structures and learning network param- eters. It is easy to imagine that these two problems might be solved jointly, with uncertainty maintained over network structures throughout training and decoding. This might be accomplished either with a monolithic network, by using some higher-level mechanism to "attend" to relevant por- tions of the computation, or else by integrating with existingThe fact that our neural module networks can be trained to produce predictable outputs-even when freely composed-points toward a more general paradigm of "programs" built from neural networks. In this paradigm, network designers (human or automated) have access to a standard kit of neural parts from which to construct mod- els for performing complex reasoning tasks. While visual question answering provides a natural testbed for this ap- proach, its usefulness is potentially much broader, extend- ing to queries about documents and structured knowledge bases or more general signal processing and function ap- proximation.
