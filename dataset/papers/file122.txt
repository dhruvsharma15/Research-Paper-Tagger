Statistical approaches to dialogue modelling allow automatic optimisation of the Spoken Dialogue Systems (SDS) [25]. A SDS is typically designed according to a structured ontology (or a database schema), which defines the domain that the system can talk about. The domain is presented using slots, which are variables the user can either specify or ask about in the domain.The system also comprises various statistical components. This includes a spoken language un- derstanding module, which takes a sentence as input and gives a dialogue act as output [9], (e.g. requesting information, informing constraints, saying good-bye), and a slot-value pair that specify arguments of the act. For example inform(hotel=expensive) is a dialogue act of type inform, where the user is informing the system that they would like to constrain their search to luxury venues. The other components of a SDS include a dialogue belief state tracker that predicts user intent and track the dialogue history, a dialogue policy to determine the dialogue flow, and a natural language generator to convert conceptual representations into system responses.The POMDP framework mitigates the problem of noisy estimates of spoken language understanding by maintaining a distribution over all possible hypothesises, which is called the belief state [24]. A dialogue policy is then employed to map the belief state into an appropriate system action at every dialogue turn. The ability to generalise across different noise levels is essential for successful dialogue policy operation.Although supervised learning from dialogue corpora can be used to learn human decision-making from data, the action selection does not take any future outcomes of the dialogue into considersation, which leads to a sub-optimal behaviour. As an alternative, Reinforcement Learning (RL), which maximizes the expected sum of rewards received over the course of a dialogue, is a much suitable method for learning dialogue policies [14]. The reward in this case measures the degree to which the dialogue is successful.Due to the need of learning with real users through online interactions, an efficient exploration of the state-action space is critical. The Q-function of each state-action pair can be augmented with an estimate of its uncertainty to guide exploration to achieve higher performance and efficient learning [4]. Uncertainty estimates in the policy allow the system to generalise across different noise levels and mitigate errors incurred by speech recognition, therefore resulting in a more robust dialogue manager.Gaussian Processes (GPs) provide an explicit estimate of uncertainty, but are computational intensive and preclude the use for large action spaces [8]. Deep neural network (DNNs), on the other hand, scale much better with data and are computationally less expensive than GPs. Many studies have shown that they are suitable for dialogue management tasks [3,5,23,21]. However, their application in noisy environments is relatively under-explored [16,2]. In this paper, we perform a benchmark of uncertainty estimates for a dialogue domain using Bayesian deep learning [1,18,15,7]. We experiment with and without noise added to the simulated user input to examine generalization capabilities of different approaches and compare it to the state-of-the-art GPSARSA algorithm. The Bayes-by-Backprop algorithm achieves the best performance among the neural networks approaches.2 Uncertainty estimates in deep reinforcement learningIn the case of value-based reinforcement learning, we approximate the expected discounted sum of the future rewards received over the course of a dialogue given an action a in a belief state b:where r t is the one-step reward received at a given time t.The Deep Q-Network (DQN) algorithm models action-value function Q(b, a) using a deep neural networkˆQnetworkˆ networkˆQ(b, a; θ), with weight vector θ ∈ R n , where we iteratively improve the prediction by minimizing the following loss:where the targets y t are:At testing time the system responds with an action that yields the highest Q-value for a given belief state b.To obtain uncertainty estimates from a neural network, Bayesian neural networks (BNNs) can be employed [17]. Instead of having single fixed value weights w in the neural networks, all weights are represented by probability distributions over possible values given observed dialogues D, P (w|D). Uncertainty in the hidden units allows the expression of uncertainty about predictions [1].For exploration, Thompson sampling is used instead of which consists of performing a single stochastic forward pass through the network every time an action needs to be taken. The Q-values given the input belief state b are given by:Taking an expectation under the posterior distribution is equivalent to using an ensemble of an uncountably infinite number of neural networks, which is intractable [1]. We have to resort to sampling-based or stochastic variational inferences.We used in this benchmark five algorithms to extract uncertainty estimates from deep Q-Networks. Four of them can be casted within the variational inference framework:The intractable posterior P (w|D) is approximated with a variational distribution q(w|θ). The parameters are learnt by minimizing the Kullback-Leibler (KL) divergence between the variational approximation q(w|θ) and the true posterior over the weights P (w|D). The resulting cost function is termed as the variational free energy [11]:q(w|θ)We test here four algorithms that can be casted in the variational approximate framework, namely Bayes-by-Backprop [1,16], dropout [6], concrete dropout [7] and α-divergence [15,10].Deep BBQ-Learning. We implement the Bayes By Backprop method with DQN. To propagate the error through a layer that samples from q(w|θ), the reparameterization trick is used [13]. We choose q(w|θ) to be a Gaussian with diagonal covariance with a variational parameter set θ. Given the mean µ i and covariance σ i of q for each weight, a sample from q is obtained by first samplingwhere w (i) is the ith Monte Carlo sample drawn from the variational posterior q(w (i) |θ). For the likelihood term in the objective function Eq. 2, we use the expected square loss.α-Divergences. The approximate inference technique described in the Bayes By Backprop method corresponds to Variational Bayes (VB), which is a particular case of α-divergence, where α → 0 [10]. The α-divergence measures the similarity between two distributions and can take the form:where α ≥ 0.Hernandez-Lobato et al. [10] found that using α = 0 performs better than the VB case, where an approximation with α ≥ 1 will cover all the modes of the true distribution, and the VB case only fits to a local mode, assuming the true posterior is multi-modal [10]. α = 0.5 achieves a balance between the two and has shown to perform best when applied to regression or classification tasks.We experiment with an objective function based on the black box α-divergence (BB-α) energy. We use the reparametrization proposed by [15] :where L α designates the BB-α energy, ˇ L α designates an approximation, and n corresponds to the number of datapoints in the minibatch.Dropout. Another method to obtain uncertainty estimates in deep neural networks is Bayesian inference with dropout [6]. Dropout consists of randomly dropping units (with some probability d) from the neural network during training [20].As in the previous methods, dropout can be analyzed from the variational inference perspective (Equation 2). This comes from the fact that applying a stochastic mask is equivalent to multiplying the weight matrix in a given layer by some random noise. The resulting stochastic weight matrix can be seen as draws from the approximate posterior over weights, replacing the deterministic weight matrix [6].Concrete Dropout. To obtain well-calibrated uncertainty estimates with above method, a grid-search over the dropout probabilities is necessary. However, we can treat a dropout as a part of optimization task obtaining an automatic method of tuning the mask. One method is to continuously relax the dropout's discrete masks and optimize the dropout probability using gradient methods [7]. Dropout d probability becomes one of the optimized parameters. The concrete distribution relaxation z of the Bernoulli random variable becomes:with some temperature t which results in values in the interval [0,1] and u ∼ U(0, 1).Uncertainty estimates can be obtained with random initialization of several neural networks which predict in ensemble uncertainty estimates for neural networks [18]. To improve efficiency, all networks share the same architecture with a different last layer (head) computing Q-values. The algorithm obtained the highest scores in its non-bootstrapped case when all networks share the same memory replay. Here we employ this ensemble variant.To obtain uncertainty estimates GPSARSA needs O(nk 2 ) steps, where n is the total number of data points during training and k is the number of representative data points (k &lt;&lt; n). Training complexity for dropout, concrete dropout and bootstrapped DQNs is O(N ) where N is the number of neural network parameters. Complexity for BBQN is tripled as it requires three sets of parameters.Experiments are conducted using the Cambridge restaurant domain from the PyDial toolkit [22] with a goal-driven user simulator on the semantic level [19]. A user simulator replicates user behavior with sufficient accuracy to optimize model parameters to an acceptable level of performance [24], and is more cost-effective for development and evaluation purposes. We use an error model where confusions to the simulated user input are added. The error model outputs an N-best list of possible user responses.The input for all models is the full dialogue belief state b of size 268 and the output action space consists of 14 possible actions. A linear kernel was used for GPSARSA. We used DQN with two hidden layers of size 130 and 50. The maximum dialogue length was set to 25 turns and γ was 0.99. The Adam optimiser was used with an initial learning rate of 0.001 [12]. The results are averaged over three different runs. Figure 1 shows learning curves for benchmarked models as a function of the training dialogues. From all analysed algorithms, only BBQN reached a performance comparable to state-of-the-art non-parametric approach in terms of the efficiency of exploration as well as the final performance. Moreover, thanks to implicit regularization due to the KL constraint, the learning becomes much more stable comparing to vanilla DQN.Three other analyzed methods, dropout, concrete dropout and bootstrapped approach, did not help improving learning rate over the vanilla algorithm neither do they stabilize exploration. Although with concrete dropout tuning of the dropout probability is automatic, it did not help improve efficiency. We also optimize over number of heads with bootstrapped DQN, however, the performance did not vary substantially yielding the best results with 5 heads.For α-divergences, we find all settings of α do not perform better than VI in general, for k &gt; 1 samples. For clarity we did not show here learning curves. Taking more MC samples decreases the variance of the gradient estimates, and the averaged loss for most updates is closer to the loss obtained when taking a sample close to the mean of the variational distribution q. This implies more updates are necessary to move in the direction of the true posterior distribution p, resulting in slower convergence to an optimal policy. We also investigated the impact of noise by training all models with the simulated user with a 15% semantic error rate, then evaluated on 45% semantic error rate to examine the generalisation capabilities of different algorithms. The final success rates are given in Figure 2 as a function of the training dialogues.The results show that GPSARSA performs best in terms of success rate, followed closely by BBQN. This shows that BBQN generalizes better than ε-greedy algorithms. BBQN has the potential for robust performance, and performs well, even at conditions different from the training conditions. All other methods fall behind substantially with only vanilla DQN being able to reach similar performance at the end of the training. The success rate learning curves for all analyzed models with a 45% confusion rate at testing, and 15% confusion rate during training.
