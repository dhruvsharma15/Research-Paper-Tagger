In the context of large scale visual recognition, it is not uncommon for state-of-the-art convolutional networks to be trained for days or weeks before convergence ( Krizhevsky et al., 2012;Sermanet et al., 2014;Szegedy et al., 2014). Performing exhaustive architecture search is quite challenging and computationally expensive. Furthermore, once a satisfactory architecture has been discovered, it can be extremely difficult to improve upon; small changes to the architecture more often decrease performance than improve it. In architectures containing fully-connected layers, naively increasing the dimensionality of such layers increases the number of parameters between them quadratically, increasing both the computational workload and the tendency towards overfitting.In settings where the domain of interest comprises thousands of classes, improving performance on specific subdomains can prove challenging, as the jointly learned features that succeed on the overall task on average may not be sufficient for correctly identifying the "long tail" of classes, or for making fine-grained distinctions between very similar entities. Side information in the form of metadata -for example, from Freebase ( Bollacker et al., 2008) -often only roughly corresponds to the kind of similarity that would make correct classification challenging. In the context of object classification, visually similar entities may belong to vastly different high-level categories (e.g. a sporting activity and the equipment used to perform it), whereas two entities in the same high-level semantic category may bear little resemblance to one another visually.A traditional approach to building increasingly accurate classifiers is to average the predictions of a large ensemble. In the case of neural networks, a common approach is to add more layers or making existing layers significantly larger, possibly with additional regularization. These strategies present a significant problem in runtime-sensitive production environments, where a classifier must be rapidly  evaluated in a matter of milliseconds to comply with service-level agreements. It is therefore often desirable to increase a classifier's capacity in a way that significantly improves performance while minimally impacting the computational resources required to evaluate the classifier; however, it is not immediately obvious how to satisfy these two competing objectives.We present a method for judiciously adding capacity to a trained neural network using the network's own predictions on held-out data to inform the augmentation of the network's structure. We demon- strate the efficacy of this method by using it to significantly improve upon the performance of a state-of-the-art industrial object recognition pipeline based on Szegedy et al. (2014) with less than 3% extra computational overhead.Given a trained network, we evaluate the network on a held out dataset in order to compute a con- fusion matrix. We then apply spectral clustering (Chung, 1997) to generate a partitioning of the possible labels.We augment the trained network's structure by adding additional stacks of fully connected layers, connected in parallel with the pre-existing stack of fully-connected layers. The output of each "aux- iliary head" is connected by a weight matrix only to a subset of the output units, corresponding to the label clusters discovered by spectral clustering.We train the augmented network by initializing the pre-existing portions of the network (minus the classifier layer's weights and biases) to the parameters of the original network, and by randomly ini- tializing the remaining portions. We train holding the pre-existing weights and biases fixed, learning only the hidden layer weights for the new portions and retraining the classifier layer's weights. This allows for training to focus on making good use of the auxiliary capacity rather than adapting the pre-initialized weights to compensate for the presence of the new hidden units. Note that it is also possible to fine-tune the whole network after training the augmented section, though we did not perform such fine-tuning in the experiments described below.Our method can be seen as similar in spirit to the mixture of experts approach of Jacobs et al. (1991). Rather than jointly learning a gating function as well as experts to be gated, we employ as a starting point a strong generalist network, whose outputs then inform decisions about which specialist networks to deploy for different subsets of classes. Our specialists also do not train with the original data as input but rather a higher-level feature representation output by the original network's convolutional layers.Recent work on distillation ( Hinton et al., 2014), building on earlier work termed model compres- sion ( Bucilu et al., 2006), emphasizes the idea that a great deal of valuable information can be gleaned from the non-maximal predictions of neural network classifiers. Distillation makes use of the averaged overall predictions of several expensive-to-evaluate neural networks as "soft targets" in order to train a single network to both predict the correct label and mimic the overall predictions of the ensemble as closely as possible. As in Hinton et al. (2014), we use the predictions of the model itself, however we use this knowledge in the pursuit of carefully adding capacity to a single, already trained network, rather than mimicking the performance of many networks with one. Our approach is arguably complementary, and could conceivably be applied after distilling an ensemble into a single mimic network in order to further improve fine-grained performance.Our base model consists of the same convolutional Inception architecture employed in GoogLeNet ( Szegedy et al., 2014), plus two fully connected hidden layers of 4,096 rectified lin- ear (ReLU) units each. Our output layer consists of logistic units, one per class.We evaluated the trained network on 9 million images not used during training. Let g j (x) = 1, if example x has ground truth annotation for class j 0, otherwise (1)We compute the following matrix on the hold-out set S:using K = 100. We use the seemingly large value of K = 100 in order to recover annotations for a large fraction of possible classes on at least one example in the hold-out set. We term the detection of class i in the context of ground truth class j a confusion of i with j; the (i, j)th entry of this matrix thus encodes the fraction of the time class i is "confused" with class j on the hold-out set.We also experimented with the matrixwherein we eschew the use of ground truth and only look at co-detections, again with K = 100.We symmetrize either matrix as B = A T A, and apply spectral clustering using B as our similarity matrix, following the formulation of Ng et al. (2002). In all of our experiments, our specialist sub- networks consisted of two layers of 512 ReLUs each.We evaluate our method on an expanded version of the JFT dataset described in Hinton et al. (2014), an internal Google dataset with a training set of approximately 100 million images spanning 17,000 classes.In Table 1, we observe that spectral clustering on the matrix B was able to successfully recover clusters consisting of visually similar entities.We evaluate on a balanced test set with the same number of classes per image. For each of the confusion and co-detection cases, we compare against a network with identical capacity and topol- ogy (i.e. same number of labels per cluster) with labels randomly permuted, in order to assess the importance of the particular partitioning discovered while carefully controlling for the number of parameters being learned. While both methods improve upon the base network, the use of ground truth appears to provide a significant edge. Our best performing network, with 6 specialist heads, increases the number of multiply-adds required for evaluation from 1.52 billion to 1.56 billion, a modest increase of 2.6%.We also provide, in Figure 2, an evaluation of our best performing JFT network against the ImageNet 1,000-class test set, on the subset of JFT classes that can be mapped to classes from the ImageNet task (approximately 660 classes). These results are thus not directly comparable to results obtained on the ImageNet training set; a more direct comparison is left to follow-up work. We have presented a simple and general method for improving upon trained neural network classi- fiers by carefully adding capacity to groups of output classes that the trained model itself considers similar. While we demonstrate results on a computer vision task, this is not an assumption underly- ing the approach, and we plan to extend it to other domains in follow-up work.In these experiments we have allocated a fixed extra capacity to each label group, regardless of the number of labels in that group. Further investigation is needed into strategies for the allocation of capacity to each label group. Seemingly relevant factors include both the cardinality of each group and the amount of training data available for the labels contained therein; however, the difficulty of the discrimination task does not necessarily scale with either of these.In the case of the particular convolutional network we have described, it is not obvious that the best place to connect these auxiliary stacks of hidden layers is following the last convolutional layer. Most of the capacity, and therefore arguably most of the discriminative knowledge in the network, is contained in the fully connected layers, and appealing to this part of the network for augmentation purposes seems natural. Nonetheless, it is possible that one or more layers of group-specific convo- lutional feature maps could be beneficial as well. Note that the augmentation procedure could also theoretically be applied more than once, and not necessarily in the same location. Each subsequent clustering and retraining step could potentially identify a complementary division of the label space, capturing new information.Finally, this can be seen as a small step towards the "conditional computation" envisioned by Bengio (2013), wherein relevant pathways of a large network are conditionally activated based on task relevance. Here we have focused on the relatively large gains to be had with computationally inex- pensive, targeted augmentations. Similar strategies could pave the way towards networks with much higher capacity specialists that are only evaluated when necessary.
