The success of deep learning is to a large part based on advanced and efficient input representations [1,2,3,4]. These representations are sparse and hierarchical. Sparse representations of the input are in general obtained by rectified linear units (ReLU) [5,6] and dropout [7]. The key advantage of sparse representations is that dependencies between coding units are easy to model and to interpret. Most importantly, distinct concepts are much less likely to interfere in sparse representations. Using sparse representations, similarities of samples often break down to co-occurrences of features in these samples. In bioinformatics sparse codes excelled in biclustering of gene expression data [8] and in finding DNA sharing patterns between humans and Neanderthals [9].Representations learned by ReLUs are not only sparse but also non-negative. Non-negative repre- sentations do not code the degree of absence of events or objects in the input. As the vast majority of events is supposed to be absent, to code for their degree of absence would introduce a high level of random fluctuations. We also aim for non-linear input representations to stack models for construct- ing hierarchical representations. Finally, the representations are supposed to have a large number of coding units to allow coding of rare and small events in the input. Rare events are only observed in few samples like seldom side effects in drug design, rare genotypes in genetics, or small customer groups in e-commerce. Small events affect only few input components like pathways with few genes in biology, few relevant mutations in oncology, or a pattern of few products in e-commerce. In sum- mary, our goal is to construct input representations that (1) are sparse, (2) are non-negative, (3) are non-linear, (4) use many code units, and (5) model structures in the input data (see next paragraph).Current unsupervised deep learning approaches like autoencoders or restricted Boltzmann machines (RBMs) do not model specific structures in the data. On the other hand, generative models explain structures in the data but their codes cannot be enforced to be sparse and non-negative. The input representation of a generative model is its posterior's mean, median, or mode, which depends on the data. Therefore sparseness and non-negativity cannot be guaranteed independent of the data. For example, generative models with rectified priors, like rectified factor analysis, have zero posterior probability for negative values, therefore their means are positive and not sparse [10,11]. Sparse priors do not guarantee sparse posteriors as seen in the experiments with factor analysis with Lapla- cian and Jeffrey's prior on the factors (see Tab. 1). To address the data dependence of the code, we employ the posterior regularization method [12]. This method separates model characteristics from data dependent characteristics that are enforced by constraints on the model's posterior.We aim at representations that are feasible for many code units and massive datasets, therefore the computational complexity of generating a code is essential in our approach. For non-Gaussian priors, the computation of the posterior mean of a new input requires either to numerically solve an integral or to iteratively update variational parameters [13]. In contrast, for Gaussian priors the posterior mean is the product between the input and a matrix that is independent of the input. Still the posterior regularization method leads to a quadratic (in the number of coding units) constrained optimization problem in each E-step (see Eq. (3) below). To speed up computation, we do not solve the quadratic problem but perform a gradient step. To allow for stochastic gradients and fast GPU implementations, also the M-step is a gradient step. These E-step and M-step modifications of the posterior regularization method result in a generalized alternating minimization (GAM) algorithm [12]. We will show that the GAM algorithm used for RFN learning (i) converges and (ii) is correct. Correctness means that the RFN codes are non-negative, sparse, have a low reconstruction error, and explain the covariance structure of the data.Our goal is to construct representations of the input that (1) are sparse, (2) are non-negative, (3) are non-linear, (4) use many code units, and (5) model structures in the input. Structures in the input are identified by a generative model, where the model assumptions determine which input structures to explain by the model. We want to model the covariance structure of the input, therefore we choose maximum likelihood factor analysis as model. The constraints on the input representation are enforced by the posterior regularization method [12]. Non-negative constraints lead to sparse and non-linear codes, while normalization constraints scale the signal part of each hidden (code) unit. Normalizing constraints avoid that generative models explain away rare and small signals by noise. Explaining away becomes a serious problem for models with many coding units since their capacities are not utilized. Normalizing ensures that all hidden units are used but at the cost of coding also random and spurious signals. Spurious and true signals must be separated in a subsequent step either by supervised techniques, by evaluating coding units via additional data, or by domain experts.A generative model with hidden units h and data v is defined by its prior p(h) and its likelihood p(v | h). The full model distribution p(h, v) = p(v | h)p(h) can be expressed by the model's posterior p(h | v) and its evidence (marginal likelihood) p(v): p(h, v) = p(h | v)p(v). The representation of input v is the posterior's mean, median, or mode. The posterior regularization method introduces a variational distribution Q(h | v) ∈ Q from a family Q, which approximates the posterior p(h | v). We choose Q to constrain the posterior means to be non-negative and normalized. The full model distribution p(h, v) contains all model assumptions and, thereby, defines which structures of the data are modeled. Q(h | v) contains data dependent constraints on the posterior, therefore on the code.For data {v} = {v 1 , . . . , v n }, the posterior regularization method maximizes the objective F [12]:where D KL is the Kullback-Leibler distance. Maximizing F achieves two goals simultaneously: (1) extracting desired structures and information from the data as imposed by the generative model and (2) ensuring desired code properties via Q ∈ Q.The factor analysis model v = W h + extracts the covari- ance structure of the data. The prior h ∼ N (0, I) of the hidden units (factors) h ∈ R l and the noise ∼ N (0, Ψ) of visible units (observations) v ∈ R m are independent. The model parameters are the weight (loading) matrix W ∈ R 2 1 and the noise covariance matrix Ψ ∈ R m×m . We assume di- agonal Ψ to explain correlations between input components by the hidden units and not by correlated noise. The factor analy- sis model is depicted in Fig. 1. Given the mean-centered data {v} = {v 1 , . . . , v n }, the posterior p(h i | v i ) is Gaussian with mean vector (µ p ) i and covariance matrix Σ p :Figure 1: Factor analysis model: hidden units (factors) h, visible units v, weight matrix W , noiseA rectified factor network (RFN) consists of a single or stacked factor analysis model(s) with con- straints on the posterior. To incorporate the posterior constraints into the factor analysis model, we use the posterior regularization method that maximizes the objective F given in Eq. (1) [12].Like the expectation-maximization (EM) algorithm, the posterior regularization method alternates between an E-step and an M-step. Minimizing the first D KL of Eq. (1) with respect to Q leads to a constrained optimization problem. For Gaussian distributions, the solution with (µ p ) i andΣ p from Eq. (2) is Q(h i | v i ) ∼ N (µ i , Σ) with Σ = Σ p and the quadratic problem:where "≥" is component-wise. This is a constraint non-convex quadratic optimization problem in the number of hidden units which is too complex to be solved in each EM iteration. Therefore, we perform a step of the gradient projection algorithm [14,15], which performs first a gradient step and then projects the result to the feasible set. We start by a step of the projected Newton method, then we try the gradient projection algorithm, thereafter the scaled gradient projection algorithm with reduced matrix [16] (see also [15]). If these methods fail to decrease the objective in Eq. (3), we use the generalized reduced method [17]. It solves each equality constraint for one variable and inserts it into the objective while ensuring convex constraints. Alternatively, we use Rosen's gradient projection method [18] or its improvement [19]. These methods guarantee a decrease of the E-step objective.Since the projection P by Eq. (6) is very fast, the projected Newton and projected gradient up- date is very fast, too. A projected Newton step requires O(nl) steps (see Eq. (7) and P defined in Theorem 1), a projected gradient step requires O(min{nlm, nl 2 }) steps, and a scaled gradient projection step requires O(nl 3 ) steps. The RFN complexity per iteration is O(n(m 2 + l 2 )) (see Alg. 1). In contrast, a quadratic program solver typically requires for the (nl) variables (the means of the hidden units for all samples) O(n 4 l 4 ) steps to find the minimum [20]. We exemplify these values on our benchmark datasets MNIST (n = 50k, l = 1024, m = 784) and CIFAR (n = 50k, l = 2048, m = 1024). The speedup with projected Newton or projected gradient in contrast to a quadratic solver is O(n 3 l 2 ) = O(n 4 l 4 )/O(nl 2 ), which gives speedup ratios of 1.3 · 10 20 for MNIST and 5.2 · 10 20 for CIFAR. These speedup ratios show that efficient E-step updates are essential for RFN learning. Furthermore, on our computers, RAM restrictions limited quadratic program solvers to problems with nl ≤ 20k.The M-step decreases the expected reconstruction errorfrom Eq. (1) with respect to the model parameters W and Ψ. Definitions of C, U and S are given in Alg. 1. The M-step performs a gradient step in the Newton direction, since we want to Algorithm 1 Rectified Factor Network.2: while STOP=false do 3:--E-step1-- 4:for all 1 ≤ i ≤ n do 5:(end for 7:--Constraint Posterior-- 9:(1) projected Newton, (2) projected gradient, (3) scaled gradient projection, (4) generalized reduced method, (5) Rosen's gradient project.--E-step2-- 11:--M-step-- 14:for all 1 ≤ k ≤ m do 17:end for 19:if stopping criterion is met: STOP=true 20: end while Complexity: objective F:allow stochastic gradients, fast GPU implementation, and dropout regularization. The Newton step is derived in the supplementary which gives further details, too. Also in the E-step, RFN learning performs a gradient step using projected Newton or gradient projection methods. These projection methods require the Euclidean projection P of the posterior means {(µ p ) i } onto the non-convex feasible set:The following Theorem 1 gives the Euclidean projection P as solution to Eq. (5).Theorem 1 (Euclidean Projection). If at least one (µ p ) ij is positive for 1 ≤ j ≤ l, then the solution to optimization problem Eq. (5) isIf all (µ p ) ij are non-positive for 1 ≤ j ≤ l, then the optimization problem Eq. (5) has the solution µ ij = √ n for j = arg maxˆjmaxˆmaxˆj {(µ p ) i ˆ j } and µ ij = 0 otherwise.Proof. See supplementary material.Using the projection P defined in Eq. (6), the E-step updates for the posterior means µ i are:where we set for the projected Newton method, and for the projected gradient method H −1 = I. For the scaled gradient projection algorithm with reduced matrix, the set for i consists of all j with µ ij ≤ The reduced matrix H is the Hessian Σ −1 p with columns and rows j fixed to unit vectors e j . The resulting algorithm is a posterior regularization method with a gradient based E-and M-step, leading to a generalized alternating minimization (GAM) algorithm [21]. The RFN learning algorithm is given in Alg. 1. Dropout regularization can be included before E-step2 by randomly setting code units µ ij to zero with a predefined dropout rate (note that convergence results will no longer hold).Convergence of RFN Learning. Theorem 2 states that Alg. 1 converges to a maximum of F.Theorem 2 (RFN Convergence). The rectified factor network (RFN) learning algorithm given in Alg. 1 is a "generalized alternating minimization" (GAM) algorithm and converges to a solution that maximizes the objective F.Proof. We present a sketch of the proof which is given in detail in the supplement. For convergence, we show that Alg. 1 is a GAM algorithm which convergences according to Proposition 5 in [21].Alg. 1 ensures to decrease the M-step objective which is convex in W and Ψ −1 . The update with η = 1 leads to the minimum of the objective. Convexity of the objective guarantees a decrease in the M-step for 0 &lt; η ≤ 1 if not in a minimum. Alg. 1 ensures to decrease the E-step objective by using gradient projection methods. All other requirements for GAM convergence are also fulfilled.Proposition 5 in [21] is based on Zangwill's generalized convergence theorem, thus updates of the RFN algorithm are viewed as point-to-set mappings [22]. Therefore the numerical precision, the choice of the methods in the E-step, and GPU implementations are covered by the proof.Correctness of RFN Learning. The goal of the RFN algorithm is to explain the data and its covariance structure. The expected approximation error E is defined in line 14 of Alg. 1. Theorem 3 states that the RFN algorithm is correct, that is, it explains the data (low reconstruction error) and captures the covariance structure as good as possible. Theorem 3 (RFN Correctness). The fixed point W of Alg. 1 minimizes Tr (Ψ) given µ i and Σ by ridge regression withThe model explains the data covariance matrix byup to an error, which is quadratic in Ψ for Ψ W W T . The reconstruction errorProof. The fixed point equation for the W update isUsing the definition of U and S, we havewhere Tr is the trace. After multiplying out all i T T i in 1/n n i=1 i i , we obtain:For the fixed point of Ψ, the update rule gives:Multiplying the Woodbury identity for W W T + Ψ −1 from left and right by Ψ givesInserting this into the expression for diag (Ψ) and taking the trace givesTherefore for Ψ W W T the error is quadratic in Ψ. W U T = W SW T = U W T follows from fixed point equation U = W S. Using this and Eq. (12), Eq. (11) isi=1Using the trace norm (nuclear norm or Ky-Fan n-norm) on matrices, Eq. (13) states that the left hand side of Eq. (14) is quadratic in Ψ for Ψ W W T . The trace norm of a positive semi-definite matrix is its trace and bounds the Frobenius norm [23]. Thus, for Ψ W W T , the covariance is approximated up to a quadratic error in Ψ according to Eq. (9). The diagonal is exactly modeled.Since the minimization of the expected reconstruction error Tr (Ψ) is based on µ i , the quality of reconstruction depends on the correlation between µ i and v i . We ensure maximal information in µ i on v i by the I-projection (the minimal Kullback-Leibler distance) of the posterior onto the family of rectified and normalized Gaussian distributions.RFNs vs. Other Unsupervised Methods. We assess the performance of rectified factor networks (RFNs) as unsupervised methods for data representation. We compare (1) RFN: rectified factor net- works, (2) RFNn: RFNs without normalization, (3) DAE: denoising autoencoders with ReLUs, (4) RBM: restricted Boltzmann machines with Gaussian visible units, (5) FAsp: factor analysis with Jeffrey's prior (p(z) ∝ 1/z) on the hidden units which is sparser than a Laplace prior, (6) FAlap: factor analysis with Laplace prior on the hidden units, (7) ICA: independent component analysis by FastICA [24], (8) SFA: sparse factor analysis with a Laplace prior on the parameters, (9) FA: standard factor analysis, (10) PCA: principal component analysis. The number of components are fixed to 50, 100 and 150 for each method. We generated nine different benchmark datasets (D1 to D9), where each dataset consists of 100 instances. Each instance has 100 samples and 100 features resulting in a 100×100 matrix. Into these matrices, biclusters are implanted [8]. A bicluster is a pattern of particular features which is found in particular samples like a pathway activated in some samples. An optimal representation will only code the biclusters that are present in a sample. The datasets have different noise levels and different bicluster sizes. Large biclusters have 20-30 sam- ples and 20-30 features, while small biclusters 3-8 samples and 3-8 features. The pattern's signal strength in a particular sample was randomly chosen according to the Gaussian N (1, 1). Finally, to each matrix, zero-mean Gaussian background noise was added with standard deviation 1, 5, or 10. The datasets are characterized by Dx=(σ, n 1 , n 2 ) with background noise σ, number of large biclusters n 1 , and the number of small biclusters n 2 : D1=(1,10,10), D2=(5,10,10), D3=(10,10,10), D4=(1,15,5), D5=(5,15,5), D6=(10,15,5), D7=(1,5,15), D8=(5,5,15), D9= (10,5,15). We evaluated the methods according to the (1) sparseness of the components, the (2) input recon- struction error from the code, and the (3) covariance reconstruction error for generative models. For RFNs sparseness is the percentage of the components that are exactly 0, while for others meth- ods it is the percentage of components with an absolute value smaller than 0.01. The reconstruction error is the sum of the squared errors across samples. The covariance reconstruction error is the Frobenius norm of the difference between model and data covariance. See supplement for more details on the data and for information on hyperparameter selection for the different methods. Tab. 1 gives averaged results for models with 50 (undercomplete), 100 (complete) and 150 (overcomplete) coding units. Results are the mean of 900 instances consisting of 100 instances for each dataset D1 to D9. In the supplement, we separately tabulate the results for D1 to D9 and confirm them with dif- ferent noise levels. FAlap did not yield sparse codes since the variational parameter did not push the Table 1: Comparison of RFN with other unsupervised methods, where the upper part contains meth- ods that yielded sparse codes. Criteria: sparseness of the code (SP), reconstruction error (ER), difference between data and model covariance (CO). The panels give the results for models with 50, 100 and 150 coding units. Results are the mean of 900 instances, 100 instances for each dataset D1 to D9 (maximal value: 999). RFNs had the sparsest code, the lowest reconstruction error, and the lowest covariance approximation error of all methods that yielded sparse representations (SP&gt;10%).  SP  ER  CO  SP  ER  CO  SP  ER  CO  RFN  75±0  249±3  108±3  81±1  68±9  26±6  85±1  17±6  7±6  RFNn  74±0  295±4  140±4  79±0  185±5  59±3  80±0  142±4  35±2  DAE  66±0  251±3  - 69±0  147±2  - 71±0  130±2  - RBM  15±1  310±4  - 7±1  287±4  - 5±0  286±4  - FAsp  40±1 999±63 999±99  63±0 999±65 999±99  80±0 999±65 999±99   FAlap  4±0  239±6 341±19  6±0  46±4 985±45  4±0  46±4 976±53  ICA  2±0  174±2  - 3±1  0±0  - 3±1  0±0  - SFA  1±0  218±5  94±3  1±0  16±1  114±5  1±0  16±1  285±7  FA  1±0  218±4  90±3  1±0  16±1  83±4  1±0  16±1  263±6  PCA  0±0  174±2  - 2±0  0±0  - 2±0 0±0 - absolute representations below the threshold of 0.01. The variational approximation to the Lapla- cian is a Gaussian distribution [13]. RFNs had the sparsest code, the lowest reconstruction error, and the lowest covariance approximation error of all methods that yielded sparse representations (SP&gt;10%). rect (discrimination between tall and wide rectangles), (vi) rect-img (discrimination between tall and wide rectangular images overlayed on random background images), (vii) convex (discrimination be- tween convex and concave shapes), (viii) CIFAR-10 (60k color images in 10 classes), and (ix) NORB (29,160 stereo image pairs of 5 generic categories). For each dataset its size of training, validation and test set is given in the second column of Tab. 2. As preprocessing we only performed median centering. Model selection is based on the validation set performance [26]. The RFNs hyperparam- eters are (i) the number of units per layer from {1024, 2048, 4096} and (ii) the dropout rate from {0.0, 0.25, 0.5, 0.75}. The learning rate was fixed to its default value of η = 0.01. For supervised fine-tuning with stochastic gradient descent, we selected the learning rate from {0.1, 0.01, 0.001}, Table 2: Results of deep networks pretrained by RFNs and other models (taken from [25,26,27,28]). The test error rate is reported together with the 95% confidence interval. The best performing method is given in bold, as well as those for which confidence intervals overlap. The first column gives the dataset, the second the size of training, validation and test set, the last column indicates the number of hidden layers of the selected deep network. In only one case RFN pretraining was significantly worse than the best method but still the second best. In six out of the nine experiments RFN pretraining performed best, where in four cases it was significantly the best.  the masking noise from {0.0, 0.25}, and the number of layers from {1, 3}. Fine-tuning was stopped based on the validation set performance, following [26]. The test error rates together with the 95% confidence interval (computed according to [26]) for deep network pretraining by RFNs and other methods are given in Tab. 2. Fig. 2 shows learned filters. The result of the best performing method is given in bold, as well as the result of those methods for which confidence intervals overlap. RFNs were only once significantly worse than the best method but still the second best. In six out of the nine experiments RFNs performed best, where in four cases it was significantly the best.RFNs in Drug Discovery. Using RFNs we analyzed gene expression datasets of two projects in the lead optimization phase of a big pharmaceutical company [29]. The first project aimed at finding novel antipsychotics that target PDE10A. The second project was an oncology study that focused on compounds inhibiting the FGF receptor. In both projects, the expression data was summarized by FARMS [30] and standardized. RFNs were trained with 500 hidden units, no masking noise, and a learning rate of η = 0.01. The identified transcriptional modules are shown in Fig. 3. Panels A and B illustrate that RFNs found rare and small events in the input. In panel A only a few drugs are genotoxic (rare event) by downregulating the expression of a small number of tubulin genes (small event). The genotoxic effect stems from the formation of micronuclei (panel C and D) since the mitotic spindle apparatus is impaired. Also in panel B, RFN identified a rare and small event which is a transcriptional module that has a negative feedback to the MAPK signaling pathway. Rare events are unexpectedly inactive drugs (black dots), which do not inhibit the FGF receptor. Both findings were not detected by other unsupervised methods, while they were highly relevant and supported decision-making in both projects [29].We have introduced rectified factor networks (RFNs) for constructing very sparse and non-linear input representations with many coding units in a generative framework. Like factor analysis, RFN learning explains the data variance by its model parameters. The RFN learning algorithm is a poste- rior regularization method which enforces non-negative and normalized posterior means. We have shown that RFN learning is a generalized alternating minimization method which can be proved to converge and to be correct. RFNs had the sparsest code, the lowest reconstruction error, and the lowest covariance approximation error of all methods that yielded sparse representations (SP&gt;10%). RFNs have shown that they improve performance if used for pretraining of deep networks. In two pharmaceutical drug discovery studies, RFNs detected small and rare gene modules that were so far missed by other unsupervised methods. These gene modules were highly relevant and supported the decision-making in both studies. RFNs are geared to large datasets, sparse coding, and many representational units, therefore they have high potential as unsupervised deep learning techniques. This supplement contains additional information complementing the main manuscript and is struc- tured as follows: First, the rectified factor network (RFN) learning algorithm with E-and M-step updates, weight decay and dropout regularization is given in Section S2. In Section S3, we proof that the (RFN) learning algorithm is a "generalized alternating minimization" (GAM) algorithm and converges to a solution that maximizes the RFN objective. The correctness of the RFN algorithm is proofed in Section S4. Section S5 describes the maximum likelihood factor analysis model and the model selection by the EM-algorithm. The RFN objective, which has to be maximized, is described in Section S6. Next, RFN's GAM algorithm via gradient descent both in the M-step and the E-step is reported in the Section S7. The following sections S8 and S9 describe the gradient-based M-and E-step, respectively. In Section S10, we describe how the RFNs sparseness can be controlled by a Gaussian prior. Additional information on the selected hyperparameters of the benchmark methods is given in Section S11. The sections S12 and S13 describe the data generation of the benchmark datasets and report the results for three different experimental settings, namely for extracting 50 (undercomplete), 100 (complete) or 150 (overcomplete) factors / hidden units. Finally, Section S14 describes experiments, that we have done to assess the performance of RFN first layer pretraining on CIFAR-10 and CIFAR-100 for three deep convolutional network architectures: (i) the AlexNet [31,32], (ii) Deeply Supervised Networks (DSN) [33], and (iii) our 5-Convolution-Network-In- Network (5C-NIN).Algorithm S2 is the rectified factor network (RFN) learning algorithm. The RFN algorithm calls Algorithm S3 to project the posterior probability p i onto the family of rectified and normalized variational distributions Q i . Algorithm S3 guarantees an improvement of the E-step objective. Projection Algorithm S3 relies on different projections, where a more complicated projection is tried if a simpler one failed to improve the E-step objective. If all following Newton-based gradient projection methods fail to decrease the E-step objective, then projection Algorithm S3 falls back to gradient projection methods. First the equality constraints are solved and inserted into the objective. Thereafter, the constraints are convex and gradient projection methods are applied. This approach is called "generalized reduced gradient method" [17], which is our preferred alternative method. If this method fails, then Rosen's gradient projection method [18] is used. Finally, the method of Haug and Arora [19] is used.First we consider Newton-based projection methods, which are used by Algorithm S3. Algorithm S5 performs a simple projection, which is the projected Newton method with learning rate set to one. This projection is very fast and ideally suited to be performed on GPUs for RFNs with many coding units. Algorithm S4 is the fast and simple projection without normalization even simpler than Algo- rithm S5. Algorithm S6 generalizes Algorithm S5 by introducing step sizes λ and γ. The step size λ scales the gradient step, while γ scales the difference between to old projection and the new pro- jection. For both λ and γ annealing steps, that is, learning rate decay is used to find an appropriate update.If these Newton-based update rules do not work, then Algorithm S7 is used. Algorithm S7 performs a scaled projection with a reduced Hessian matrix H instead of the full Hessian Σ −1 p . For computing H an set is determined, which consists of all j with µ j ≤ The reduced matrix H is the Hessian Σ −1 p with columns and rows j fixed to unit vector e j . The RFN algorithm allows regularization of the parameters W and Ψ (off-diagonal elements) by weight decay. Priors on the parameters can be introduced. If the priors are convex functions, then convergence of the RFN algorithm is still ensured. The weight decay Algorithm S8 can optionally be used after the M-step of Algorithm S2. Coding units can be regularized by dropout. However dropout is not covered by the convergence proof for the RFN algorithm. The dropout Algorithm S9 is applied during the projection between rectifying and normalization. Methods like mini-batches or other stochastic gradient methods are not covered by the convergence proof for the RFN algorithm. However, in [21] it is shown how to generalize the GAM convergence proof to mini-batches as it is shown for the incremental EM algorithm. Dropout and other stochastic gradient methods can be show to converge similar to mini-batches.Input (3)  end for Algorithm S5 Simple Projection: Rectifying and NormalizationGoal perform a scaled Newton step with subsequent projectionGoal perform a scaled projection step with reduced matrixTheorem 4 (RFN Convergence). The rectified factor network (RFN) learning algorithm given in Algorithm S2 is a "generalized alternating minimization" (GAM) algorithm and converges to a solution that maximizes the objective F.Proof. The factor analysis EM algorithm is given by Eq. (81) and Eq. (82) in Section S5. Algo- rithm S2 is the factor analysis EM algorithm with modified the E-step and the M-step. The E-step is modified by constraining the variational distribution Q to non-negative means and by normalizing its means across the samples. The M-step is modified to a Newton direction gradient step.Like EM factor analysis, Algorithm S2 aims at maximizing the negative free energy F, which is [34], which is larger than or equal to zero.(the E-step objective) in its E-step under constraints for non-negative means and normalization. The constraint optimization problem from Section S9.2 for the E-step isThe M-step of Algorithm S2 aims at decreasingAlgorithm S2 performs one gradient descent step in the Newton direction to decrease E, while EM factor analysis minimizes E.From the modification of the E-step and the M-step follows that Algorithm S2 is a Generalized Al- ternating Minimization (GAM) algorithm according to [21]. GAM is an EM algorithm that increases F in the E-step and increases F in the M-step (see also Section S7). The most important require- ments for the convergence of the GAM algorithm according to Theorem 7 (Proposition 5 in [21]) are the increase of the objective F in both the E-step and the M-step. Therefore we first show these two decreases before showing that all requirements of convergence Theorem 7 are met.Algorithm S2 ensures to decrease the M-step objective. Algorithm S2 ensures to decrease the E-step objective. The E-step decrease of Algorithm S2 is performed by Algorithm S3. According to Theorem 14 the scaled projection with reduced matrix en- sures a decrease of the E-step objective for rectifying constraints (convex feasible set). According to Theorem 13 also gradient projection methods ensure a decrease of the E-step objective for rectifying constraints. For rectifying constraints and normalization, the feasible set is not convex because of the equality constraints. To optimize such problems, the generalized reduced gradient method [17] solves each equality constraint for one variable and inserts it into the objective. For our problem Eq. (160) gives the solution and Eq. (161) the resulting convex constraints. Now scaled projection and gradient projection methods can be applied. For rectifying and normalizing constraints, also Rosen's [18] and Haug &amp; Arora's [19] gradient projection method ensures a decrease of the E-step objective since they can be applied to non-convex problems.We show that the requirements as given in Section S7 for GAM convergence according to Theorem 7 (Proposition 5 in [21]) are fulfilled:1. the learning rules, that is, the E-step and the M-step, are closed maps −→ ensured by continuous and continuous differentiable maps, 2. the parameter set is compact −→ ensured by bounding Ψ and W , 3. the family of variational distributions is compact (often described by the feasible set of parameters of the variational distributions) −→ ensured by continuous and continuous dif- ferentiable functions for the constraints and by the bounds on the variational parameters µ and Σ determined by bounds on the parameters and the data, 4. the support of the density models does not depend on the parameter −→ ensured by Gaus- sian models with full-rank covariance matrix, 5. the density models are continuous in the parameters −→ ensured by Gaussian models 6. the E-step has a unique maximizer −→ ensured by the convex, continuous, and continuous differentiable function that is minimized [35,36] together with compact feasible set for the variational parameters, the maximum may be local for non-convex feasible sets stemming from normalization, 7. the E-step increases the objective if not at the maximizer −→ ensured as shown above,8. the M-step has a unique maximizer (this is not required) −→ ensured by minimizing a convex, continuous and continuous differentiable function in the model parameter and a convex feasible set, the maximum is a global maximum, 9. the M-step increases the objective if not at the maximizer −→ ensured as shown above.Since this Proposition 5 in [21] is based on Zangwill's generalized convergence theorem, updates of the RFN algorithm are viewed as point-to-set mappings [22]. Therefore the numerical precision, the choice of the methods in the E-step, and GPU implementations are covered by the proof. That the M-step has a unique maximizer is not required to proof Theorem 4 by Theorem 7. However we obtain an alternative proof by exchanging the variational distribution Q and the parameters (W , Ψ), that is, exchanging the E-step and the M-step. A theorem analog to Theorem 7 but with E-step and M-step conditions exchanged can be derived from Zangwill's generalized convergence theorem [22].The resulting model from the GAM procedure is at a local maximum of the objective given the model family and the family of variational distributions. The solution minimizes the KL-distance between the family of full variational distributions and full model family. "Full" means that both the observed and the hidden variables are taken into account, where for the variational distributions the probability of the observations is set to 1. The desired family is defined as the set of all probability distributions that assign probability one to the observation. In our case the family of variational distributions is not the desired family since some distributions are excluded by the constraints. Therefore the solution of the GAM optimization does not guarantee stationary points in likelihood [21]. This means that we do not maximize the likelihood but minimizeaccording to Eq. (87), where c is a constant independent of Q and independent of the model param- eters.The RFN algorithm is correct if it has a low reconstruction error and explains the data covariance matrix by its parameters like factor analysis. We show in Theorem 5 and Theorem 6 that the RFN algorithm 1. minimizes the reconstruction error given µ i and Σ (the error is quadratic in Ψ);2. explains the covariance matrix by its parameters W and Ψ plus an estimate of the second moment of the coding units S.Since the minimization of the reconstruction error is based on µ i , the quality of reconstruction and covariance explanation depends on the correlation between µ i and v i . The larger the correlation between µ i and v i , the lower the reconstruction error and the better the explanation of the data covariance. We ensure maximal information in µ i on v i by the I-projection (the minimal Kullback- Leibler distance) of the posterior onto the family of rectified and normalized Gaussian distributions.The reconstruction error for given mean values µ i isThe reconstruction error for using the whole variational distribution Q(h i ) instead of its means is Ψ. Below we will derive Eq. (31), which isTherefore Ψ is the reconstruction error for given mean values plus the variance W ΣW T introduced by the hidden variables.Theorem 5 (RFN Correctness: Diagonal Noise Covariance Update). The fixed point W minimizes Tr (Ψ) given µ i and Σ by ridge regression withi=1 F where we used the errorThe model explains the data covariance matrix byup to an error, which is quadratic in Ψ for Ψ W W T . The reconstruction errorProof. The fixed point equation for the W update isUsing the definition of U and S, the fixed point equation Eq. (26) givesTherefore W is a ridge regression estimate, also called generalized Tikhonov regularization esti- mate, which minimizeswhere we used the reconstruction errorWe obtain with this definition of the errorTherefore from the fixed point equation for Ψ with the diagonal update rule followswhere "diag " projects a matrix to a diagonal matrix. From this follows thatConsequently, the fixed point W minimizes Tr (Ψ) given µ i and Σ.After convergence of the algorithmfrom which follows by multiplying the equation from right and left by Ψ thatTherefore we haveIt follows thatThe inequality uses the fact that for positive definite matrices A and B inequality Tr(AB) ≤ Tr(A)Tr(B) holds [37]. Thus, for Ψ W W T the error Tr 1Multiplying the fixed point equation Eq. (26) by S gives U = W S. Therefore we have:Inserting Eq. (34) into the first line of Eq. (30) and Eq. (38) for simplifying the last line of Eq. (30) givesUsing the trace norm (nuclear norm or Ky-Fan n-norm) on matrices, Eq. (37) states that the left hand side is quadratic in Ψ for Ψ W W T . The trace norm of a positive semi-definite matrix is its trace and bounds the Frobenius norm [23]. Furthermore, Eq. (36) states that the left hand side of this equation has zero diagonal entries. Therfore it follows thatholds except an error, which is quadratic in Ψ for Ψ W W T . The diagonal is exactly modeled according to Eq. (36).Therefore the model corresponding to the fixed point explains the empirical matrix of second mo- ments C by a noise part Ψ and a signal part W SW T . Like factor analysis the data variance is explained by the model via the parameters Ψ (noise) and W (signal). i=1 F where we used the errorThe model explains the data covariance matrix byThe reconstruction errorProof. The first part follows from previous Theorem 5. The fixed point equation for the Ψ update isusing Eq. (38) this leads toFrom Eq. (30) follows for the fixed point of Ψ with the full update rule: i=1 from which follows 1 nThus, the error Tr 1We are given the data {v} = {v 1 , . . . , v n } which is assumed to be centered. Centering can be done by subtracting the mean µ from the data. The model is The model includes the observations v ∈ R m , the noise ∈ R m , the factors h ∈ R l , the factor loading matrix W ∈ R m×l , and the noise covariance matrix Ψ ∈ R m×m . Typically we assume that Ψ is a diagonal matrix to explain data covariance by signal and not by noise. The data variance is explained through a signal part W h and through a noise part The parameters of the model are W and Ψ. From the model assumption it follows that if h is given, then only the noise is a random variable and we haveWe want to derive the likelihood of the data under the model, that is, the likelihood that the model has produced the data. Let E denote the expectation of the data including the prior distribution of the factors and the noise distribution. We obtain for the first two moments and the variance:The observations are Gaussian distributed since their distribution is the product of two Gaussian densities divided by a normalizing constant. Therefore, the marginal distribution for v isThe log-likelihood log n i=1 p(v i ) of the data {v} under the modelwhere |.| denotes the absolute value of the determinant of a matrix.To maximize the likelihood is difficult since a closed form for the maximum does not exists. There- fore, typically the expectation maximization (EM) algorithm is used to maximize the likelihood. For the EM algorithm a variational distribution Q is required which estimates the factors given the observations.We consider a single data vector v i . The posterior is also Gaussian with mean (µ p ) i and covariance matrix Σ p :where we used the fact thatΣ ua = Cov(u, a) and Σ au = Cov(a, u) :The EM algorithm sets Q to the posterior distribution for data vector v i :therefore we obtain for standared EMThe matrix inversion lemma (Woodbury identiy) can be used to compute µ i and Σ:Using this identity, the mean and the covariance matrix can be computed as:The EM algorithm maximizes a lower bound F on the log-likelihood:D KL denotes the Kullback-Leibler (KL) divergence [34] which is larger than zero.F is the EM objective which has to be maximized in order to maximize the likelihood. The E- step maximizes F with respect to the variational distribution Q, therefore the E-step minimizesAfter the standard unconstrained E-step, the variational distribution is equal to the posterior, i.e.is zero, thus F is equal to the log-likelihood log p(v i ) (F = log p(v i )). The M-step maximizes F with respect to the parameters (W , Ψ), therefore the M-step maximizesWe next consider again all n samples {v} = {v 1 , . . . , v n }. The expected reconstruction error E for these n data samples isi=1and objective to maximize becomesThe M-step requires to minimize E:where Tr gives the trace of a matrix.The derivatives with respect to the parameters are set to zero for the optimal parameters:andSolving above equations gives:We obtain the following EM updates:n n −1The EM algorithms can be reformulated as:Our goal is to find a sparse, non-negative representation of the input which extracts structure from the input. A sparse, non-negative representation is desired to code only events or objects that have caused the input. We assume that only few events or objects caused the input, therefore, we aim at sparseness. Furthermore, we do not want to code the degree of absence of events or objects. As the vast majority of events and objects is supposed to be absent, to code for their degree of absence would introduce a high level of random fluctuations.We aim at extracting structures from the input, therefore generative models are use as they explicitly model input structures. For example factor analysis models the covariance structure of the data. However a generative model cannot enforce sparse, non-negative representation of the input. The input representation of a generative model is the posterior's mean, median, or mode. Generative models with rectified priors (zero probability for negative values) lead to rectified posteriors. How- ever these posteriors do not have sparse means (they must be positive), that is, they do not yield sparse codes [10]. For example, rectified factor analysis, which rectifies Gaussian priors and selects models using a variational Bayesian learning procedure, does not yield posteriors with sparse means [38,11]. A generative model with hidden units h and data v is defined by its prior p(h) and its likelihood p(v | h). The posterior p(h | v) supplies the input representation of a model by the pos- terior's mean, median, or mode. However, the posterior depends on the data v, therefore sparseness and non-negativity of its means cannot be guaranteed independent of the data. Problem at coding the input by generative models is the data-dependency of the posterior means. is the unknown distribution of observations as determined by the world or the data generation process. This distribution is approximated by samples drawn from the world, namely the training samples. p(h, v) contains all model assumptions like the structures used to model the data, while Q(h, v) contains all data dependent characteristics including data dependent constraints on the posterior.The goal is to achieve Q(h, v) = p(h, v), to obtain (1) a desired structure that is extracted from the data and (2) desired code properties. However in general it is to achieve this identity, therefore we want to minimize the distance between these distributions. We use the Kullback-Leibler (KL) divergence [34] D KL to measure the distance between these distributions. Therefore our objective is D KL (Q(h, v) p(h, v)). Minimizing this KL divergence (1) extracts the desired structure from the data by increasing the likelihood, that is, p v (v) ≈ p(v), and (2) enforces desired code properties by Q(h | v) ≈ p(h | v). Thus, the code derived from Q(h | v) has the desired properties and t extracts the desired input data structures.We now approximate the KL divergence by approximating the expectation over p v (v) by the empir- ical mean of samples {v} = {v 1 , . . . , v n } drawn from p v (v):The last term 1 n n i=1 log p v (v i ) neither depends on Q nor on the model, therefore we will neglect it. In the following, we often abbreviate Q(h | v i ) by Q(h i ) or write Q(h i | v i ), since the hidden variable is based on the observation v i . Similarly we often write p(h i , v i ) instead of p(h, v i ) and even more often p(h i | v i ) instead of p(h | v i ).We obtain the objective F (to be maximized) of the posterior constraint method [12,39,40]:The first line is the negative objective of the posterior constraint method while the third line is the negative Eq. (87) without the term 1 n n i=1 log p v (v i ). F is the objective in our framework which has to be maximized. Maximizing F (1) increases the model likelihood. Thus, the data representation (1) extracts structures from the data as imposed by the generative model while (2) ensuring desired code properties via Q ∈ Q.In the variational framework, Q is the variational distribution and F is called the negative free energy [41]. This physical term is used since variational methods were introduced for quantum physics by Richard Feynman [42]. The hidden variables can be considered as the fictive causes or explanations of environmental fluctuations [43].If p(h | v) ∈ Q, then Q(h | v) = p(h | v) and we obtain the classical EM algorithm. The EM algorithm maximizes the lower bound F on the log-likelihood as seen at the first line of Eq. (88) and ensures in its E-step Q(h | v) = p(h | v).Instead of the EM algorithm we use the Generalized Alternating Minimization (GAM) algorithm [21] to allow for gradient descent both in the M-step and the E-step. The representation of an input by a generative model is the vector of the mean values of the posterior, that is, the most likely hidden variables that produced the observed data. We have to modify the E-step to enforce variational distributions which lead to sparse codes via zero values of the components of its mean vector. Sparse codes, that is, many components of the mean vector are zero, are obtained by enforcing non-negative means. This rectification is analog to rectified linear units for neural networks, which have enabled sparse codes for neural networks. Therefore the variational distributions are restricted to stem from a family with non-negative constraints on the means. To impose constraints on the posterior is known as the posterior constraint method [12,39,40]. The posterior constraint method maximizes the objective both in the E-step and the M-step. The posterior constraint method is computationally infeasible for our approach, since we assume a large number of hidden units. For models with many hidden units, the maximization in the E-step would take too much time. The posterior constraint method does not support fast implementations on GPUs and stochastic gradients, which we want to allow in order to use mini-batches and dropout regularization.Therefore we perform only one gradient descent step both in the E-step and in the M-step. Unfor- tunately, the convergence proofs of the EM algorithm are no longer valid. However we show that our algorithm is a generalized alternating minimization (GAM) method. Gunawardana and Byrne showed that the GAM converges [21] (see also [44]).The following GAM convergence Theorem 7 is Proposition 5 in [21] and proves the convergence of the GAM algorithm to a solution that minimizes −F. with Q X being the unique minimizer. Suppose also that the point-to-set map B is such that all (Q X , θ ) ∈ B(Q X , θ) have Q X = Q X and satisfy (GAM.B):with equality only ifand FB satisfies the GAM and EQ conditions of the GAM convergence theorem, that is, Theorem 3 in [21].Proof. See Proposition 5 in [21].The point-to-set mappings allow extended E-step and M-steps without unique iterates. Therefore, Theorem 7 holds for different implementations, different hardware, different precisions of the algo- rithm under consideration.For a GAM method to converge, we have to ensure that the objective increases in both the E-step and the M-step. Q is from a constrained family of variational distributions, while the posterior and the full distribution (observation and hidden units) are both derived from a model family. The model family is a parametrized family. For our models (i) the support of the density models does not depend on the parameter and (ii) the density models are continuous in their parameters. GAM convergence requires both (i) and (ii). Furthermore, both the E-step and the M-step must have unique maximizers and they increase the objective if they are not at a maximum point.The learning rules, that is, the E-step and the M-step are closed maps as they are continuous func- tions. The objective for the E-step is strict convex in all its parameters for the variational distribu- tions, simultaneously [35,36]. It is quadratic for the mean vectors on which constraints are imposed. The objective for the M-step is convex in both parameters W and Ψ −1 (we sometimes estimate Ψ instead of Ψ −1 ). The objective is quadratic in the loading matrix W . For rectifying only, we guarantee unique global maximizers by convex and compact sets for both the family of desired dis- tributions and the set of possible parameters. For this convex optimization problem with one global maximum. For rectifying and normalizing, the family of desired distributions is not convex due to equality constraints introduced by the normalization. However we can guarantee local unique maximizers.Summary of the requirements for GAM convergence Theorem 7:1. the learning rules, that is, the E-step and the M-step, are closed maps, 2. the parameter set is compact, 3. the family of variational distributions is compact (often described by the feasible set of parameters of the variational distributions),4. the support of the density models does not depend on the parameter, 5. the density models are continuous in the parameters, 6. the E-step has a unique maximizer, 7. the E-step increases the objective if not at the maximizer, 8. the M-step has a unique maximizer (not required by Theorem 7), 9. the M-step increases the objective if not at the maximizer.The resulting model from the GAM procedure is at a local maximum of the objective given the model family and the family of variational distributions. The solution minimizes the KL-distance between the family of full variational distributions and full model family. "Full" means that both the observed and the hidden variables are taken into account, where for the variational distributions the probability of the observations is set to 1. The desired family is defined as the set of all probability distributions that assign probability one to the observation. In our case the family of variational distributions is not the desired family since some distributions are excluded by the constraints. Therefore the solution of the GAM optimization does not guarantee stationary points in likelihood [21]. This means that we do not maximize the likelihood but minimize the KL-distance between variational distributions and model.The gradients in the M-step are:Alternatively, we can estimate Ψ −1 which leads to the derivatives:Scaling the gradients leads to:Only the sumsmust be computed for both gradients.is the estimated covariance matrix (matrix of second moments for zero mean).The generalized EM algorithm update rules are:i=1 E-step:Instead of gradient ascent, we now consider a Newton update step. The Newton update for finding the roots ofwhere η is a small step size and H is the Hessian of f with respect to v evaluated at v n . We denote the update direction by Proof. The M-step objective is the expected reconstruction error E, which is according to Eq. (69)where Tr gives the trace of a matrix. This is a quadratic function in W , as stated in the theorem.The Hessian H W of (2E) with respect to W as a vector is:where ⊗ is the Kronecker product of matrices. H W is positive definite, thus the problem is convex in W . The inverse of H W isFor the product of the inverse Hessian with the gradient we have:If we apply a Newton update, then the update direction for W in the M-step isThis is the exact EM update if the step-size η is 1. Since the objective is a quadratic function in W , one Newton update would lead to the exact solution.We define the expected approximation error byΨ as parameter. Theorem 9 (Newton Update for Noise Covariance). The Newton update direction for Ψ as param- eter in the M-step isAn update with ∆Ψ (η = 1) leads to the minimum of the M-step objective E.Proof. The M-step objective is the expected reconstruction error E, which is according to Eq. (69)where Tr gives the trace of a matrix.Sinceisthe minimum of E with respect to Ψ. Therefore an update with ∆Ψ = E −Ψ leads to the minimum.The Hessian H Ψ of (2E) with respect to Ψ as a vector is:The expected approximation error E is a sample estimate for Ψ, therefore we have Ψ ≈ E. The Hessian may not be positive definite for some values of E, like for small values of E. In order to guarantee a positive definite Hessian, more precisely an approximation to it, for minmization, we setand obtainWe derive an approximate Newton update that is very close to the Newton update.The inverse of the approximated H Ψ isFor the product of the inverse Hessian with the gradient we have:If we apply a Newton update, then the update direction for Ψ in the M-step isThis is the exact EM update if the step-size η is 1.Theorem 10 (Newton Update for Inverse Noise Covariance). The M-step objective E is convex in Ψ −1 . The Newton update direction for Ψ −1 as parameter in the M-step isA first order approximation of this Newton direction for Ψ in the M-step isAn update with ∆Ψ (η = 1) leads to the minimum of the M-step objective E.Proof. The M-step objective is the expected reconstruction error E, which is according to Eq. (69)where Tr gives the trace of a matrix.Sinceisthe minimum of E with respect to Ψ −1 . Therefore an update with ∆Ψ = E − Ψ leads to the minimum.The Hessian H Ψ −1 of (2E) with respect to Ψ −1 as a vector is:Since the Hessian is positive definite, the E-step objective E is convex in Ψ −1 , which is the first statement of the theorem.The inverse of H Ψ −1 isFor the product of the inverse Hessian with the gradient we have:If we apply a Newton update, then the update direction for Ψ −1 in the M-step isWe now can approximate the update for Ψ by the first terms of the Taylor expansion:We obtain for the update of ΨThis is the exact EM update if the step-size η is 1.The Newton update derived from Ψ −1 as parameter is the Newton update for Ψ. Consequently, the Newton direction for both Ψ and Ψ −1 is in the M-stepS9 Gradient-based E-StepThe representation of data vector v by the model is the variational mean vector µ q . In order to obtain sparse codes we want to have non-negative µ q . We enforce non-negative mean values by constraints and optimize by projected Newton methods and by gradient projection methods. Non-negative constraints correspond to rectifying in the neural network field. Therefore we aim to construct sparse codes in analogy to the rectified linear units used for neural networks.We constrain the variational distributions to the family of normal distributions with non-negative mean components. Consequently we introduce non-negative or rectifying constraints:where the inequality "≥" holds component-wise.However generative models with many coding units face a problem. They tend to explain away small and rare signals by noise. For many coding units, model selection algorithms prefer models with coding units which do not have variation and, therefore, are removed from the model. Other coding units hardly contribute to explain the observations. The likelihood is larger if small and rare signals are explained by noise, than the likelihood if coding units are use to explain such signals. Coding units without variance are kept on their default values, where they have maximal contribution to the likelihood. If they are used for coding, they deviate from their maximal values for each sample.In accumulation these deviations decrease the likelihood more than it is increased by explaining small or rare signals. For our RFN models the problem can become severe, since we aim at models with up to several tens of thousands of coding units. To avoid the explaining away problem, we enforce the selected models to use all their coding units on an equal level. We do that by keeping the variation of each noise-free coding unit across the training set at one. Consequently, we introduce a normalization constraint for each coding unit 1 ≤ j ≤ l:This constraint means that the noise-free part of each coding unit has variance one across samples.We will derive methods to increase the objective in the E-step both for only rectifying constraints and for rectifying and normalization constraints. These methods ensure to reduce the objective in the E-step to guarantee convergence via the GAM theory. The resulting model from the GAM pro- cedure is at a local maximum of the objective given the model family and the family of variational distributions. The solution minimizes the KL-distance between the family of full variational distribu- tions and full model family. "Full" means that both the observed and the hidden variables are taken into account.The E-step maximizes F with respect to the variational distribution Q, therefore the E-step min- imizes the Kullback-Leibler divergence (KL-divergence) [34] Rectifying constraints introduce non-negative constraints. The minimization with respect to Q(h i ) gives the constraint minimization problem:where µ i is the mean vector of Q(h i ).Rectifying and normalizing constraints introduce non-negative constraints and equality constraints. The minimization with respect to Q(h i ) gives the constraint minimization problem:where µ i is the mean vector of Q(h i ).First we consider the families from which the model and from which the variational distributions stem. The posterior of the model with Gaussian prior p(h) is Gaussian (see Section S5):To be as close as possible to the posterior distribution, we restrict Q to be from a Gaussian family:For Gaussians, the Kullback-Leibler divergence between Q and p isThis Kullback-Leibler divergence is convex in the mean vector µ q and the covariance matrix Σ q of Q, simultaneously [35,36].We now minimize Eq. (138) with respect to Q. For the moment we do not care about the constraints introduced by non-negativity and by normalization. Eq. (138) has a quadratic form in µ q , where Σ q does not enter, and terms in Σ q , where µ q does not enter. Therefore we can separately minimize for Σ q and for µ q .For the minimization with respect to Σ q , we requireandFor optimality the derivative of the objective D KL (Q p) with respect to Σ q must be zero:This givesWe often drop the index q since for 1 ≤ i ≤ n all covariance matrices Σ q are equal to Σ p .The mean vector µ q of Q is the solution of the minimization problem:which is equivalent toThe derivative and the Hessian of this objective is:S9.3 E-step for Mean with Rectifying ConstraintsRectifying is realized by non-negative constraints. The mean vector µ q of Q is the solution of the minimization problem:This is a convex quadratic minimization problem with non-negativity constraints (convex feasible set).If λ is the Lagrange multiplier for the constraints, then the dual isThe Karush-Kuhn-Tucker conditions require for the optimal solution for each component 1 ≤ j ≤ l:Further the derivative of the Lagrangian with respect to µ giveswhich can be written asThis minimization problem cannot be solved directly. Therefore we perform a gradient projection or projected Newton step to decrease the objective.To decrease the objective, we perform a gradient projection or a projected Newton step. We will base our algorithms on Euclidean least distance projections. If projected onto convex sets, these projections do not increase distances. The Euclidean projection onto the feasible set is denoted by P, that is, the map that takes µ p to its nearest point µ (in the L 2 -norm) in the feasible set.For rectifying constraints, the projection P (Euclidean least distance projection) of µ p onto the convex feasible set is given by the solution of the convex optimization problem:s.t. µ ≥ 0 .The following Theorem 11 shows that update Eq. (153) is the projection P defined by optimization problem Eq. (152). Theorem 11 (Projection: Rectifying). The solution to optimization problem Eq. (152), which defines the Euclidean least distance projection, isProof. For the projection we have the minimization problem:The derivative with respect to µ isThe Karush-Kuhn-Tucker (KKT) conditions require for the optimal solution that for each constraint j:If 0 &lt; (µ p ) j then Eq. (156) requires 0 &lt; µ j because the Lagrangian λ j is larger than or equal to zero: 0 ≤ λ j . From the KKT conditions Eq. (157) follows that λ j = 0 and, therefore, 0 Therefore the solution of problem Eq. (152) isThis finishes the proof.If we also consider normalizing constraints, then we have to minimize all KL-divergences simulta- neously. The normalizing constraints connect the single optimization problems for each sample v i .For the E-step, we obtain the minimization problem:The "≥"-sign is meant component-wise. The l equality constraints lead to non-convex feasible sets. The solution to this optimization problem are the means vectors µ i of Q(h i ).Generalized Reduced Gradient. The equality constraints can be solved for one variable which is then inserted into the objective. The equality constraint gives for each 1 ≤ j ≤ l:i=2 i=2These equations can be inserted into the objective and, thereby, we remove the variables µ 1j . We have to ensure that the µ 1j exist byi=2These constraints define a convex set feasible set. To solve the each equality constraints for a variable and insert it into the objective is called generalized reduced gradient method [17]. For solving the reduced problem, we can use methods for constraint optimization were we now ensure a convex feasible set. These methods solve the original problem Eq. (159). We only require an improvement of the objective with a feasible value. For the reduced problem, we perform one step of a gradient projection method.Gradient Projection Methods. Also for the original problem Eq. (159), gradient projection meth- ods can be used. The gradient projection method has been generalized by Rosen to non-linear con- straints [18] and was later improved by [19]. The gradient projection algorithm of Rosen works for non-convex feasible sets. The idea is to linearize the nonlinear constraints and solve the problem. Subsequently a restoration move brings the solution back to the constraint boundaries.To decrease the objective, we perform a gradient projection, a projected Newton step, or a step of the generalized reduced method. We will base our algorithms on Euclidean least distance projections.If projected onto convex sets, these projections do not increase distances. The Euclidean projection onto the feasible set is denoted by P, that is, the map that simultaneously takes {(µ p ) i } to the nearest points {µ i } (in the L 2 -norm) in the feasible set.For rectifying and normalizing constraints the projection (Euclidean least distance projection) of {(µ p ) i } onto the non-convex feasible set leads to the optimization problem, we see that the objective contains the sum ij µ 2 ij . The constraints enforce this sum to be constant. Therefore inserting the equality constraints into the objective, optimization problem Eq. (162) is equivalent toThe following Theorem 12 shows that updates Eq. (164) and Eq. (165) form the projection defined by optimization problem Eq. (162). Theorem 12 (Projection: Rectifying and Normalizing). If at least one (µ p ) ij is positive for 1 ≤ j ≤ l, then the solution to optimization problem Eq. (162), which defines the Euclidean least distance projection, isˆµIf all (µ p ) ij are non-positive for 1 ≤ j ≤ l, then the optimization problem Eq. (162) has the solutionProof. In the following we show that updates Eq. (164) and Eq. (164) are the projection onto the feasible set. For the projection of {(µ p ) i } onto the feasible set, we have the minimization problem:The feasible set is non-convex because of the quadratic equality constraint. The Lagrangian with multiplier λ ≥ 0 isThe Karush-Kuhn-Tucker (KKT) conditions require for the optimal solution:The derivative of L with respect to µ ij isWe multiply this equation by µ ij and obtain:The KKT conditions give λ ij µ ij = 0, therefore this term can be removed from the equation. Next we sum over i:Using the equality constraint 1/n n i=1 µ 2 ij = 1 and dividing by 2 and gives:Solving for τ j leads to:We immediately see, that if µ ij = 0 then (µ p ) ij = − n 2 λ ij &lt; 0. Therefore we can assume µ ij &gt; 0. Multiplying Eq. (174) with µ ij and using the KKT conditions givess=1 Therefore (µ p ) ij µ ij and 1 n n s=1 (µ p ) sj µ sj have the same sign or µ ij = 0. Since 0 ≤ µ ij , we de- duce that (µ p ) ij and 1 n n s=1 (µ p ) sj µ sj have the same sign or µ ij = 0. Since the sum is independent of i, all (µ p ) ij with µ ij &gt; 0 have the same sign for 1 ≤ i ≤ n. Solving Eq. (174) for µ ij givesI. If all (µ p ) ij are non-positive for 1 ≤ j ≤ l, then the sum 1 n n s=1 (µ p ) sj µ sj is negative. From the first order derivative of the Lagrangian in Eq. (169), we can compute the second order derivativeWe inserted the expression of Eq. (173) for τ j . Since all mixed second order derivatives are zero, the (projected) Hessian of the Lagrangian is diagonal with negative entries. Therefore it is strict negative definite. Thus, the second order necessary conditions cannot be fulfilled. The minimum is a border point of the constraints.For each j for which all (µ p ) ij are non-positive for 1 ≤ j ≤ l, optimization problem Eq. (163) defines a plane that has a normal vector in the positive orthant (hyperoctant). For such a j the corre- sponding equality constraint defines a hypersphere. Minimization means that the plane containing the solution is parallel to the original plane and should be as close to the origin as possible. If we move the plane parallel from the origin into the positive orthant, then the first intersection with the hypersphere isThis is the solution for µ ij with 1 ≤ j ≤ l to our minimization problem.II. If one (µ p ) ij is positive, then from Eq. (174) with this (µ p ) ij follows that 1 n n s=1 (µ p ) sj µ sj is positive, otherwise Eq. (174) has only negative terms on the left hand side. In particular, the second order necessary conditions are always fulfilled as Eq. (177) is positive. For (µ p ) ij &lt; 0 it follows from Eq. (174) that λ ij &gt; 0 and from the KKT conditions that µ ij = 0. For (µ p ) ij &gt; 0 it follows from Eq. (174) that µ ij &gt; 0 and from the KKT conditions that λ ij = 0. Therefore we define:We write the solution asWe now use the equality constraint:Solving for α j gives:Therefore the solution isThis finishes the proof.The projected gradient descent or gradient projection algorithm [14,15] performs first a gradient step and then projects the result to the feasible set. The projection onto the feasible set is denoted by P, that is, the map that takes µ into the nearest point (in the L 2 -norm) in the feasible set to µ. The feasible set must be convex, however later we will introduce gradient projection methods for non-convex feasible sets.The gradient projection method is in our caseThe Lipschitz constant for the gradient is Theorem 13 (Theorem 5.4.5 in [15]). The sufficient decrease condition(e.g. with α = 10 −4 ) holds for all λ such thatProof. See [15].Theorem 13 guarantees that we can increase the objective by gradient projection in the E-step, except the case where we already reached the maximum.For a fast upper bound on the maximal eigenvalue we useandwhere the latter follows fromImproved methods for finding an appropriate λ by line search methods have been proposed [45,46]. We use a search with λ = β t with t = 0, 1, 2, . . . and β = 2 −1 or β = 10 −1 .A special version of the gradient projection method is the generalized reduced method [17]. This method is able to solve our optimization problem with equality constraints. The gradient projec- tion method has been generalized by Rosen to non-linear constraints [18]. The gradient projection algorithm of Rosen can also be used for a region which is not convex. The idea is to linearize the nonlinear constraints and solve the problem. Subsequently a restoration move brings the solution back to the constraint boundaries. Rosen's gradient projection method was improved by [19]. These methods guarantee that we can increase the objective in the E-step for non-convex feasible sets, except the case where we already reached the maximum. These algorithms for non-convex feasible sets will only give a local maximum. Also the GAM algorithm will only find a local maximum.Both the scaled gradient projection algorithm and the projected Newton method were proposed in [16]. We follow [15].The idea is to use a Newton update instead of the a gradient update:H −1 can be an arbitrary strict positive definite matrix. If we set H −1 = Σ p , then we have a Newton update of the projected Newton method [16]. For λ = 1 we obtainThe search direction for the unconstrained problem can be rotated by H −1 to be orthogonal to the direction of decrease in the inactive directions for the constrained problem.To escape this possible problem, an set is introduced which contains all j with µ j ≤ All columns and rows of the Hessian having an index in the set are fixed to e j . After sorting the indices of the set together, they form a block which is the sub-identity matrix. H is set to the Hessian Σ p where the set columns and rows are replaced by unit vectors.The following Theorem 14 is Lemma 5.5.1 in [15]. Theorem 14 states that the objective decreases using the reduced Hessian in the projected Newton method for convex feasible sets.Theorem 14 (Lemma 5.5.1 in [15]). The sufficient decrease conditionholds for all λ smaller than a bound depending on H andProof. See [15].In practical applications, a proper λ is found by line search. The projected Newton method uses λ = 1 to set [16]:Following [47,46] we use the following very general update rule, which includes the gradient pro- jection algorithm, the scaled gradient projection algorithm, and the projected Newton method.We use following update for the E-step:We have to project twice since the equality constraint produces a manifold in the parameter space.We iterate this update until we see a decrease of the objective in the E-step:For the constraints we have only to optimize the mean vector µ to ensurecan be sufficient if minimizing Σ k+1 = Σ p ensuresWe use following schedule:1.•2.•3.•4.•5.• H −1 = R(Σ p )• λ ∈ (0, 1]• γ =∈ (0, 1] R(Σ p ) denotes the reduced matrix (Hessian or a positive definite) according to the pro- jected Newton method or the scaled gradient projection algorithm. For convex feasible sets we can guarantee at this level already an increase of the objective at the E-step.•This is the gradient projection algorithm. In particular we include the generalized reduced method and Rosen's gradient projection method. At this step we guarantee an increase of the objective at the E-step even for non-convex feasible sets because we also use complex methods for constraint optimization.Step 5. ensures an improvement if only using rectifying constraints according to the theory of projected Newton methods [15]. Step 6. ensures an improvement if using both rectifying constraints and normalizing constraints, because we use known methods for constraint optimization. To set µ k+1 = µ k is sufficient to increase the objective at the E-step if Σ k+1 = Σ p decreases the KL divergence. However we will not always set µ k+1 = µ k to avoid accumulation points outside the solution set.We assume h is Gaussian with covariance M and mean ξ h ∼ N (ξ, M ) .(204)We derive the posterior for this prior.The likelihood is Gaussian since a affine transformation of a Gaussian random variable is again a Gaussian random variable and the convolution of two Gaussians is Gaussian, too. Thus, v = W h + is Gaussian if h and are both Gaussian. For the prior moments we haveand for the likelihood of v we obtain the momentsWe need some algebraic identities to derive the posterior. The Woodbury matrix identity givesThe performance of rectified factor networks (RFNs) as unsupervised methods for data representa- tion was compared with:(1) RFN: rectified factor networks, (2) RFNn: RFNs without normalization, (3) DAE: denoising autoencoders with rectified linear units, (4) RBM: restricted Boltzmann machines with Gaussian visible units and hidden binary units, (5) FAsp: factor analysis with Jeffrey's prior (p(z) ∝ 1/z) on the hidden units which is sparser than a Laplace prior, (6) FAlap: factor analysis with Laplace prior on the hidden units,  The number of components are fixed to 50, 100 or 150.We generated nine different benchmark data sets (D1 to D9), where each data set consists of 100 instances for averaging the results. Each instance consists of 100 samples and 100 features resulting in a 100×100 data matrix. Into these data matrices, structures are implanted as biclusters [8]. A bicluster is a pattern consisting of a particular number of features which is found in a particular number of samples. The size of the bicluster is given by the number of features that form the pattern and by the number of samples in which the pattern is found. The data sets had different noise levels and different bicluster sizes. We considered large and small bicluster sizes, where large biclusters have 20-30 samples and 20-30 features, while small biclusters have 3-8 samples and 3-8 features.The signal strength (scaling factor) of a pattern in a sample was randomly chosen according to the Gaussian N (1, 1). Finally, to each data matrix background noise was added, where the noise is distributed according to a zero-mean Gaussian with standard deviation 1, 5, or 10. The data sets are described in Tab. S4. The remaining components of the spanning outer product vectors were drawn by N (0, 0.01).             We assess the performance of RFN first layer pretraining on CIFAR-10 and CIFAR-100 for three deep convolutional network architectures: (i) the AlexNet [32], (ii) Deeply Supervised Networks (DSN) [33], and (iii) our 5-Convolution-Network-In-Network (5C-NIN).Both CIFAR datasets contain 60k 32x32 RGB-color images, which were divided into 50k train and 10k test sets, split between 10 (CIFAR10) and 100 (CIFAR100) categories. Both datasets are preprocessed by global contrast normalization and ZCA whitening [48]. Additionally, the datasets were augmented by padding the images with four zero pixels at all borders. For data augmentation, at the beginning of every epoch, images in the training set were distorted by random translation and random flipping in horizontal and vertical directions. For the AlexNet, we neither preprocessed nor augmented the datasets.Inspired by the Network In Network approach [49], we constructed a 5-Convolution-Network-In- Network (5C-NIN) architecture with five convolutional layers, each followed by a 2x2 max-pooling layer (stride 1) and a multilayer perceptron (MLP) convolutional layer. ReLUs were used for the convolutional layers and dropout for regularization. For weight initialization, learning rates, and learning policies we used same strategy as in the AlexNet [28]. The networks were trained using mini-batches of size 100 and 128 for 5C-NIN and AlexNet, respectively.For RFN pretraining, we randomly extracted 5x5 patches from the training data to construct 192 filters for DSN and 5C-NIN while 32 for AlexNet. These filters constitute the first convolutional layer of each network which is then trained using default setting. For assessing the improvement by RFNs, we repeated training with randomly initialized weights in the first layer. The results are presented in Tab. S11. For comparison, the lower panel of the table reports the performance of the currently top performing networks: Network In Network (NIN, [49]), Maxout Networks (MN, [48]) and DeepCNiN [50]. In all cases pretraining with RFNs decreases the test error rate. Table S11: The upper panel shows results of convolutional deep networks with first layer pretrained by RFN ("RFN") and with first layer randomly initialized ("org"). The first column gives the net- work architecture, namely, AlexNet, Deeply Supervised Networks (DSN), and our 5-Convolution- Network-In-Network (5C-NIN). The test error rates are reported (for CIFAR-100 DSN model was missing 
