While deep learning is remarkably successful on percep- tual tasks, it was also shown to be vulnerable to adversar- ial perturbations of the input. These perturbations denote noise added to the input that was generated specifically to fool the system while being quasi-imperceptible for humans. More severely, there even exist universal perturbations that are input-agnostic but fool the network on the majority of inputs. While recent work has focused on image classifica- tion, this work proposes attacks against semantic image seg- mentation: we present an approach for generating (univer- sal) adversarial perturbations that make the network yield a desired target segmentation as output. We show empirically that there exist barely perceptible universal noise patterns which result in nearly the same predicted segmentation for arbitrary inputs. Furthermore, we also show the existence of universal noise which removes a target class (e.g., all pedestrians) from the segmentation while leaving the seg- mentation mostly unchanged otherwise. Note that the prediction would look very similar for other images when perturbed with the same noise (see Figure 3).While deep learning has led to significant performance increases for numerous visual perceptual tasks [10,14,20,25] and is relatively robust to random noise [6], several studies have found it to be vulnerable to adversarial per- turbations [24,9,17,22,2]. Adversarial attacks involve generating slightly perturbed versions of the input data that fool the classifier (i.e., change its output) but stay almost imperceptible to the human eye. Adversarial perturbations transfer between different network architectures, and net- works trained on disjoint subsets of data [24]. Furthermore, Papernot et al. [18] showed that adversarial examples for a network of unknown architecture can be constructed by training an auxiliary network on similar data and exploiting the transferability of adversarial examples.Prior work on adversarial examples focuses on the task of image classification. In this paper, we investigate the ef- fect of adversarial attacks on tasks involving a localization component, more specifically: semantic image segmenta- tion. Semantic image segmentation is an important method- ology for scene understanding that can be used for example for automated driving, video surveillance, or robotics. With the wide-spread applicability in those domains comes the risk of being confronted with an adversary trying to fool the system. Thus, studying adversarial attacks on semantic seg- mentation systems deployed in the physical world becomes an important problem.Adversarial attacks that aim at systems grounded in the physical world should be physically realizable and incon- spicuous [22]. One prerequisite for physical realizability is that perturbations do not depend on the specific input since this input is not known in advance when the perturbations (which need to be placed in the physical world) are deter-mined. This work proposes a method for generating image- agnostic universal perturbations. Universal perturbations have been proposed by Moosavi-Dezfooli et al. [16]; how- ever, we extend the idea to the task of semantic image seg- mentation. We leave further prerequisites for physical real- izability as detailed by Sharif et al. [22] to future work.An attack is inconspicuous if it does not raise the sus- picion of humans monitoring the system (at least not under cursory investigation). This requires that the system inputs are modified only subtly, and, for a semantic image seg- mentation task, also requires that system output (the scene segmentation) looks mostly as a human would expect for the given scene. If an adversary's objective is to remove all occurrences of a specific class (e.g., an adversary trying to hide all pedestrians to deceive an emergency braking sys- tem) then the attack is maximally inconspicuous if it leaves the prediction for all other classes unchanged and only hides the target class. We present one adversarial attack which ex- plicitly targets this dynamic target segmentation scenario.While inconspicuous attacks require that target scenes mostly match what a human expects, we also present an attack yielding an static target segmentations. This attack generates universal perturbations that let the system output always essentially the same segmentation regardless of the input, even when the input is from a completely different scene (see Figure 1). The main motivation for this experi- ment is to show how fragile current approaches for seman- tic segmentation are when confronted with an adversary. In practice, such attacks could be used in scenarios in which a static camera monitors a scene (for instance in surveillance scenarios) as it would allow an attacker to always output the segmentation of the background scene and blend out all activity like, e.g., burglars robbing a jewelry shop.We summarize our main contributions as follows:are generalizable: they fool unseen validation images with high probability. Controlling the capacity of universal perturbations is important for achieving this generalization from small training sets.• We show that universal perturbations generated for a fixed target segmentation have a local structure that re- sembles the target scene (see Figure 4).Let f θ be a function with parameters θ. Moreover, let x be an input of f θ , f θ (x) be the output of f θ , and y true be the corresponding ground-truth target. More specifi- cally for the scenario studied in this work, f θ denotes a deep neural network, x an image, f θ (x) the conditional probability p(y|x; θ) encoded as a class probability vec- tor, and y true a one-hot encoding of the class. Furthermore, let J cls (f θ (x), y true ) be the basic classification loss such as cross-entropy. We assume that J cls is differentiable with re- spect to θ and with respect to x.• We show the existence of (targeted) universal perturba- tions for semantic image segmentation models. Their existence was not clear a priori because the recep- tive fields of different output elements largely overlap. Thus perturbations cannot be chosen independently for each output target. This makes the space of adversar- ial perturbations for semantic image segmentation pre- sumably smaller than for recognition tasks like image classification and the existence of universal perturba- tions even more surprising.• We propose two efficient methods for generating these universal perturbations. These methods optimize the perturbations on a training set. The objective of the first methods is to let the network yield a fixed target segmentation as output. The second method's objec- tive is to leave the segmentation unchanged except for removing a designated target class.Semantic image segmentation denotes a dense predic- tion task that addresses the "what is where in an image?" question by assigning a class label to each pixel of the im- age. Recently, deep learning based approaches (oftentimes combined with conditional random fields) have become the dominant and best performing class of methods for this task [14,13,30,3,28,4]. In this work, we focus on one of the first and most prominent architectures, the fully convolu- tional network architecture FCN-8s introduced by Long et al. [14] for the VGG16 model [23].The FCN-8s architecture can roughly be divided into two parts: an encoder part which transforms a given image into a low resolution semantic representation and a decoder part which increases the localization accuracy and yields the fi- nal semantic segmentation at the resolution of the input im- age. The encoder part is based on a VGG16 pretrained on ImageNet [21] where the fully connected layers are rein- terpreted as convolutions making the network "fully convo- lutional". The output of the last encoder layer can be in- terpreted as a low-resolution semantic representation of the image and is the input to five upsampling layers which re- cover the high spatial resolution of the image via successive bilinear-interpolation (FCN-32s). For FCN-8s, additionally two parallel paths merge higher-resolution, less abstract lay- ers of the VGG16 into the upsampling path via convolutions and element-wise summation. This enables the network to utilize features with a higher spatial resolution.• We show empirically that the generated perturbations Let ξ denote an adversarial perturbation for an input x and let x adv = x + ξ denote the corresponding adversarial example. The objective of an adversary is to find a pertur- bation ξ which changes the output of the model in a desired way. For instance the perturbation can either make the true class less likely or a designated target class more likely. At the same time, the adversary typically tries to keep ξ quasi- imperceptible by, e.g., bounding its ∞ -norm. The first method for generating adversarial examples was proposed by Szegedy et al. [24]. While this method was able to generate adversarial examples successfully for many inputs and networks, it was also relatively slow computa- tionally since it involved an L-BFGS-based optimization. Since then, several methods for generating adversarial ex- amples have been proposed. These methods either maxi- mize the predicted probability for all but the true class or minimize the probability of the true class.Goodfellow et al. [9] proposed a non-iterative and hence fast method for computing adversarial perturbations. This fast gradient-sign method (FGSM) defines an adversarial perturbation as the direction in image space which yields the highest increase of the linearized cost function under ∞ -norm. This can be achieved by performing one step in the gradient sign's direction with step-width ε:Here, ε is a hyper-parameter governing the distance be- tween original image and adversarial image. FGSM is a targeted method. This means that the adversary is solely trying to make the predicted probability of the true class smaller. However, it does not control which of the other classes becomes more probable.Kurakin et al. [11] proposed an extension of FGSM which is iterative and targeted. The proposed least- likely method (LLM) makes the least likely class y LL = arg min y p(y|x) under the prediction of the model more probable. LLM is in principle not specific for the least- likely class y LL ; it can rather be used with an arbitrary tar- get class y target . The method tries to find x adv which max- imizes the predictive probability of class y target under f θ . This can be achieved by the following iterative procedure:Dezfooli et al. [16] proposed a method for generating uni- versal, image-agnostic perturbations Ξ that, when added to arbitrary data points, fool deep nets on a large fraction of images. The method for generating these adversarial pertur- bations is based on the adversarial attack method DeepFool [17]. DeepFool is applied to a set of m images (the train set). These images are presented sequentially in a round- robin manner to DeepFool. For the first image, DeepFool identifies a standard image-dependent perturbation. For subsequent images, it is checked whether adding the pre- vious adversarial perturbation already fools the classifier; if yes the algorithm continues with the next image, other- wise it updates the perturbation using DeepFool such that also the current image becomes adversarial. The algorithm stops once the perturbation is adversarial on a large fraction of the train set.The authors show impressive results on ImageNet [21], where they show that the perturbations are adversarial for a large fraction of test images, which the method did not see while generating the perturbation. One potential short- coming of the approach is that the attack is not targeted, i.e., the adversary cannot control which class the classi- fier shall assign to an adversarial example. Moreover, for high-resolution images and a small train set, the perturba- tion might overfit the train set and not generalize to unseen test data since the number of "tunable parameters" is pro- portional to the number of pixels. Thus, high-resolution images will need a large train set and a large computational budget. In this paper, we propose a method which over- comes these shortcomings.For semantic image segmentation, the loss is a sum over the spatial dimensions (i, j) ∈ I of the target such as:Here α denotes a step size and all entries of ξ are clipped after each iteration such that their absolute value remains smaller than ε. We use α = 1 throughout all experiments. Concurrent with this work, adversarial examples have been extended to semantic image segmentation and object detec- tion [27,8]. Moreover, training with adversarial examples has been applied to mammographic mass segmentation to reduce overfitting [32].For the methods outlined above, the adversarial per- turbation ξ depends on the input x. Recently, Moosavi- In this section, we describe how to find an input x adv for f θ such that J ss (f θ (x adv ), y target ) becomes minimal, i.e., how an adversary can do quasi-imperceptible changes to the in- put such that it achieves a desired target segmentation y target . We start by describing how an adversary can choose y target .In principle, an adversary may choose y target arbitrar- ily. Crucially, however, an adversary may not choose y target based on y true since the ground-truth is also unknown to the adversary. Instead, the adversary may use y pred = f θ (x) as basis as we assume that the adversary has access to f θ .As motivated in Section 1, typical scenarios involve an adversary whose primary objective is to hide certain kinds of objects such as, e.g., pedestrians. As a secondary objec- tive, an adversary may try to perform attacks that are in- conspicuous, i.e., do not call the attention of humans mon- itoring the system (at least not under cursory investigation) [22]. Thus the input must be modified only subtly. For a semantic image segmentation task, however, it is also re- quired that the output of the system looks mostly as a human would expect for the given scene. This can be achieved, for instance, by keeping y target as similar as possible to ywhere the primary objective does not apply. We define two different ways of generating the target segmentation:An alternative formulation which takes into considera- tion that the primary objective (hiding objects) and the sec- ondary objective (being inconspicuous) are not necessarily equally important can be achieved by a modified version of the loss including a weighting parameter ω:Static target segmentation: In this scenario, the adver- sary defines a fixed segmentation, such as the system's pre- diction at a time step t 0 , as target for all subsequent time steps: yThis target segmentation is suited for instance in situations where an adversary wants to attack a system based on a static camera and wants to hide suspicious activity in a certain time span t &gt; t 0 that had not yet started at time t 0 .Here, ω = 1 lets the adversary solely focus on removing target-class predictions, ω = 0 forces the adversary only to keep the background constant, and J ω Dynamic target segmentation: In situations involving ego-motion, a static target segmentation is not suited as it would not account for changes in the scene caused by the movement of the camera. In contrast, dynamic tar- get segmentation aims at keeping the network's segmen- tation unchanged with the exception of removing certain target classes. Let o be the class of objects the adver- sary wants to hide, and let I o = {(i, j) | f θ (x ij ) = o} and I bg = I \ I o . We assign y ss = 0.5J ss for ω = 0.5.An additional issue for J ss (and J filling the gaps left in the target segmentation by removing elements predicted to be o using a nearest-neighbor heuris- tic. An illustration of the adversarial target generation is shown in Figure 2. ss ) is that there is poten- tially competition between different target pixels, i.e., the gradient of the loss for (i 1 , j 1 ) might point in the opposite direction as the loss gradient for (i 2 , j 2 ). Standard classifi- cation losses such as the cross entropy in general encourage target predictions which are already correct to become more confident as this reduces the loss. This is not necessarily desirable in face of competition between different targets. The reason for this is that loss gradients for making correct predictions more confident might counteract loss gradients which would make wrong predictions correct. Note that this issue does not exist for adversaries targeted at image clas- sification as there is essentially only a single target output. To address this issue, we set the loss of target pixels which are predicted as the desired target with a confidence above τ to 0 [26]. Throughout this paper, we use τ = 0.75.Before turning to image-agnostic universal perturba- tions, we first define how an adversary might choose an image-dependent perturbation. Given y target , we formulate the objective of the adversary as follows:In this section, we propose a method for generating uni- versal adversarial perturbations Ξ in the context of seman- tic segmentation. The general setting is that we generate Ξ on a set of m training inputsThe constraint limits the adversarial example x + ξ to have at most an ∞ -distance of ε to x. Let Clip ε {ξ} im- plement the constraint |ξ ij | ≤ ε by clipping all entries of ξ to have at most an absolute value of ε. Based on this, we can define a targeted iterative adversary analogously to the least-likely method (see Section 2.2): k=1 , where y target,k was generated with either of the two methods presented in Section 3.1. We are interested in the general- ization of Ξ to test inputs x for which it was not optimized and for which no target y target exists. This generalization to inputs for which no target exists is required because gen- erating y target would require evaluating f θ which might not be possible at test time or under real-time constraints. We propose the following extension of the attack presented in Section 3.2: Figure 2. Illustration of an adversary generating a dynamic target segmentation for hiding pedestrians.the loss gradient averaged over the entire training data. A potential issue of this approach is overfitting to the train- ing data which would reduce generalization of Ξ to unseen inputs. Overfitting is actually likely given that Ξ has the same dimensionality as the input image and is thus high- dimensional. We adopt a relatively simple regularization approach by enforcing Ξ to be periodic in both spatial di- mensions. More specifically, we enforce for all i, j ∈ I the constraints Ξ i,j = Ξ i+h,j and Ξ i,j = Ξ i,j+w for a pre- defined spatial periodicity h, w. This can be achieved by optimizing a proto-perturbationˆΞperturbationˆ perturbationˆΞ of size h × w and tile it to the full Ξ. This results in a gradient averaged over the training data and all tiles:which consists of 3475 publicly available labeled RGB im- ages (2975 for training and 500 for validation) with a res- olution of 2048 × 1024 pixels from 44 different cities. We used the pixel-wise fine annotations covering 19 frequent classes. For computational reasons, all images and labels were downsampled to a resolution of 1024 × 512 pixels, where for images a bilinear interpolation and for labels a nearest-neighbor approach was used for down-sampling. We trained the FCN-8s network architecture (see Section 2.1) for semantic image segmentation on the whole train- ing data and achieved a class-wise intersection-over-union (IoU) on the validation data of 64.8%. We generated the universal perturbations on (subsets of) the training data and evaluated them on unseen validation data. When not noted otherwise, we used ε = 10 in the experiments. This value of ε was also used by Moosavi- Dezfooli et al. [16] and corresponds to a level of noise which is only perceptible for humans at closer inspection. Moreover, we set the number of iterations to n = 60.with R, S denoting the number of tiles per dimension andAs we will show in Section 4, the quality of the gener- ated universal perturbation depends crucially on the size m of the train set. As our method for generating universal per- turbations does not require ground-truth labels, we may in principle use arbitrary large unlabeled data sets. Neverthe- less, we also investigate how well universal perturbations can be generated for small m since large m requires con- siderable computational resources and also more queries to f θ , which might increase monetary costs or the risk of being identified.We evaluated the proposed adversarial attacks against se- mantic image segmentation on the Cityscapes dataset [5], Static Target Segmentation As Cityscapes does not in- volve static scenes, we evaluated an even more challeng- ing scenario: namely to output a static target scene seg- mentation which has nothing in common with the actual input scene present in the image. For this, we selected an arbitrary ground-truth segmentation (monchenglad- bach 000000 026602 gtFine) from Cityscapes as target. We set the number of training images to m = 2975, which corresponds to the number of images in the Cityscapes train set. Moreover, we used the unweighted loss J ss , and did not use periodic tiles, i.e., h = 512, w = 1024. An illustra- tion for this setting on unseen validation images is shown in Figure 3. The adversary achieved the desired target segmen- tation nearly perfectly when adding the universal perturba- tion that was generated on the training images. This is even more striking as for a human, the original scene, which has nothing in common with the target scene, remains clearly dominant. Figure 4 shows an illustration of the generated universal perturbation for ε = 20. This perturbation is highly struc- tured and the local structure depends strongly on the tar- get class. When comparing the perturbation with the static 2 5 10 20 Training data 60.9% 82.0% 92.7% 97.2% Validation data 60.9% 80.3% 91.0% 96.3% Table 1. Success rate of static target segmentation for different val- ues of ε. The generated perturbations achieve nearly the same suc- cess rate on unseen validation data as on the training data.Dynamic Target Segmentation In this experiment, we focused on an adversary which tries to hide all pedestrians (Cityscapes class "person") in an image while leaving the segmentation unchanged otherwise. When not noted other- wise, we set the number of training images to m = 1700 (this value corresponds to the number of images containing pedestrians in the Cityscapes train set), the periodic tile size to h = w = 512 and use J ω target segmentation, it is fairly easy to recognize the struc- ture of the target in the perturbation. For instance, man- made structures such as buildings and fences correspond to mostly horizontal and vertical edges. This property indi- cates that the adversarial attack might exploit the (generally desirable) robustness of deep networks to contrast changes. This allows low contrast noise structures to have stronger impact than the high-contrast structures in the actual image. ss with ω = 0.9999 as motivated empirically (see Figure 6 and Table 2 and 3). An illustra- tion for this setting on unseen validation images is shown in Figure 5. We note that qualitatively, the adversary succeeds in removing nearly all pedestrian pixels while leaving the background mostly unchanged. However, closer inspection by a human would probably raise suspicion as the predicted segmentation looks relatively inhomogeneous. Table 1 shows a quantitative analysis of the success rate for different values of ε. Here, we define the success rate as the categorical accuracy between static target segmentation and predicted segmentation of the network on the adversar- ial example. The success rate on training and validation data is nearly on par, which shows that overfitting is not an issue even for high-dimensional perturbations. This is probably due to the large number of training images and the consis- tent target. Unsurprisingly, larger ε leads to higher success rates. The value ε = 10 strikes a good balance between high success rate and being quasi-imperceptible.For quantifying how well an adversary achieves its pri- mary objective of hiding a target class, we measure which percentage of the pixels that were predicted as pedestrians on the original input are assigned to any of the other classes for the adversarial example ("Pedestrian pixels hidden"). We measure the categorical accuracy on background pix- els (i.e., pixels that were not predicted as pedestrians on the original input) between dynamic adversarial target segmen- tation and the segmentation predicted by the network on the adversarial example ("Background pixels preserved"). This quantifies the secondary objective of being inconspicuous by preserving the background. Note that this comparison does not involve the ground-truth segmentation; we solely measure if the network's original background segmentation is preserved. Figure 6 shows how the periodic tile-size and m, the number of training images, affects the results of the adver- sary. In general, more training images and smaller tile-sizes increase the number of hidden pedestrian pixels. This indi- cates that failures in hiding pedestrian pixels on validation data are mostly due to overfitting to the training data; in fact the adversary succeeds in hiding nearly 100% of all pedes- trian pixels on the train set for any combination of number of training images and tile-size (not shown). The number of background pixels preserved typically decreases with in-primary and secondary objective, is investigated in Table 3: the larger ω, the more pedestrian pixels are hidden (but the background is preserved less well). Since the number of pedestrian pixels is considerably smaller than the number of background pixels, setting ω close to 1, e.g., ω = 0.9999 presents a reasonable trade-off. In contrast, the unweighted loss J ss with no ω (ω = no) fails since it focuses too much on preserving the background. Figure 6. Evaluation of universal perturbations on dynamic target segmentation for different tile-sizes and number of train images (between 100 and 1700) on validation data (ε = 10, ω = 0.9999). More training images improve generalization to validation data. Smaller tile sizes increase the percentage of pedestrian pixels re- moved at the cost of preserving the background less well. For comparison, image-dependent non-periodic perturbations are also shown, which nearly perfectly achieve both objectives.2 5 10 20 Pedestrian hidden 40% 93% 100% 100% Background pres. 95% 84% 87% 89% Pedestrian hidden 34% 81% 92% 93% Background pres. 94% 85% 86% 87%Generalizability We have tested the effect of the univer- sal perturbation generated for Cityscapes on CamVid [1] (without any fine-tuning on CamVid). An average of 78% of the pixels are transformed to the adversarial target for the static target segmentation. For dynamic target segmen- tation, an average of 84.5% pedestrian pixels are hidden and 79.6% of the background pixels are preserved. Thus, the perturbations generalize to a similar dataset with only a small decrease in performance. Moreover, we have eval- uated the FCN's static target universal perturbation on a PSPNet [29]. Adding the universal perturbation reduced the IoU between PSPNet's predictions and the ground truth on Cityscapes from 75.8% to 8.8%. However, the IoU between the prediction and the adversarial target was also only 9.5%. In summary, the universal perturbation generalizes over net- works as an untargeted attack but not as a targeted attack.  creased score on hiding pedestrians. As this is also the case on training images, it is likely an underfitting or optimiza- tion issue which could be improved in the future by alter- native regularization methods (other than periodic noise) or more sophisticated adversarial attacks. For the presented method and m = 1700 , a tile-size of 512 × 512 achieves a good trade-off and is used in the remaining experiments. Table 2 illustrates the influence of the maximum noise level ε. Values of ε below 10 clearly correspond to an un- derfitting regime as the adversary is not capable of hiding all pedestrian pixels on the train data. For ε = 10, failures of the adversary in hiding pedestrian pixels on validation data are mostly due to overfitting (see above). Additional capacity in the perturbation (ε = 20) is then used by the adversary to preserve the background even better but does not help in reducing overfitting. The influence of param- eter ω, which allows controlling the trade-off between the We have proposed a method for generating universal ad- versarial perturbations that change the semantic segmenta- tion of images in close to arbitrary ways: an adversary can achieve (approximately) the same desired static target seg- mentation for arbitrary input images that have nothing in common. Moreover, an adversary can blend out certain classes (like pedestrians) almost completely while leaving the rest of the class map nearly unchanged. These results emphasize the necessity of future work to address how ma- chine learning can become more robust against (adversarial) perturbations [31,19,12] and how adversarial attacks can be detected [15,7]. This is especially important in safety- or security-critical applications. On the other hand, the pre- sented method does not directly allow an adversarial attack in the physical world since it requires that the adversary is able to precisely control the digital representation of the scene. While first works have shown that adversarial attacks might be extended to the physical world [11] and deceive face recognition systems [22], a practical attack against, e.g., an automated driving or surveillance system has not been presented yet. Investigating whether such practical at- tacks are feasible presents an important direction for future work. Furthermore, investigating whether other architec- tures for semantic image segmentation [13,30,3,28,4] are less vulnerable to adversarial perturbations is equally im- portant.In this supplementary material, we show additional higher-resolution illustrations of Figure 3 and Figure 6. We show three examples for a static target segmentation which correspond to the images where the approach worked best (Section B) and worst (Section C), and a randomly selected image (Section D). Similarly, we show three examples for a dynamic target segmentation which correspond to the images where the approach worked best (Section E) and worst (Section F), and a randomly selected image (Section G). Moreover, we also show the predictions of the network on the noise itself in Section H.  
