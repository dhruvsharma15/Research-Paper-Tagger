Deep neural networks have shown impressive results in a lot of tasks in computer vision, natural language processing, and information retrieval. However, their success is conditioned on the availability of exhaustive amounts of labeled data, while for many tasks such a data is not available. Hence, unsupervised and semi-supervised methods are becoming increasingly attractive.Using weak or noisy supervision is a straightfor- ward approach to increase the size of the training data. For instance in web search, for the task of ranking, the ideal training data would be rankings of documents ordered by relevance for a large set of queries. However, it is not practical to collect such a data in large scale and only a small set of judged query-document pairs is available. However, for this task, the output of heuristic methods (Dehghani et al., 2017c) or clickthrough logs (Joachims, 2002) can be used as weak or noisy signals along with a small amount of labeled data to train learning to rank models. This is usually done by pre-training the network on weak data and fine-tuning it with true labels (Dehghani et al., 2017c;Severyn and Moschitti, 2015a). However, these two independent stages do not leverage the full capacity of information from true labels. For instance, in the pet-raining stage there is no handle to control the extent to which the data with weak labels contribute in the learning process, while they can be of different quality.In this paper, we propose a semi-supervised method that leverages a small amount of data with true labels along with a large amount of data with weak labels. Our proposed method has three main components: A weak annotator, which can be a heuristic model, a weak classifier, or even human via crowdsourcing and it is employed to annotate massive amount of unlabeled data, a target network which uses a large set of weakly annotated instances by weak annotator to learn the main task, and a confidence network which is trained on a small human-labeled set to estimate confidence scores for instances annotated by weak annotator. We train target network and confidence network in a multi-task fashion.In a joint learning process, target network and confidence network try to learn a suitable represen- tation of the data and this layer is shared between them as a two-way communication channel. The target network tries to learn to predict the label of the given input under the supervision of the weak an- notator. In the same time, the output of confidence network, which are the confidence scores, define the magnitude of the weight updates to the target network with respect to the loss computed based on labels from weak annotator, during the back- propagation phase of the target network. This way, confidence network helps target network to avoid mistakes of her teacher, i.e. weak annotator, by down-weighting the weight updates from weak la- bels that do not look reliable to confidence network.From a meta-learning perspective (Dehghani et al., 2017b), the goal of the confidence network trained jointly with the target network is to calibrate the learning rate for each instance in the batch. I.e., the weights w w w of the target network f w at step t+1 are updated as follows: b w w wt+1 =w w wt − lt bOur experimental results suggest that the proposed method is more effective in leveraging large amounts of weakly labeled data compared to traditional fine-tuning in both tasks. We also show that explicitly controlling the weight updates in the target network with the confidence network leads to faster convergence since the filtered supervision signals are more solid and less noisy.In the following, in Section 2, we introduce the general architecture of our model and explain the training process. Then, we describe the details of the applications to which we apply our model in Section 3. In Section 4 we present the experimental setups for each of the tasks along with its results and analysis. We then review related works and conclude the paper.In the following, we describe our recipe for semi-supervised learning of neural networks, in a scenario where along with a small human-labeled training set a large set of weakly labeled instances is leveraged. Formally, given a set of unlabeled training instances, we run a weak annotator to generate weak labels. This gives us the training set U . It consists of tuples of training instances τ i and their weak labels˜ylabels˜ labels˜y i , i.e. U ={(τ i ,˜ y i ),...}.For a small set of training instances with true labels, we also apply the weak annotator to generate weak labels. This creates the training set V , consisting of triplets of training instances τ j , their weak labels˜ylabels˜ labels˜y j , and their true labels y j , i.e. V = {(τ j , ˜ y j ,y j ),...}. We can generate a large amount of training data U at almost no cost using the weak annotator. In contrast, we have only a limited amount of data with true labels, i.e.In our proposed framework we train a multi-task neural network that jointly learns the confidence score of weak training instances and the main task using controlled supervised signals. The high-level representation of the model is shown in Figure 1: it comprises a weak annotator and two neural networks, namely the confidence network and the target network.The goal of the weak annotator is to provide weak labels˜ylabels˜ labels˜y i for all the instances τ i ∈ U ∪V . We have this assumption that˜ythat˜ that˜y i provided by the weak annotator are imperfect estimates of true labels y i , where y i are available for set V , but not for set U . Figure 1: Learning from controlled weak supervision: Our proposed multi-task network for learning a target task in a semi-supervised fashion, using a large amount of weakly labeled data and a small amount of data with true labels. Faded parts of the network are disabled during the training in the corresponding mode. Red-dotted arrows show gradient propagation. Parameters of the parts of the network in red frames get updated in the backward pass, while parameters of the network in blue frames are fixed during the training.The goal of the confidence network is to estimate the confidence score˜cscore˜ score˜c j of training instances. It is learned on triplets from training set V : input τ j , its weak label˜ylabel˜ label˜y j , and its true label y j . The score˜cscore˜ score˜c j is then used to control the effect of weakly annotated training instances on updating the parameters of the target network in its backward pass during backpropagation.The target network is in charge of handling the main task we want to learn, or in other words, approximating the underlying function that predicts the correct labels. Given the data instance, τ i and its weak label˜ylabel˜ label˜y i from the training set U , the target network aims to predict the labeî y i . The target network parameter updates are based on noisy labels assigned by the weak annotator, but the magnitude of the gradient update is based on the output of the confidence network.Both networks are trained in a multi-task fashion alternating between the full supervision and the weak supervision mode. In the full supervision mode, the parameters of the confidence network get updated using batches of instances from training set V . As depicted in Figure 1b, each training instance is passed through the representation layer mapping inputs to vectors. These vectors are concatenated with their corresponding weak labels˜ylabels˜ labels˜y j generated by the weak annotator. The confidence network then estimates˜cestimates˜ estimates˜c j , which is the probability of taking data instance j into account for training the target network.In the weak supervision, mode the parameters of the target network are updated using training set U . As shown in Figure 1a, each training instance is passed through the same representation learning layer and is then processed by the supervision layer which is a part of the target network predicting the label for the main task. We also pass the learned representation of each training instance along with its corresponding label generated by the weak anno- tator to the confidence network to estimate the confi- dence score of the training instance, i.e. ˜ c i . The con- fidence score is computed for each instance from set U . These confidence scores are used to weight the gradient updating target network parameters or in other words the step size during back-propagation.It is noteworthy that the representation layer is shared between both networks, so besides the regularization effect of layer sharing which leads to better generalization, sharing this layer lays the ground for the confidence network to benefit from the largeness of set U and the target network to utilize the quality of set V .Our optimization objective is composed of two terms: (1) the confidence network loss L c , which captures the quality of the output from the confi- dence network and (2) the target network loss L t , which expresses the quality for the main task.Both networks are trained by alternating between the weak supervision and the full supervision mode. In the full supervision mode, the parameters of the confidence network are updated using training instance drawn from training set V . We use cross-entropy loss function for the confidence network to capture the difference between the predicted confidence score of instance j, i.e. ˜ c j and the target score c j :The target score c j is calculated based on the difference of the true and weak labels with respect to the main task.In the weak supervision mode, the parameters of the target network are updated using training instances from U . We use a weighted loss function, L t , to capture the difference between the predicted labeî y i by the target network and target label˜ylabel˜ label˜y i : where L i is the task-specific loss on training in- stance i and˜cand˜ and˜c i is the confidence score of the weakly annotated instance i, estimated by the confidence network. Note that˜cthat˜ that˜c i is treated as a constant during the weak supervision mode and there is no gradient propagation to the confidence network in the backward pass (as depicted in Figure 1a). We minimize two loss functions jointly by randomly alternating between full and weak supervision modes (for example, using a 1:10 ratio). During training and based on the chosen supervision mode, we sample a batch of training instances from V with replacement or from U without replacement (since we can generate as much train data for set U ). Since in our setups usually &gt;&gt; the training process oversamples the instance from V .The key point here is that the "main task" and "confidence scoring" task are always defined to be close tasks and sharing representation will benefit the confidence network as an implicit data augmentation to compensate the small amount of data with true labels. Besides, we noticed that updating the representation layer with respect to the loss of the other network acts as a regularization for each of these networks and helps generalization for both target and confidence network since we try to capture all tasks (which are related tasks) and less chance for overfitting.We also investigated other possible setups or training scenarios. For instance, we tried updating the parameters of the supervision layer of the target network using also data with true labels. Or instead of using alternating sampling, we tried training the target network using controlled weak supervision signals after the confidence network is fully trained. As shown in the experiments the architecture and training strategy described above provide the best performance.In this section, we apply our semi-supervised method to two different tasks: document ranking and sentiment classification. For each task, we start with an introduction of the task, followed by the setup of the target network, i.e. description of the representation learning layer and the supervision layer.This task is the core information retrieval problem which is challenging as it needs to capture the notion of relevance between query and documents. We employ a state-of-the-art pairwise neural ranker ar- chitecture as target network (Dehghani et al., 2017c). In this setting, each training instance τ consists of a query q, and two documents d + and d − . The labels, ˜ y and y, are scalar values indicating the probability of d + being ranked higher than d − with respect to q.The general schema of the target network is illustrated in Figure 2.The Representation Learning Layer is a setup proposed in (Dehghani et al., 2017c). This layer is a function ψ, which learns the representation of the input data instances, i.e. (q,d, and consists of three components: (1) an embedding function ε ∶ V → R m (where V denotes the vocabulary set and m is the number of embedding dimensions), (2) a weighting function ω ∶ V → R, and (3) a compositionality function ⊙ ∶ (R m , R) n → R m . More formally, the function ψ is defined as:where t q d i and t i denote the i th term in query q respectively document d. The embedding function ε maps each term to a dense m-dimensional real value vector, which is learned during the training phase. The weighting function ω assigns a weight to each term in the vocabulary.The compositionality function ⊙ projects a set of n embedding-weighting pairs to an m-dimensional representation, independent from the value of n: whereas s q,d is the score obtained from the weak annotator. To train the confidence network, the target label c j is calculated using the absolute difference of the true label and the weak label: c j =1− j − ˜ y j where y j is calculated similar tõ y i , but s q,d comes from true labels created by humans.which is in fact the normalized weighted element- wise summation of the terms' embedding vectors.It has been shown that having global term weight- ing function along with embedding function im- proves the performance of ranking as it simulates the effect of inverse document frequency (IDF), which is an important feature in information retrieval (Dehghani et al., 2017c). In our experiments, we initial- ize the embedding function ε with word2vec embed- dings ( Mikolov et al., 2013) pre-trained on Google News and the weighting function ω with IDF.This task aims to identify the sentiment (e.g., positive, negative, or neutral) underlying an individual sentence. Our target network is a convolutional model similar to ( Deriu et al., 2017;Severyn and Moschitti, 2015a,b;Deriu et al., 2016). Each training instance τ consists of a sentence s and its sentiment label˜ylabel˜ label˜y. The architecture of the target network is illustrated in Figure 3 The Supervision Layer receives the vector representation of the inputs processed by the repre- sentation learning layer and outputs a predictioñ y. We opt for a simple fully connected feed-forward network with l hidden layers followed by a softmax. Each hidden layer z k in this network computeswhere W k and b k denote the weight matrix and the bias term corresponding to the k th hidden layer and α(.) is the non-linearity. These layers follow a sigmoid output. We employ the weighted cross entropy loss:The Representation Learning Layer learns a representation for the input sentence s and is shared between the target network and confidence network. It consists of an embedding function ε ∶ V → R m , where V denotes the vocabulary set and m is the number of embedding dimensions.This function maps the sentence to a matrix S ∈ R m× , where each column represents the em- bedding of a word at the corresponding position in the sentence. Matrix S is passed through a convolu- tion layer. In this layer, a set of f filters is applied to a sliding window of length h over S to generate a fea- ture map matrix O. Each feature map o i for a given filter F is generated bywhere S[i∶i+h] denotes the concatenation of word vectors from position i to i+h. The concatenation of all o i produces a feature vector o∈R . Thewhere B U is a batch of instances from U , and˜cand˜ and˜c i is the confidence score of the weakly annotated instance i, estimated by the confidence network.The Weak Annotator is BM25 ( Robertson et al., 2009) which is a well-performing unsupervised retrieval method. In the pairwise documents ranking setup, ˜ y i for a given instance τ j =(q,dis the probability of document d + being ranked higher than d − , based on the scores obtained from the annotator:vectors o are then aggregated over all f filters into a feature map matrix O ∈R f ×((s . We also add a bias vector b ∈ R f to the result of a convolution. Each convolutional layer is followed by a non-linear activation function (we use ReLU (Nair and Hinton, 2010)) which is applied element-wise. Afterward, the output is passed to the max pooling layer which operates on columns of the feature map matrix O returning the largest value: pool(o i ) ∶ R 1×((s → R (see Figure 3). This architecture is similar to the state-of-the-art model for Twitter sentiment classification from (Severyn and Moschitti, 2015bDeriu et al., 2016).We initialize the embedding matrix with word2vec embeddings ( Mikolov et al., 2013) pretrained on a collection of 50M tweets.The Supervision Layer is a feed-forward neural network similar to the supervision layer in the ranking task (with different width and depth) but with softmax instead of sigmoid as the output layer which returnsˆyreturnsˆ returnsˆy i , the probability distribution over all three classes. We employ the weighted cross entropy loss:where B U is a batch of instances from U , and˜cand˜ and˜c i is the confidence score of the weakly annotated instance i, and K is a set of classes.The Weak Annotator for the sentiment classifica- tion task is a simple unsupervised lexicon-based method ( Hamdan et al., 2013;Kiritchenko et al., 2014). We use SentiWordNet03 ( Baccianella et al., 2010) to assign probabilities (positive, negative and neutral) for each token in set U . Then a sentence- level distribution is derived by simply averaging the distributions of the terms, yielding a noisy label˜y label˜ label˜y i ∈ R , where is the number of classes, i.e.We empirically found that using soft labels from the weak annotator works better than assign- ing a single hard label. The target label c j for the confidence network is calculated by using the mean absolute difference of the true label and the weak label: c j =1− the target network trained on the weakly labeled data and fine-tuned on true labeled data.Layer Fine-Tuning, i.e. the target network trained only on weakly labeled data and the supervision layer is fine-tuned on true labeled data while the representation learning layer is kept fixed.Fine Tuning, i.e. WS+SFT, except the supervision layer is kept fixed during fine tuning. • (7.NLI) New Label Inference ( Veit et al., 2017) is similar to our proposed neural architecture inspired by the teacher-student paradigm ( Hinton et al., 2015;Romero et al., 2014), but instead of having the confidence network to predict the "confidence score" of the training instance, there is a label generator network which is trained on set V to map the weak labels of the instances in U to the new labels. The new labels are then used as the target for training the target network.Joint Training is our proposed neural architecture in which we jointly train the target network and the confidence network by alternating batches drawn from sets V and U (as explained in Section 2.2).Supervision with Joint Training is the same as CWS JT , except that parameters of the supervision layer in target network are also updated using batches from V , with regards to the true labels.Additionally, we compare the performance of CWS JT , with other possible training setups:where y j is the one- hot encoding of the sentence label over all classes.Here we first describe baselines. Afterward, we present the experimental setups for each of our tasks along with their results and analysis.For both tasks, we evaluate the performance of our method compared to the following baselines:• (a.CWS ST ) Separate Training, i.e. we consider the confidence network as a separate network, with- out sharing the representation learning layer, and train it on set V . We then train the target network on the controlled weak supervision signals.• (b.CWS CT ) Circular Training, i.e. we train the target network on set U . Then the confidence network is trained on data with true labels, and the target network is trained again but on controlled weak supervision signals.• (c.CWS PT ) Progressive Training is the mixture of the two previous baselines. Inspired by ( Rusu et al., 2016), we transfer the learned information from the converged target network to the confidence network using progressive training. We then train the target network again on the controlled weak supervision signals.The proposed architectures are implemented in TensorFlow (Tang, 2016;Abadi et al., 2015). We use the Adam optimizer ( Kingma and Ba, 2014) and the back-propagation algorithm. Furthermore, to prevent feature co-adaptation, we use dropout ( Srivastava et al., 2014) as a regularization technique in all models.In our setup, the confidence network to predict˜c predict˜ predict˜c j is a fully connected feed forward network. Given that the confidence network is learned only from a small set of true labels and to speed up training we initialize the representation learning layer with pre-trained parameters, i.e., pre-trained word embeddings. We use ReLU ( Nair and Hinton, 2010) as a non-linear activation function α in both target network and confidence network. In the following, we describe task-specific setups and the experimental results. query logs ( Pass et al., 2006). This query set contains web queries initiated by real users in the AOL search engine that were sampled from a three-month period from March 2006 to May 2006. We applied standard pre-processing (Dehghani et al., 2017c,a) on the queries. We filtered out a large volume of navigational queries containing URL substrings ("http", "www.", ".com", ".net", ".org", ".edu"). We also removed all non-alphanumeric characters from the queries. For each dataset, we took queries that have at least ten hits in the target corpus using our weak annotator method. Applying all these steps, We collect 6.15 million queries to train on in Robust04 and 6.87 million queries for ClueWeb. To prepare the weakly labeled training set U , we take the top 1000 retrieved documents using BM25 for each query from training query set Q, which in total leads to ∼ 6 training instances.Collections. We use two standard TREC col- lections for the task of ad-hoc retrieval: The first collection (Robust04) consists of 500k news articles from different news agencies as a homogeneous collection. The second collection (ClueWeb) is ClueWeb09 Category B, a large-scale web collection with over 50 million English documents, which is considered as a heterogeneous collection. Spam documents were filtered out using the Waterloo spam scorer 1 (Cormack et al., 2011) with the default threshold 70%.We conducted a nested 3-fold cross validation with 80 training/validation split in each fold. All hyper- parameters of all models and baselines were tuned individually on the validation set using batched GP bandits with an expected improvement acquisition function (Desautels et al., 2014). The size and number of hidden layers for the ranker and the confidence network were separately selected from {64, 128, 256, 512} and {1, 2, 3, 4}, respectively. The initial learning rate and the dropout parameter were selected from {10 −3 ,10 −5 } and {0.0,0.2,0.5}, Data with true labels. We take query sets that contain human-labeled judgments: a set of 250 queries (TREC topics 301-450 and 601-700) for the Robust04 collection and a set of 200 queries (topics 1-200) for the experiments on the ClueWeb collection. For each query, we take all documents judged as relevant plus the same number of documents judged as non-relevant and form pairwise combinations among them.respectively. We considered embedding sizes of {300,500}. The batch size in our experiments was set to 128.In all experiments, the parameters of the network are optimized employing the Adam optimizer ( Kingma and Ba, 2014) and using the computed gradient of the loss to perform the back-propagation algorithm. At inference time, for each query, we take the top 2000 retrieved documents using BM25 as candidate documents and re-rank them using the trained models. We use the Indri 2 implementation of BM25 with default parameters (i.e., k 1 =1.2, b=0.75, and k 3 =1000).Data with weak labels. We create a query set Q using the unique queries appearing in the AOL Results and Discussions. We evaluate on set V and report two standard evaluation metrics: mean average precision (MAP) of the top-ranked 1000 documents and normalized discounted cumulative gain calculated for the top 20 retrieved documents (nDCG@20). Statistical significant differences of MAP and nDCG@20 values are determined using Table 1: Performance of the proposed method and baseline models on different datasets. ( Ĳ or Ź indicates that the improvements or degradations are statistically significant, at the 0.05 level using the paired two-tailed t-test. For all model, the improvement/degradations is with respect to the "weak supervision only" baseline (WSO). For CWSJT, the improvement over all baselines is considered and the Bonferroni correction is applied on the significant tests.) Table 2: Performance of the variants of the proposed method on different datasets. ( Ĳ or Ź indicates that the improvements or degradations are statistically significant, at the 0.05 level using the paired two-tailed t-test. For all model, the improvement/degradations is with respect to the "weak supervision only" baseline (WSO on Table 1) . For CWSJT, the improvement over all baselines is considered and the Bonferroni correction is applied on the significant tests.)Robust04 the two-tailed paired t-test with p value &lt; 0.05, with Bonferroni correction. Table 1 shows the performance on both datasets. Based on the results, CW S JT provides a significant boost on the performance over all datasets.There are two interesting points we want to highlight. First, among the fine-tuning experiments, updating all parameters of the target network is the best fine tuning strategy. Updating only the parameters of the representation layer based on the true labels works better than updating only parameters of the supervision layer. This supports our designed choice of a shared embedding layer which gets updated on set V . Second, while it seems reasonable to make use of true labels for updating all parameters of the target network, CWS In the ranking task, the target network is designed in particular to be trained on weak annotations (Dehghani et al., 2017c), hence training the network only on weak supervision performs better than FSO. This is due to the fact that ranking is a complex task requiring many training instances, while relatively few true labels are available.The performance of NLI is worse than CWS JT as learning a mapping from imperfect labels to accurate labels and training the target network on new labels is essentially harder than learning to filter out the noisy labels, hence needs a lot of supervised data. The reason is that for the ranking, due to a few training instances with regards to the task complexity, NLI fails to generate better new labels, hence it directly misleads the target network and completely fails to improve the performance. + JT achieves no better results than CWS JT . It also performs mostly even worse than WS+FT. This is because during training, the direction of the parameter optimization is highly affected by the type of supervision signal and while we control the magnitude of the gradients, we do not change their directions, so alternating between two sets with different label qualities (different super- vision signal types, i.e. weak and string) confuses the supervision layer of the target network. In fine tinning, we don not have this problem since we opti- mize the parameters with respect to the supervision from these two sets in two separate stages.It is noteworthy that we have also tried CWS Table 2 shows the performance of different training strategies. As shown, CWS JT and CWS CT perform better than other strategies. CWS CT is to let the confidence network to be trained separately, while still being able to enjoy shared learned information from the target network. However, it is less efficient as we need two rounds of training on weakly labeled data.+ JT with another objective function for the target network taking both weak and true labels into account which was slightly better, but gives no CWS ST performs poorly since the training data V is too small to train a high-quality confidence net- work without taking advantage of the vast amount of weakly annotated data in U . We also noticed that this strategy leads to a slow convergence compared to WSO. Also transferring learned information from target network to confidence network via progres- sive training, i.e. CWS PT , performs no better than full sharing of the representation learning layer. Table 3: Performance of the baseline models as well as the proposed method on different datasets. ( Ĳ or Ź indicates that the improvements or degradations are statistically significant, at the 0.05 level using the paired two-tailed t-test. For all model, the improvement/degradations is with respect to the "weak supervision only" baseline (WSO). For CWSJT, the improvement over all baselines is considered and the Bonferroni correction is applied on the significant tests.)SemEval-14 SemEval-15 Ĳ ment ranking task, we tuned the hyper-parameters for each model, including baselines, separately with respect to the true labels of the validation set using batched GP bandits with an expected improvement acquisition function (Desautels et al., 2014). The size and number of hidden layers for the classifier and the confidence network were separately selected from {32,64,128} and {1,2,3}, respectively. We tested the model with both, 1 and 2 convolutional layers. The number of convolutional feature maps and the filter width is selected from {200, 300} and {3, 4, 5}, respectively. The initial learning rate and the dropout parameter were selected from {1E − 3,1E − 5} and {0.0,0.2,0.5}, respectively. We considered embedding sizes of {100,200} and the batch size in these experiments was set to 64.  Table 4: Performance of the variants of the proposed method for sentiment classification task, on different datasets. ( Ĳ or Ź indicates that the improvements or degradations are statis- tically significant, at the 0.05 level using the paired two-tailed t-test. For all model, the improvement/degradations is with re- spect to the "weak supervision only" baseline (WSO on Table 3) . For CWSJT, the improvement over all baselines is considered and the Bonferroni correction is applied on the significant tests. We test our model on the twit- ter message-level sentiment classification of SemEval-15 Task 10B (Rosenthal et al., 2015). Datasets of SemEval-15 subsume the test sets from previous editions of SemEval, i.e. SemEval-13 and SemEval-14. Each tweet was preprocessed so that URLs and usernames are masked.Data with true labels. We use train (9,728 tweets) and development (1,654 tweets) data from SemEval- 13 for training and SemEval-13-test (3,813 tweets) for validation. To make our results comparable to the official runs on SemEval we use SemEval-14 (1,853 tweets) and SemEval-15 (2,390 tweets) as test sets ( Rosenthal et al., 2015;Nakov et al., 2016).Results and Discussion. We report the perfor- mance of our model and the baseline models in terms of official SemEval metric, Macro-F1, in Table 3. We have also report statistical significance of F1 improvements using two-tailed paired t-test with p value &lt; 0.05, with Bonferroni correction. Our method is the best performing among all the baselines.Unlike the ranking task, training the network only on data with true labels, i.e. TSO, performs rather good. In the sentiment classification task, learning representation of input which is a sentence (tweet) is simpler than the ranking task in which we try to learn representation for query and long documents. Con- sequently, we need fewer data to be able to learn a suitable representation and with the amount of avail- able data with true labels, we can already capture a rather good representation without helps of weak data, while it was impossible in the ranking task.However, as the results suggest, we can still gain improvement using fine-tuning. In this task, behaviors of different fine-tuning experiments are similar to the ranking task. Furthermore, updating parameters of the supervision layer, with respect to the true labels, i.e. CWS + Data with weak labels. We use a large corpus containing 50M tweets collected during two months for both, training the word embeddings and creating the weakly annotated set U using the lexicon-based method explained in Section 3.2.JT model, does not perform better than CWS JT , which again supports our choice of updating just the representation learning layer with respect to the signals from data with true labels.In the sentiment classification task, the perfor- mance of NLI is acceptable compared to the ranking task. This is first of all because generating new classification labels is essentially simpler. Secondly, in this task, we need to learn to represent a simpler input, and learn a simpler function to predict the labels, but a relatively bigger set of supervised Parameters and Settings. Similar to the docu- data which helps to generate new labels. However, the performance of NLI is still lower than CWS JT . We can argue that CWS JT is a more conservative approach. It is in fact equipped with a soft filter that decreases the effect of noisy training examples from set U on parameter updates during training. This is a smoother action as we just down-weight the gradient, while NLI might change the direction of the gradient by generating a completely new label and consequently it is prone to more errors, especially when there is not enough high-quality training data to learn to generate better labels.In the sentiment classification task, besides the general baselines, we also report the best perform- ing systems, which are also convolution-based models (Rouvier and Favre (2016) on SemEval-14; Deriu et al. (2016) on SemEval-15). Our proposed model outperforms the best system on both datasets. Table 4 also presents the results of different training strategies for the sentiment classification task. As shown, similar to the ranking task, CWS JT and CWS CT perform better than other strategies. Although CWS CT is slightly better (not statistically significant) in terms of effectiveness compared to CWS JT , it is not as efficient as CWS JT during training.Compared to the ranking task, for sentiment classification, it is easier to estimate the confidence score of instances with respect to the amount of available supervised data. Therefore, CWS ST is able to improve the performance over WSO significantly. Moreover, CWS PT fails compared to the strategies where the representation learning layer is shared between the target network and the confidence network. Controlling the effect of supervision to train neu- ral networks not only improves the performance, but also provides the network with more solid sig- nals which speeds up the learning process. Figure 4 illustrates the training/validation loss for both net- works, compared to the loss of training the target net- work with weak supervision, along with their perfor- mance on test sets, with respect to different amounts of training data for the sentiment classification task 3 . As shown, in the training, the loss of the target network in our model, i.e. L t is higher than the loss of the network which is trained only on weakly supervised data, i.e. L WSO . However, since these losses are calculated with respect to the weak labels (not true labels), having very low training loss can be an indication of overfitting to the imperfection in the weak labels. In other words, regardless of the gen- eral problem of lack of generalization due to overfit- ting, in the setup of learning from weak labels, pre- dicting labels that are similar to train labels (very low training loss) is not necessarily a desirable incident.In the validation set, however, L t decreases faster than L WSO , which supports the fact that L WSO overfits to the imperfection of weak labels, while our setup helps the target network to escape from this imperfection and do a good job on the validation set. In terms of the performance, compared to WSO, the performance of CWS on both test sets increases very quickly and CWS is able to pass the performance of the weak annotator by seeing much fewer instances annotated by the weak annotator.Learning from weak or noisy labels has been studied in the literature (Frénay and Verleysen, 2014). We briefly review research most relevant to our work.Semi-supervised learning.There are semi- supervised learning algorithms ( Zhu, 2005) developed to utilize weakly or even unlabeled data. Self-training ( Rosenberg et al., 2005) or pseudo-labeling (Lee, 2013) tries to predict labels of unlabeled data. This unlabeled data is provided additionally. In particular for neural networks, methods use greedy layer-wise pre-training of weights using unlabeled data alone followed by supervised fine-tuning ( Deriu et al., 2017;Severyn and Moschitti, 2015b,a;Go et al., 2009). Other methods learn unsupervised encodings at multiple levels of the architecture jointly with a supervised signal (Ororbia II et al., 2015;Weston et al., 2012). discriminative model can learn from (Ratner et al., 2016;Rekatsinas et al., 2017;Varma et al., 2017). Other methods aim to capture the pattern of the noise by inserting an extra layer or a separated mod- ule ( Sukhbaatar et al., 2014;Veit et al., 2017), infer better labels from noisy labels and use them to super- vise the training of the network. This is inspired by the teacher-student paradigm (Hinton et al., 2015;Romero et al., 2014;Xiao et al., 2015) in which the teacher generates a new label given the training instance with its corresponding weak or noisy la- bel. However, as we show in our experiments, this approach is not sufficient when the amount of super- vised data is not enough to generate better labels.Meta-learning. From the meta-learning perspec- tive, our approach is similar to Andrychowicz et al. (2016) where a separate recurrent neural network called optimizer learns to predict an optimal update rule for updating parameters of the target network. The optimizer receives a gradient from the target network and outputs the adjusted gradient matrix. As the number of parameters in modern neural networks is typically on the order of millions the gradient matrix becomes too large to feed into the optimizer, so the approach of Andrychowicz et al. (2016) is applied to very small models. In contrast, our approach leverages additional weakly labeled data where we use the confidence network to predict per-instance scores that calibrate gradient updates for the target network.Direct learning with weak/noisy labels. Many studies tried to address learning in the condition of imperfect labels. Some noise cleansing methods were proposed to remove or correct mislabeled instances (Brodley and Friedl, 1999). Other studies showed that weak or noisy labels can be leveraged by employing a particular architecture or defining a proper loss function to avoid overfitting the training data imperfection (Dehghani et al., 2017c;Patrini et al., 2016;Beigman and Klebanov, 2009;Zeng et al., 2015;Bunescu and Mooney, 2007).Training neural networks using large amounts of weakly annotated data is an attractive approach in scenarios where an adequate amount of data with true labels is not available. In this paper, we propose a multi-task neural network architecture that unifies learning to estimate the confidence score of weak annotations and training neural networks to learn a target task with controlled weak supervision, i.e. us- ing weak labels to updating the parameters, but tak- ing their estimated confidence scores into account. This helps to alleviate updates from instances with unreliable labels that may harm the performance.We applied the model to two tasks, document ranking and sentiment classification, and empiri- cally verified that the proposed model speeds up the training process and obtains more accurate results. As a promising future direction, we are going to un- derstand to which extent using weak annotations has the potential of training high-quality models with neural networks and understand the exact conditions under which our proposed method works.
