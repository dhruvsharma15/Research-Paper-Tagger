Semantic matching is a critical task for many applications in natural language processing, including information retrieval, question answering and paraphrase identification . The target of semantic matching is to determine a matching score for two given texts. Taking the task of ques- tion answering as an example, given a pair of question and an- swer, a matching function is created to determine the match- ing degree between these two texts. Traditional methods such as BM25 and feature based learning models usually rely on exact matching patterns to determine the degree, and thus suf- fer from the vocabulary mismatching problem . from different texts. Then a spatial (2D) recurrent neural net- work (spatial RNN) with gated recurrent units is applied to the tensor. Specifically, the representation at each position h ij can be viewed as the interactions between the two pre- fixes, i.e. S 1 [1:i] and S 2 [1:j]. It is determined by four factors: h i−1,j , h i,j−1 , h i−1,j−1 and the input word level interaction s ij , depending on the corresponding gates, z t , z l , z d , and z i , respectively. Finally, the matching score is produced by a linear scoring function on the representation of the global in- teraction h mn , obtained by the aforementioned spatial RNN.We show that Match-SRNN can well approximate the dy- namic programming process of longest common subsequence (LCS) problem [Wikipedia, -]. Furthermore, our simulation experiments show that a clear matching path can be obtained by backtracking the maximum gates at each position, similar to that in LCS. Thus, there is a clear interpretation on how the global interaction is generated in Match-SRNN.We conducted experiments on question answering and pa- per citation tasks to evaluate the effectiveness of our model. The experimental results showed that Match-SRNN can sig- nificantly outperform existing deep models. Moreover, to vi- sualize the learned matching structure, we showed the match- ing path of two texts sampled from the real data.The contributions of this paper can be summarized as:• The idea of modeling the mechanism of semantic match- ing recursively, i.e. the recursive matching structure.• The proposal of a new deep architecture, namely Match- SRNN, to model the recursive matching structure. Ex- perimental results showed that Match-SRNN can signif- icantly improve the performances of semantic matching, compared with existing deep models.• The reveal of the relationship between Match-SRNN and the LCS, i.e. Match-SRNN can reproduce the matching path of LCS in an exact matching scenario.approach is consistent with users' experience that the match- ing degree between two sentences can be determined once the meanings of them being well captured. However, it is usually difficult for these methods to model the complicated inter- action relationship between two texts, especially when they have already been represented as a compact vector [Lu and Li, 2013;Bahdanau et al., 2014]. The other paradigm turns to directly model the interaction relationship of two texts. Specifically, the interaction is rep- resented as a dense vector, and then the matching score can be produced by integrating such interaction. Most existing work of this paradigm create a hierarchical matching struc- ture, i.e. the global interaction between two texts is generated by compositing the local interactions hierarchically. For ex- ample, DeepMatch [Lu and Li, 2013] models the generation of the global interaction between two texts as integrating local interactions based on hierarchies of the topics. MatchPyra- mid [Pang et al., 2016] uses a CNN to model the generation of the global interaction as an abstraction of the word level and phrase level interactions. Defining the matching struc- ture hierarchically has limitations, since hierarchical match- ing structure usually relies on a fixed window size for com- position, the long distant dependency between the local inter- actions cannot be well captured in this kind of models.In all existing methods, the mechanism of semantic matching is complicated and hard to interpret. In mathematics and com- puter science, when facing a complicated object, a common method of simplification is to divide a problem into subprob- lems of the same type, and try to solve the problems recur- sively. This is the well-known thinking of recursion. In this paper, we propose to tackle the semantic matching problem recursively. The recursive rule is defined as follows.Existing deep learning methods for semantic matching can be categorized into two groups.One paradigm focuses on representing each text to a dense vector, and then compute the matching score based on the similarity between these two vectors. For example, DSSM  uses a multi-layer fully connected neural network to encode a query (or a document) as a vec- tor. CDSSM [Shen et al., 2014] and ARC-I [ Hu et al., 2014] utilize convolutional neural network (CNN), while LSTM- RNN [Palangi et al., 2015] adopts recurrent neural network with long short term memory (LSTM) units to better rep- resent a sentence. Different from above work, CNTN [Qiu and Huang, 2015] uses a neural tensor network to model the interaction between two sentences instead of using the cosine function. With this way, it can capture more com- plex matching relations. Some methods even try to match two sentences with multiple representations, such as words, phrases, and sentences level representations. Examples in- clude RAE [Socher et al., 2011], BiCNN [Yin and Schütze, 2015a], MultiGranCNN [Yin and Schütze, 2015b], and MV- LSTM [Wan et al., 2016]. In general, the idea behind the Definition 1 (Recursive Matching Structure) Given two texts S 1 ={w 1 , · · · , w m } and S 2 ={v 1 , · · · , v n }, the in- teraction between prefixes S 1 [1:i]={w 1 , · · · , w i } and S 2 [1:j]={v 1 , · · · , v j } (denoted as h ij ) is composited by the interactions between the sub-prefixes as well as the word level interaction of the current position, as shown by the following equation:where s(w i , v j ) stands for the interaction between words w i and v j . Figure 1 illustrates an example of the recursive match- ing structure for sentences S 1 ={The cat sat on the mat} and S 2 ={The dog played balls on the floor}.Consider- ing the interaction between S 1 [1:3]={The cat sat} and S 2 [1:4]={The dog played balls} (i.e. h 34 ), the recursive matching structure defined above indicates that it is the com- position of the interactions between their prefixes (i.e. h 24 , h 33 , and h 23 ) and the word level interaction between 'sat' and 'balls', where h 24 stands for the interaction between S 1 [1:2]={The cat} and S 2 [1:4]={The dog played balls}, h 33 denotes the interaction between S 1 [1:3]={The cat sat} andThe cat sat on the mat.The dog played balls on the floor.The cat sat on the mat.The dog played balls on the floor. We can see that the most important interaction, i.e. the interaction between S 1 [1:3]={The cat sat} and S 2 [1:3]={The dog played}, has been utilized for represent- ing h 34 , which consists well with the human understanding. Therefore, it is expected that this recursive matching struc- ture can well capture the complicated interaction relationship between two texts because all of the interactions between prefixes have been taken into consideration. Compared with the hierarchical one, the recursive matching structure is able to capture long-distant dependency among interactions. 4 Match-SRNNIn this section, we introduce a new deep architecture, namely Match-SRNN, to model the recursive matching structure. As shown in Figure 2, Match-SRNN consists of three compo- nents: (1) a neural tensor network to capture the word level interactions; (2) a spatial RNN applied on the word interac- tion tensor to obtain the global interaction; (3) a linear scoring function to obtain the final matching score.In Match-SRNN, a neural tensor network is first utilized to capture the basic interactions between two texts, i.e. word level interactions. Specifically, each word is first represented as a distributed vector. Given any two words w i and v j , and their vectors u(w i ) and u(v j ), the interaction between them can be represented as a vector:Therefore we can see that spatial RNN can naturally model the recursive matching structure defined in Equation (1). For function f , we have different choices. The basic RNN usually uses a non-linear full connection layer as f . This type of function is easy for computing while often suffers from the gradient vanishing and exploding problem [Pascanu et al., 2013]. Therefore, many variants of RNN has been proposed, such as Long Short Term Memory (LSTM) [Hochreiter and Schmidhuber, 1997], Gated Recurrent Units (GRU) [Cho et al., 2014] and Grid LSTM [Kalchbrenner et al., 2015]. Here, we adopt GRU since it is easy to implement and has close relationship with LCS as discussed in the following sections.GRU is proposed to utilize several gates to tackle the afore- mentioned problems of basic RNN, and has shown excellent performance for tasks such as machine translation [Cho et al., 2014]. In this paper, we extend traditional GRU for se- quences (1D-GRU) to spatial GRU. Figure 3 describes clearly about the extensions.For 1D-GRU , given a sentence S=(x 1 , x 2 , · · · , x T ), where x t stands for the embedding of the t-th words, the rep- resentation of position t, i.e. h t , can be computed as follows:whereis one slice of the tensor parameters, W and b are parameters of the linear part. F is a non-linear function, and we use rectifier F (z) = max(0, z) in this paper.The interaction can also be represented as a similarity score, such as cosine. We adopt neural tensor network here because it can capture more complicated interactions [Socher et al., 2013a;Socher et al., 2013b;Qiu and Huang, 2015].The second step of Match-SRNN is to apply a spatial RNN to the word level interaction tensor. Spatial RNN, also re- ferred to as two dimensional RNN (2D-RNN), is a special case of multi-dimensional RNN [Graves et al., 2007;Graves and Schmidhuber, 2009;Theis and Bethge, 2015]. Accord- ing to spatial RNN, given the representations of interac- tions between prefixeswhere h t−1 is the representation of position t−1,, W and U are the parameters, z is the updating gate which tries to control whether to propa- gate the old information to the new states or to write the new generated information to the states, and r is the reset gate which tries to reset the information stored in the cells when generating new candidate hidden states.When extending to spatial GRU, context information will come from three directions for a given position (i, j), i.e. (i−1, j), (i, j−1) and (i−1, j−1), therefore, we will have four updating gates z, denoted as z l , z t , z d and z i , and three reset gates r, denoted as r l , rAll parameters of the model, including the parameters of word embedding, neural tensor network, spatial RNN are jointly trained by BackPropagation and Stochastic Gradient Descent. Specifically, we use AdaGrad [Duchi et al., 2011] on all parameters in the training process. puted as follows.In this section, we show the relationship between Match- SRNN and the well known longest common subsequence (LCS) problem.The goal of LCS problem is to find the longest subsequence common to all sequences in a set of sequences (often just two sequences). In many applications such as DNA detection, the lengths of LCS are used to define the matching degree be- tween two sequences. Formally, given two sequences, e.g. where U , W 's, and b's are parameters, and SoftmaxByRow is a function to conduct softmax on each dimension across the four gates, that is:, p = i, l, t, d.Since spatial RNN is a recursive model scanning the input from left top to right bottom, we can obtain the last repre- sentation as h mn at the right bottom corner. h mn reflects the global interaction between the two texts. The final matching score can be obtained with a linear function:where I {xi=yj } is an indicator function, it is equal to 1 if x i = y j , and 0 otherwise. c[i, j]=0 if i=0 or j=0.Match-SRNN has strong connection to LCS. To show this, we first degenerate the Match-SRNN to model an ex- act matching problem, by replacing the neural tensor network with a simple indicator function which returns 1 if the two words are identical and 0 otherwise, i.e. s ij =I {xi=yj } . The dimension of spatial GRU cells is also set to 1. The reset gates of spatial GRU are disabled since the length of LCS is accu- mulated depending on all the past histories. Thus, Equation (4) can be degenerated as For different tasks, we need to utilize different loss functions to train our model. Taking regression as an example, we can use square loss for optimization:  (7), respectively. Please note that z l , z t , z d and z i are calculated by SoftmaxByRow, and thus can approximate the max operation in Equation (7). By ap- propriately setting z i and z d and other parameters of Match-where y ∈ R is the real-valued ground-truth label to indicate the matching degree between S 1 and S 2 . For ranking problem, we can utilize pairwise ranking loss such as hinge loss for training. Given a triple (S 1 , S ij can approximate the simple addition operation h i−1,j−1 +s ij , where h i−1,j−1 and s ij cor- respond to the c[i−1, j−1] and I {xi=yj } , respectively. There- fore, the computation of h ij in Eq. (4) can well approximate c [i, j] in Eq. (7). 2 ), where the matching degree of (S 1 , S + 2 ) is higher than (S 1 , S − 2 ), the loss function is defined as:We conducted a simulation experiment to verify the analysis result shown above. The dataset was constructed by many random sampled sequence pairs, with each sequence com- posed of characters sampled from the vocabulary Match-SRNN. QA dataset is collected from Yahoo! Answers, a commu- nity question answering system where some users propose questions to the system and other users will submit their an- swers, as in [Wan et al., 2016]. The whole dataset contains 142,627 (question, answer) pairs, where each question is ac- companied by its best answer. We select the pairs in which questions and their best answers both have a length between 5 and 50. After that the dataset contains 60,564 (questions, answer) pairs which form the positive pairs. For each ques- tion, we first use its best answer as a query to retrieval the top 1,000 results from the whole answer set, with Lucene search engine. Then we randomly select 4 answers from them to construct the negative pairs. PC task is to match two papers with citation relationship. The dataset is constructed as in [Pang et al., 2016]. The paper abstract information and citation network are collected from a commercial academic website. The negative pairs are randomly sampled from the whole dataset. Finally, we have 280K positive and 560K negative instances.F G H I J}. Firstly, the dynamic programming algorithm of LCS was conducted on each sequence pair, and the normal- ized length of LCS is set to be the matching degree of each se- quence pair. For simulation, we split the data into the training (10000 pairs) and testing set (1000 pairs), and trained Match- SRNN with regression loss. The simulation results on two sequences S 1 = {A, B, C, D, E} and S 2 = {F, A, C, G, D} are shown in Figure 4. Figure 4 (a) shows the results of LCS, where the scores at each position (i, j) stands for c [i, j], and the gray path indi- cates the process of finding the LCS between two sequences, which is obtained by backtracing the dynamic programming process. Figure 4 (b) gives the results of Match-SRNN, where the score at each position (i, j) stands for the representation h ij (please note that for simplification the dimension of h ij is set to 1). We can see that the scores produced by Match- SRNN is identical to that obtained by LCS, which reveals the relationship between Match-SRNN and LCS.The gray path in Figure 4 (b) shows the main path of how local interactions are composited to the global inter- action, which is generated by backtracing the gates. Fig- ure 4 (c) shows the path generation process, where the three values at each positions stands for the three gates, e.g. z l =0.9, z t =0.1, z d =0 at position (5, 5). Considering the last position (5, 5), the matching signals are passed over from the direction with the largest value of gates, i.e. z l , therefore, we move to the position (5, 4). At position (5, 4), the largest value of gates is z d =0.7, therefore, we should move to posi- tion (3, 3). We can see that the path induced by Match-SRNN is identical to that of by dynamic programming. This analy- sis gives a clear explanation on the mechanism of how the semantic matching problem be addressed by Match-SRNN.We compared Match-SRNN with several existing deep learn- ing methods, including ARC-I, ARC-II, CNTN, LSTM- RNN, MultiGranCNN, MV-LSTM and MatchPyramid. We also compared with BM25 [Robertson et al., 1995], which is a popular and strong baseline for semantic matching in infor- mation retrieval. For Match-SRNN, we also implemented the bidirectional version for comparison, which also scans from right bottom to left top on the word interaction tensor, denoted as Bi-Match-SRNN.In our experiments, we set the parameters and the base- lines as follows. Word embeddings used in our model and in some baseline deep models are all initialized by SkipGram of Word2Vec [Mikolov et al., 2013]. Following the previ- ous practice, word embeddings are trained on the whole ques- tion answering data set, and the dimension is set to 50. The batch size of SGD is set to 128. All other trainable parame- ters are initialized randomly by uniform distribution with the same scale, which is selected according to the performance on validation set. The initial learning rates of AdaGrad are also selected by validation. The dimension of neural tensor network and spatial RNN is set to 10, because it won the best validation results among the settings of d = 1, 2, 5, 10, and 20. The other parameters for the baseline methods are set by taking the values from the original papers.The QA task is formulated as a ranking problem. There- fore, we use the hinge loss for optimization, as shown in Section 4.4, and the results are evaluated by typical ranking measures, such as Precision at 1 (denoted as P@1) and Mean Reciprocal Rank (MRR).where N is the number of testing ranking lists, S +(i) 2We conducted experiments on the tasks of question answering (QA) and paper citation (PC) to evaluate the effectiveness of is the positive sentence in the i − th ranking list, r(·) denotes the rank of a sentence in the ranking list, and δ is the indicator function. The PC task is formulated as a binary classification  Table 1: Experimental results of QA and PC tasks.task. Therefore the matching score is used by a softmax layer and cross entropy loss is used for training. We use classifica- tion accuracy (Acc) as the evaluation measure. The experimental results are listed in Table 1. We have the following experimental findings:(1) By modeling the recursive matching structure, Match- SRNN can significantly improve the performances, compared with all of the baselines. Taking QA task as an example, com- pared with BM25, the improvement is about 36.4% in terms of P@1. Compared with MV-LSTM, the best one among deep learning methods focusing on learning sentence repre- sentations, the improvement is about 3.1%. Compared with the deep models using hierarchical composition structures (i.e. ARC-II and MatchPyramid), the improvements are at least 3.4%. For PC task, Match-SRNN also achieves the best results, though the improvements are smaller as compared to those on QA task. This is because the task is much easier, and even simple model such as BM 25 can produce a good result. From the above analysis, we can see that the recursive matching structure can help to improve the results of semantic matching.(2) Both of the two matching paradigms (representing text into dense vectors and modeling the interaction relation- ship) have their own advantages, and the results are com- parable, e.g. the previous best results of the two paradigms on QA dataset are 0.766/0.869 (MV-LSTM) and 0.764/0.867 (MatchPyramid). tion. Specifically, we set the values of different dimensions in the gates to be identical, which is convenient for the backtrac- ing process. Since the hidden dimension is set to 10, as used in the above Match-SRNN, we can obtain 10 values for each h ij . We choose to visualize the feature map of the dimension with the largest weight in producing the final matching score. Similar visualization can be obtained for other dimensions, and we omit them due to space limitation.The visualization results are shown in Figure 5, where the brightness of each position stands for the interaction strength. We can see that the recursive matching structure can be shown clearly. When there is a strong word level interac- tion happened in some position (e.g., the exact word match of (memory, memory)), the interaction between the two texts are strengthened and thus the bottom-right side of the position becomes brighter. The interactions are further strengthened with more strong word level interactions, i.e., the bottom- right side of the matching positions of (stick, stick) and (error, error) become even brighter. Backtracing the gates, we obtain the matching path which crosses all the points with strong word interactions, as shown by red curve in Figure 5. It gives a clear interpretation on how Match-SRNN conducted the semantic matching on this real example.To show how Math-SRNN works and give an insight on its mechanism on real dataset, we conducted a case study to vi- sualize the interactions generated by Match-SRNN.The example sentences are selected from the testing set of QA dataset.Question: "How to get rid of memory stick error of my sony cyber shot?"Answer: "You might want to try to format the memory stick but what is the error message you are receiving."We can see that in this example, the matching of a bigram (memory, stick) and a keyword (error) is important for cal- culating the matching score. In this experiment, we used a simplified version Match-SRNN to give a better interpreta- In this paper, we propose a recursive thinking to tackle the complicated semantic matching problem. Specifically, a novel deep learning architecture, namely Match-SRNN is proposed to model the recursive matching structure. Match- SRNN consists of three parts: a neural tensor network to ob- tain the word level interactions, a spatial RNN to generate the global interactions recursively, and a linear scoring func- tion to output the matching degree. Our analysis reveals an interesting connection of Match-SRNN to LCS. Finally, our experiments on semantic matching tasks showed that Match- SRNN can significantly outperform existing deep learning methods. Furthermore, we visualized the recursive matching structure discovered by Match-SRNN on a real example.
